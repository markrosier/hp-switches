

Microchip Technology PIC LITE Macro Assembler V1.31 build 56723 
                                                                                               Tue Jul 21 13:51:57 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 56723
     1                           	processor	12F1822
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	intentry,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     	;# 
    21  0001                     	;# 
    22  0002                     	;# 
    23  0003                     	;# 
    24  0004                     	;# 
    25  0005                     	;# 
    26  0006                     	;# 
    27  0007                     	;# 
    28  0008                     	;# 
    29  0009                     	;# 
    30  000A                     	;# 
    31  000B                     	;# 
    32  000C                     	;# 
    33  0011                     	;# 
    34  0012                     	;# 
    35  0015                     	;# 
    36  0016                     	;# 
    37  0016                     	;# 
    38  0017                     	;# 
    39  0018                     	;# 
    40  0019                     	;# 
    41  001A                     	;# 
    42  001B                     	;# 
    43  001C                     	;# 
    44  001E                     	;# 
    45  001F                     	;# 
    46  008C                     	;# 
    47  0091                     	;# 
    48  0092                     	;# 
    49  0095                     	;# 
    50  0096                     	;# 
    51  0097                     	;# 
    52  0098                     	;# 
    53  0099                     	;# 
    54  009A                     	;# 
    55  009B                     	;# 
    56  009B                     	;# 
    57  009C                     	;# 
    58  009D                     	;# 
    59  009E                     	;# 
    60  010C                     	;# 
    61  0111                     	;# 
    62  0112                     	;# 
    63  0115                     	;# 
    64  0116                     	;# 
    65  0117                     	;# 
    66  0118                     	;# 
    67  0119                     	;# 
    68  011A                     	;# 
    69  011B                     	;# 
    70  011D                     	;# 
    71  011D                     	;# 
    72  018C                     	;# 
    73  0191                     	;# 
    74  0191                     	;# 
    75  0192                     	;# 
    76  0193                     	;# 
    77  0193                     	;# 
    78  0193                     	;# 
    79  0194                     	;# 
    80  0195                     	;# 
    81  0196                     	;# 
    82  0199                     	;# 
    83  019A                     	;# 
    84  019B                     	;# 
    85  019B                     	;# 
    86  019B                     	;# 
    87  019B                     	;# 
    88  019C                     	;# 
    89  019C                     	;# 
    90  019D                     	;# 
    91  019E                     	;# 
    92  019F                     	;# 
    93  020C                     	;# 
    94  0211                     	;# 
    95  0211                     	;# 
    96  0212                     	;# 
    97  0212                     	;# 
    98  0213                     	;# 
    99  0213                     	;# 
   100  0214                     	;# 
   101  0214                     	;# 
   102  0215                     	;# 
   103  0215                     	;# 
   104  0215                     	;# 
   105  0216                     	;# 
   106  0216                     	;# 
   107  0217                     	;# 
   108  0217                     	;# 
   109  0291                     	;# 
   110  0291                     	;# 
   111  0292                     	;# 
   112  0293                     	;# 
   113  0294                     	;# 
   114  0295                     	;# 
   115  0295                     	;# 
   116  0296                     	;# 
   117  0391                     	;# 
   118  0392                     	;# 
   119  0393                     	;# 
   120  039A                     	;# 
   121  039C                     	;# 
   122  039D                     	;# 
   123  039E                     	;# 
   124  039F                     	;# 
   125  0FE4                     	;# 
   126  0FE5                     	;# 
   127  0FE6                     	;# 
   128  0FE7                     	;# 
   129  0FE8                     	;# 
   130  0FE9                     	;# 
   131  0FEA                     	;# 
   132  0FEB                     	;# 
   133  0FED                     	;# 
   134  0FEE                     	;# 
   135  0FEF                     	;# 
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  0006                     	;# 
   143  0007                     	;# 
   144  0008                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0015                     	;# 
   152  0016                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  001E                     	;# 
   161  001F                     	;# 
   162  008C                     	;# 
   163  0091                     	;# 
   164  0092                     	;# 
   165  0095                     	;# 
   166  0096                     	;# 
   167  0097                     	;# 
   168  0098                     	;# 
   169  0099                     	;# 
   170  009A                     	;# 
   171  009B                     	;# 
   172  009B                     	;# 
   173  009C                     	;# 
   174  009D                     	;# 
   175  009E                     	;# 
   176  010C                     	;# 
   177  0111                     	;# 
   178  0112                     	;# 
   179  0115                     	;# 
   180  0116                     	;# 
   181  0117                     	;# 
   182  0118                     	;# 
   183  0119                     	;# 
   184  011A                     	;# 
   185  011B                     	;# 
   186  011D                     	;# 
   187  011D                     	;# 
   188  018C                     	;# 
   189  0191                     	;# 
   190  0191                     	;# 
   191  0192                     	;# 
   192  0193                     	;# 
   193  0193                     	;# 
   194  0193                     	;# 
   195  0194                     	;# 
   196  0195                     	;# 
   197  0196                     	;# 
   198  0199                     	;# 
   199  019A                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019C                     	;# 
   205  019C                     	;# 
   206  019D                     	;# 
   207  019E                     	;# 
   208  019F                     	;# 
   209  020C                     	;# 
   210  0211                     	;# 
   211  0211                     	;# 
   212  0212                     	;# 
   213  0212                     	;# 
   214  0213                     	;# 
   215  0213                     	;# 
   216  0214                     	;# 
   217  0214                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0216                     	;# 
   222  0216                     	;# 
   223  0217                     	;# 
   224  0217                     	;# 
   225  0291                     	;# 
   226  0291                     	;# 
   227  0292                     	;# 
   228  0293                     	;# 
   229  0294                     	;# 
   230  0295                     	;# 
   231  0295                     	;# 
   232  0296                     	;# 
   233  0391                     	;# 
   234  0392                     	;# 
   235  0393                     	;# 
   236  039A                     	;# 
   237  039C                     	;# 
   238  039D                     	;# 
   239  039E                     	;# 
   240  039F                     	;# 
   241  0FE4                     	;# 
   242  0FE5                     	;# 
   243  0FE6                     	;# 
   244  0FE7                     	;# 
   245  0FE8                     	;# 
   246  0FE9                     	;# 
   247  0FEA                     	;# 
   248  0FEB                     	;# 
   249  0FED                     	;# 
   250  0FEE                     	;# 
   251  0FEF                     	;# 
   252  000B                     _INTCONbits	set	11
   253  000C                     _PORTAbits	set	12
   254  009B                     _ADRES	set	155
   255  009D                     _ADCON0bits	set	157
   256  009E                     _ADCON1bits	set	158
   257  0099                     _OSCCON	set	153
   258  008C                     _TRISAbits	set	140
   259  0097                     _WDTCONbits	set	151
   260  0117                     _FVRCONbits	set	279
   261  010C                     _LATAbits	set	268
   262  018C                     _ANSELAbits	set	396
   263  0393                     _IOCAFbits	set	915
   264  0392                     _IOCANbits	set	914
   265  0391                     _IOCAPbits	set	913
   266                           
   267                           	psect	intentry
   268  0004                     __pintentry:	
   269                           
   270                           ; #config settings
   271  0000                     
   272 ;; *************** function _isr *****************
   273 ;; Defined at:
   274 ;;		line 22 in file "interrupt.c"
   275 ;; Parameters:    Size  Location     Type
   276 ;;		None
   277 ;; Auto vars:     Size  Location     Type
   278 ;;  us              1    2[COMMON] unsigned char 
   279 ;; Return value:  Size  Location     Type
   280 ;;		None               void
   281 ;; Registers used:
   282 ;;		wreg, status,2, status,0
   283 ;; Tracked objects:
   284 ;;		On entry : 0/0
   285 ;;		On exit  : 0/0
   286 ;;		Unchanged: 0/0
   287 ;; Data sizes:     COMMON   BANK0   BANK1
   288 ;;      Params:         0       0       0
   289 ;;      Locals:         1       0       0
   290 ;;      Temps:          2       0       0
   291 ;;      Totals:         3       0       0
   292 ;;Total ram usage:        3 bytes
   293 ;; Hardware stack levels used:    1
   294 ;; This function calls:
   295 ;;		Nothing
   296 ;; This function is called by:
   297 ;;		Interrupt level 1
   298 ;; This function uses a non-reentrant model
   299 ;;
   300  0004                     _isr:	
   301                           
   302                           ;incstack = 0
   303                           ; Regs used in _isr: [wreg+status,2+status,0]
   304  0004  3180               	pagesel	$
   305  0005  0020               	movlb	0	; select bank0
   306  0006  087F               	movf	127,w
   307  0007  00F1               	movwf	??_isr+1
   308                           
   309                           ;interrupt.c: 24: if (INTCONbits.IOCIF)
   310  0008  1C0B               	btfss	11,0	;volatile
   311  0009  2827               	goto	i1l20
   312                           
   313                           ;interrupt.c: 25: {
   314                           ;interrupt.c: 26: if (IOCAFbits.IOCAF2)
   315  000A  0027               	movlb	7	; select bank7
   316  000B  1D13               	btfss	19,2	;volatile
   317  000C  281A               	goto	i1l21
   318                           
   319                           ;interrupt.c: 27: {
   320                           ;interrupt.c: 28: d = PORTAbits.RA2;
   321  000D  0020               	movlb	0	; select bank0
   322  000E  0C0C               	rrf	12,w	;volatile
   323  000F  0C89               	rrf	9,f
   324  0010  3901               	andlw	1
   325  0011  00F0               	movwf	??_isr
   326  0012  0C70               	rrf	??_isr,w
   327  0013  107A               	bcf	_d/(0+8),_d& (0+7)
   328  0014  1803               	btfsc	3,0
   329  0015  147A               	bsf	_d/(0+8),_d& (0+7)
   330                           
   331                           ;interrupt.c: 29: LATAbits.LATA1 = 1;
   332  0016  0022               	movlb	2	; select bank2
   333  0017  148C               	bsf	12,1	;volatile
   334                           
   335                           ;interrupt.c: 30: if (!d)
   336  0018  1C7A               	btfss	_d/(0+8),_d& (0+7)
   337                           
   338                           ;interrupt.c: 31: LATAbits.LATA1 = 0;
   339  0019  108C               	bcf	12,1	;volatile
   340  001A                     i1l21:	
   341                           
   342                           ;interrupt.c: 32: }
   343                           ;interrupt.c: 33: if (d == 1)
   344  001A  1C7A               	btfss	_d/(0+8),_d& (0+7)
   345  001B  2824               	goto	i1l23
   346                           
   347                           ;interrupt.c: 34: { unsigned char us; us = (2)/(12000000/8000000L)|1; while(--us != 0) c
      +                          ontinue; };
   348  001C  3003               	movlw	3
   349  001D  00F0               	movwf	??_isr
   350  001E  0870               	movf	??_isr,w
   351  001F  00F2               	movwf	isr@us
   352  0020                     i1l781:	
   353  0020  3001               	movlw	1
   354  0021  02F2               	subwf	isr@us,f
   355  0022  1D03               	btfss	3,2
   356  0023  2820               	goto	i1l781
   357  0024                     i1l23:	
   358                           
   359                           ;interrupt.c: 35: IOCAFbits.IOCAF2 = 0;
   360  0024  0027               	movlb	7	; select bank7
   361  0025  1113               	bcf	19,2	;volatile
   362                           
   363                           ;interrupt.c: 36: INTCONbits.IOCIF = 0;
   364  0026  100B               	bcf	11,0	;volatile
   365  0027                     i1l20:	
   366                           
   367                           ;interrupt.c: 37: }
   368                           ;interrupt.c: 38: LATAbits.LATA1 = 0;
   369  0027  0022               	movlb	2	; select bank2
   370  0028  108C               	bcf	12,1	;volatile
   371  0029  0871               	movf	??_isr+1,w
   372  002A  0020               	movlb	0	; select bank0
   373  002B  00FF               	movwf	127
   374  002C  0009               	retfie
   375  002D                     __end_of_isr:	
   376  007E                     btemp	set	126	;btemp
   377  007E                     wtemp	set	126
   378  007E                     wtemp0	set	126
   379  0080                     wtemp1	set	128
   380  0082                     wtemp2	set	130
   381  0084                     wtemp3	set	132
   382  0086                     wtemp4	set	134
   383  0088                     wtemp5	set	136
   384  007F                     wtemp6	set	127
   385  007E                     ttemp	set	126
   386  007E                     ttemp0	set	126
   387  0081                     ttemp1	set	129
   388  0084                     ttemp2	set	132
   389  0087                     ttemp3	set	135
   390  007F                     ttemp4	set	127
   391  007E                     ltemp	set	126
   392  007E                     ltemp0	set	126
   393  0082                     ltemp1	set	130
   394  0086                     ltemp2	set	134
   395  0080                     ltemp3	set	128
   396                           
   397                           	psect	cinit
   398  002E                     start_initialization:	
   399  002E                     __initialization:	
   400                           
   401                           ; Clear objects allocated to BITCOMMON
   402  002E  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   403                           
   404                           ; Clear objects allocated to BANK1
   405  002F  0021               	movlb	1	; select bank1
   406  0030  01A0               	clrf	__pbssBANK1& (0+127)
   407  0031  01A1               	clrf	(__pbssBANK1+1)& (0+127)
   408  0032  01A2               	clrf	(__pbssBANK1+2)& (0+127)
   409  0033  01A3               	clrf	(__pbssBANK1+3)& (0+127)
   410  0034                     end_of_initialization:	
   411                           ;End of C runtime variable initialization code
   412                           
   413  0034                     __end_of__initialization:	
   414  0034  0020               	movlb	0
   415  0035  2836               	ljmp	_main	;jump to C main() function
   416                           
   417                           	psect	bitbssCOMMON
   418  03D0                     __pbitbssCOMMON:	
   419  03D0                     _d:	
   420  03D0                     	ds	1
   421                           
   422                           	psect	bssBANK1
   423  00A0                     __pbssBANK1:	
   424  00A0                     _cumulativeVal:	
   425  00A0                     	ds	4
   426                           
   427                           	psect	cstackBANK1
   428  00A4                     __pcstackBANK1:	
   429  00A4                     main@steadyStateValue:	
   430                           
   431                           ; 2 bytes @ 0x0
   432  00A4                     	ds	2
   433  00A6                     main@i:	
   434                           
   435                           ; 2 bytes @ 0x2
   436  00A6                     	ds	2
   437                           
   438                           	psect	cstackCOMMON
   439  0070                     __pcstackCOMMON:	
   440  0070                     ?_initInterrupt:	
   441  0070                     ?_isr:	
   442                           ; 0 bytes @ 0x0
   443                           
   444  0070                     ??_isr:	
   445                           ; 0 bytes @ 0x0
   446                           
   447  0070                     ?_init:	
   448                           ; 0 bytes @ 0x0
   449                           
   450  0070                     ?_main:	
   451                           ; 0 bytes @ 0x0
   452                           
   453                           
   454                           ; 0 bytes @ 0x0
   455  0070                     	ds	2
   456  0072                     isr@us:	
   457                           
   458                           ; 1 bytes @ 0x2
   459  0072                     	ds	1
   460  0073                     ??_initInterrupt:	
   461  0073                     ?__delay_ms:	
   462                           ; 0 bytes @ 0x3
   463                           
   464  0073                     ??_init:	
   465                           ; 0 bytes @ 0x3
   466                           
   467  0073                     ??___aldiv:	
   468                           ; 0 bytes @ 0x3
   469                           
   470  0073                     ?_abs:	
   471                           ; 0 bytes @ 0x3
   472                           
   473  0073                     ?_getValue:	
   474                           ; 2 bytes @ 0x3
   475                           
   476  0073                     __delay_ms@ms:	
   477                           ; 2 bytes @ 0x3
   478                           
   479  0073                     abs@a:	
   480                           ; 2 bytes @ 0x3
   481                           
   482                           
   483                           ; 2 bytes @ 0x3
   484  0073                     	ds	1
   485  0074                     ___aldiv@counter:	
   486                           
   487                           ; 1 bytes @ 0x4
   488  0074                     	ds	1
   489  0075                     ??_abs:	
   490  0075                     ??__delay_ms:	
   491                           ; 0 bytes @ 0x5
   492                           
   493  0075                     ??_getValue:	
   494                           ; 0 bytes @ 0x5
   495                           
   496  0075                     ___aldiv@sign:	
   497                           ; 0 bytes @ 0x5
   498                           
   499                           
   500                           ; 1 bytes @ 0x5
   501  0075                     	ds	1
   502  0076                     __delay_ms@i:	
   503  0076                     ___aldiv@quotient:	
   504                           ; 1 bytes @ 0x6
   505                           
   506                           
   507                           ; 4 bytes @ 0x6
   508  0076                     	ds	1
   509  0077                     __delay_ms@us:	
   510                           
   511                           ; 1 bytes @ 0x7
   512  0077                     	ds	3
   513                           
   514                           	psect	cstackBANK0
   515  0020                     __pcstackBANK0:	
   516  0020                     ?___aldiv:	
   517  0020                     ___aldiv@divisor:	
   518                           ; 4 bytes @ 0x0
   519                           
   520                           
   521                           ; 4 bytes @ 0x0
   522  0020                     	ds	4
   523  0024                     ___aldiv@dividend:	
   524                           
   525                           ; 4 bytes @ 0x4
   526  0024                     	ds	4
   527  0028                     ?_calibrate:	
   528                           
   529                           ; 2 bytes @ 0x8
   530  0028                     	ds	2
   531  002A                     ??_calibrate:	
   532                           
   533                           ; 0 bytes @ 0xA
   534  002A                     	ds	4
   535  002E                     calibrate@lastVal:	
   536                           
   537                           ; 2 bytes @ 0xE
   538  002E                     	ds	2
   539  0030                     calibrate@averageVal:	
   540                           
   541                           ; 4 bytes @ 0x10
   542  0030                     	ds	4
   543  0034                     calibrate@i:	
   544                           
   545                           ; 1 bytes @ 0x14
   546  0034                     	ds	1
   547  0035                     calibrate@inputVal:	
   548                           
   549                           ; 2 bytes @ 0x15
   550  0035                     	ds	2
   551  0037                     ??_main:	
   552                           
   553                           ; 0 bytes @ 0x17
   554  0037                     	ds	6
   555  003D                     main@averageTable:	
   556                           
   557                           ; 32 bytes @ 0x1D
   558  003D                     	ds	32
   559  005D                     main@sample:	
   560                           
   561                           ; 2 bytes @ 0x3D
   562  005D                     	ds	2
   563  005F                     main@timeout:	
   564                           
   565                           ; 2 bytes @ 0x3F
   566  005F                     	ds	2
   567  0061                     main@upperBallSensorThresholdValue:	
   568                           
   569                           ; 2 bytes @ 0x41
   570  0061                     	ds	2
   571  0063                     main@toggleCount:	
   572                           
   573                           ; 2 bytes @ 0x43
   574  0063                     	ds	2
   575  0065                     main@state:	
   576                           
   577                           ; 1 bytes @ 0x45
   578  0065                     	ds	1
   579  0066                     main@averagePtr:	
   580                           
   581                           ; 1 bytes @ 0x46
   582  0066                     	ds	1
   583  0067                     main@value:	
   584                           
   585                           ; 2 bytes @ 0x47
   586  0067                     	ds	2
   587  0069                     main@steadyToLower:	
   588                           
   589                           ; 2 bytes @ 0x49
   590  0069                     	ds	2
   591  006B                     main@lowerToUpper:	
   592                           
   593                           ; 2 bytes @ 0x4B
   594  006B                     	ds	2
   595  006D                     main@lowerBallSensorThresholdValue:	
   596                           
   597                           ; 2 bytes @ 0x4D
   598  006D                     	ds	2
   599                           
   600                           	psect	maintext
   601  0036                     __pmaintext:	
   602 ;;
   603 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
   604 ;;
   605 ;; *************** function _main *****************
   606 ;; Defined at:
   607 ;;		line 157 in file "main.c"
   608 ;; Parameters:    Size  Location     Type
   609 ;;		None
   610 ;; Auto vars:     Size  Location     Type
   611 ;;  averageTable   32   29[BANK0 ] int [16]
   612 ;;  i               2    2[BANK1 ] int 
   613 ;;  steadyStateV    2    0[BANK1 ] int 
   614 ;;  lowerBallSen    2   77[BANK0 ] int 
   615 ;;  lowerToUpper    2   75[BANK0 ] int 
   616 ;;  steadyToLowe    2   73[BANK0 ] int 
   617 ;;  value           2   71[BANK0 ] int 
   618 ;;  toggleCount     2   67[BANK0 ] int 
   619 ;;  upperBallSen    2   65[BANK0 ] int 
   620 ;;  timeout         2   63[BANK0 ] int 
   621 ;;  sample          2   61[BANK0 ] int 
   622 ;;  averagePtr      1   70[BANK0 ] unsigned char 
   623 ;;  state           1   69[BANK0 ] enum E2412
   624 ;; Return value:  Size  Location     Type
   625 ;;		None               void
   626 ;; Registers used:
   627 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
   628 ;; Tracked objects:
   629 ;;		On entry : 17F/0
   630 ;;		On exit  : 0/0
   631 ;;		Unchanged: 0/0
   632 ;; Data sizes:     COMMON   BANK0   BANK1
   633 ;;      Params:         0       0       0
   634 ;;      Locals:         0      50       4
   635 ;;      Temps:          0       6       0
   636 ;;      Totals:         0      56       4
   637 ;;Total ram usage:       60 bytes
   638 ;; Hardware stack levels required when called:    3
   639 ;; This function calls:
   640 ;;		___aldiv
   641 ;;		__delay_ms
   642 ;;		_calibrate
   643 ;;		_getValue
   644 ;;		_init
   645 ;;		_initInterrupt
   646 ;; This function is called by:
   647 ;;		Startup code after reset
   648 ;; This function uses a non-reentrant model
   649 ;;
   650                           
   651                           
   652                           ;psect for function _main
   653  0036                     _main:	
   654                           
   655                           ;main.c: 159: int steadyStateValue, lowerBallSensorThresholdValue, upperBallSensorThresh
      +                          oldValue;
   656                           ;main.c: 160: int steadyToLower=-40;
   657                           
   658                           ;incstack = 0
   659                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
   660  0036  30D8               	movlw	216
   661  0037  0020               	movlb	0	; select bank0
   662  0038  00E9               	movwf	main@steadyToLower
   663  0039  30FF               	movlw	255
   664  003A  00EA               	movwf	main@steadyToLower+1
   665                           
   666                           ;main.c: 161: int lowerToUpper=30;
   667  003B  301E               	movlw	30
   668  003C  00EB               	movwf	main@lowerToUpper
   669  003D  3000               	movlw	0
   670  003E  00EC               	movwf	main@lowerToUpper+1
   671                           
   672                           ;main.c: 162: enum {offState, onState} state = offState;
   673  003F  01E5               	clrf	main@state
   674                           
   675                           ;main.c: 163: int i;
   676                           ;main.c: 164: int value, sample, timeout;
   677                           ;main.c: 165: int toggleCount=0;
   678  0040  01E3               	clrf	main@toggleCount
   679  0041  01E4               	clrf	main@toggleCount+1
   680                           
   681                           ;main.c: 166: unsigned char averagePtr=0;
   682  0042  01E6               	clrf	main@averagePtr
   683                           
   684                           ;main.c: 167: int averageTable[16];
   685                           ;main.c: 169: init();
   686  0043  23B4               	fcall	_init
   687  0044  0064               	clrwdt	;# 
   688                           
   689                           ;main.c: 175: LATAbits.LATA5 = 0;
   690  0045  0022               	movlb	2	; select bank2
   691  0046  128C               	bcf	12,5	;volatile
   692                           
   693                           ;main.c: 176: LATAbits.LATA0 = 0;
   694  0047  100C               	bcf	12,0	;volatile
   695                           
   696                           ;main.c: 177: _delay_ms(200);
   697  0048  30C8               	movlw	200
   698  0049  00F3               	movwf	__delay_ms@ms
   699  004A  3000               	movlw	0
   700  004B  00F4               	movwf	__delay_ms@ms+1
   701  004C  23CF               	fcall	__delay_ms
   702  004D  0064               	clrwdt	;# 
   703                           
   704                           ;main.c: 180: LATAbits.LATA5 = 1;
   705  004E  0022               	movlb	2	; select bank2
   706  004F  168C               	bsf	12,5	;volatile
   707                           
   708                           ;main.c: 181: LATAbits.LATA0 = 1;
   709  0050  140C               	bsf	12,0	;volatile
   710                           
   711                           ;main.c: 182: _delay_ms(100);
   712  0051  3064               	movlw	100
   713  0052  00F3               	movwf	__delay_ms@ms
   714  0053  3000               	movlw	0
   715  0054  00F4               	movwf	__delay_ms@ms+1
   716  0055  23CF               	fcall	__delay_ms
   717  0056  0064               	clrwdt	;# 
   718                           
   719                           ;main.c: 185: steadyStateValue = calibrate();
   720  0057  21F2               	fcall	_calibrate
   721  0058  0020               	movlb	0	; select bank0
   722  0059  0829               	movf	?_calibrate+1,w
   723  005A  0021               	movlb	1	; select bank1
   724  005B  01A5               	clrf	(main@steadyStateValue+1)^(0+128)
   725  005C  07A5               	addwf	(main@steadyStateValue+1)^(0+128),f
   726  005D  0020               	movlb	0	; select bank0
   727  005E  0828               	movf	?_calibrate,w
   728  005F  0021               	movlb	1	; select bank1
   729  0060  01A4               	clrf	main@steadyStateValue^(0+128)
   730  0061  07A4               	addwf	main@steadyStateValue^(0+128),f
   731                           
   732                           ;main.c: 186: for(i=0; i<16; i++){
   733  0062  01A6               	clrf	main@i^(0+128)
   734  0063  01A7               	clrf	(main@i+1)^(0+128)
   735  0064  0827               	movf	(main@i+1)^(0+128),w
   736  0065  3A80               	xorlw	128
   737  0066  00FF               	movwf	127
   738  0067  3080               	movlw	128
   739  0068  027F               	subwf	127,w
   740  0069  1D03               	skipz
   741  006A  286D               	goto	u1095
   742  006B  3010               	movlw	16
   743  006C  0226               	subwf	main@i^(0+128),w
   744  006D                     u1095:	
   745  006D  1803               	btfsc	3,0
   746  006E  2887               	goto	l1413
   747  006F                     l1407:	
   748                           
   749                           ;main.c: 187: averageTable[i]=steadyStateValue;
   750  006F  0021               	movlb	1	; select bank1
   751  0070  3526               	lslf	main@i^(0+128),w
   752  0071  3E3D               	addlw	main@averageTable& (0+255)
   753  0072  0086               	movwf	6
   754  0073  0187               	clrf	7
   755  0074  0824               	movf	main@steadyStateValue^(0+128),w
   756  0075  3FC0               	movwi [0]fsr1
   757  0076  0825               	movf	(main@steadyStateValue+1)^(0+128),w
   758  0077  3FC1               	movwi [1]fsr1
   759  0078  3001               	movlw	1
   760  0079  07A6               	addwf	main@i^(0+128),f
   761  007A  3000               	movlw	0
   762  007B  3DA7               	addwfc	(main@i+1)^(0+128),f
   763  007C  0827               	movf	(main@i+1)^(0+128),w
   764  007D  3A80               	xorlw	128
   765  007E  00FF               	movwf	127
   766  007F  3080               	movlw	128
   767  0080  027F               	subwf	127,w
   768  0081  1D03               	skipz
   769  0082  2885               	goto	u1105
   770  0083  3010               	movlw	16
   771  0084  0226               	subwf	main@i^(0+128),w
   772  0085                     u1105:	
   773  0085  1C03               	skipc
   774  0086  286F               	goto	l1407
   775  0087                     l1413:	
   776                           
   777                           ;main.c: 188: }
   778                           ;main.c: 189: lowerBallSensorThresholdValue = steadyStateValue + steadyToLower;
   779  0087  0020               	movlb	0	; select bank0
   780  0088  0869               	movf	main@steadyToLower,w
   781  0089  0021               	movlb	1	; select bank1
   782  008A  0724               	addwf	main@steadyStateValue^(0+128),w
   783  008B  0020               	movlb	0	; select bank0
   784  008C  00ED               	movwf	main@lowerBallSensorThresholdValue
   785  008D  086A               	movf	main@steadyToLower+1,w
   786  008E  0021               	movlb	1	; select bank1
   787  008F  3D25               	addwfc	(main@steadyStateValue+1)^(0+128),w
   788  0090  0020               	movlb	0	; select bank0
   789  0091  00EE               	movwf	main@lowerBallSensorThresholdValue+1
   790                           
   791                           ;main.c: 190: upperBallSensorThresholdValue = lowerBallSensorThresholdValue + lowerToUpp
      +                          er;
   792  0092  086B               	movf	main@lowerToUpper,w
   793  0093  076D               	addwf	main@lowerBallSensorThresholdValue,w
   794  0094  00E1               	movwf	main@upperBallSensorThresholdValue
   795  0095  086C               	movf	main@lowerToUpper+1,w
   796  0096  3D6E               	addwfc	main@lowerBallSensorThresholdValue+1,w
   797  0097  00E2               	movwf	main@upperBallSensorThresholdValue+1
   798                           
   799                           ;main.c: 191: initInterrupt();
   800  0098  23F6               	fcall	_initInterrupt
   801                           
   802                           ;main.c: 197: switch (state)
   803  0099  29E0               	goto	l91
   804  009A                     l1419:	
   805                           ;main.c: 198: {
   806                           ;main.c: 199: case offState:
   807                           
   808                           
   809                           ;main.c: 202: if(++sample>=5000){
   810  009A  3001               	movlw	1
   811  009B  07DD               	addwf	main@sample,f
   812  009C  3000               	movlw	0
   813  009D  3DDE               	addwfc	main@sample+1,f
   814  009E  085E               	movf	main@sample+1,w
   815  009F  3A80               	xorlw	128
   816  00A0  00FF               	movwf	127
   817  00A1  3093               	movlw	147
   818  00A2  027F               	subwf	127,w
   819  00A3  1D03               	skipz
   820  00A4  28A7               	goto	u1115
   821  00A5  3088               	movlw	136
   822  00A6  025D               	subwf	main@sample,w
   823  00A7                     u1115:	
   824  00A7  1C03               	skipc
   825  00A8  2957               	goto	l1461
   826                           
   827                           ;main.c: 203: LATAbits.LATA5 = 0;
   828  00A9  0022               	movlb	2	; select bank2
   829  00AA  128C               	bcf	12,5	;volatile
   830                           
   831                           ;main.c: 204: sample=0;
   832  00AB  0020               	movlb	0	; select bank0
   833  00AC  01DD               	clrf	main@sample
   834  00AD  01DE               	clrf	main@sample+1
   835                           
   836                           ;main.c: 206: if(toggleCount>10){
   837  00AE  0864               	movf	main@toggleCount+1,w
   838  00AF  3A80               	xorlw	128
   839  00B0  00FF               	movwf	127
   840  00B1  3080               	movlw	128
   841  00B2  027F               	subwf	127,w
   842  00B3  1D03               	skipz
   843  00B4  28B7               	goto	u1125
   844  00B5  300B               	movlw	11
   845  00B6  0263               	subwf	main@toggleCount,w
   846  00B7                     u1125:	
   847  00B7  1C03               	skipc
   848  00B8  28C6               	goto	l1429
   849                           
   850                           ;main.c: 208: steadyToLower = steadyToLower - 5;
   851  00B9  0020               	movlb	0	; select bank0
   852  00BA  0869               	movf	main@steadyToLower,w
   853  00BB  3EFB               	addlw	251
   854  00BC  00E9               	movwf	main@steadyToLower
   855  00BD  30FF               	movlw	255
   856  00BE  3D6A               	addwfc	main@steadyToLower+1,w
   857  00BF  00EA               	movwf	main@steadyToLower+1
   858                           
   859                           ;main.c: 209: lowerToUpper = lowerToUpper + 5;
   860  00C0  086B               	movf	main@lowerToUpper,w
   861  00C1  3E05               	addlw	5
   862  00C2  00EB               	movwf	main@lowerToUpper
   863  00C3  3000               	movlw	0
   864  00C4  3D6C               	addwfc	main@lowerToUpper+1,w
   865  00C5  00EC               	movwf	main@lowerToUpper+1
   866  00C6                     l1429:	
   867                           
   868                           ;main.c: 210: }
   869                           ;main.c: 211: toggleCount=0;
   870  00C6  0020               	movlb	0	; select bank0
   871  00C7  01E3               	clrf	main@toggleCount
   872  00C8  01E4               	clrf	main@toggleCount+1
   873                           
   874                           ;main.c: 213: averageTable[averagePtr++]=value;
   875  00C9  3566               	lslf	main@averagePtr,w
   876  00CA  3E3D               	addlw	main@averageTable& (0+255)
   877  00CB  0086               	movwf	6
   878  00CC  0187               	clrf	7
   879  00CD  0867               	movf	main@value,w
   880  00CE  3FC0               	movwi [0]fsr1
   881  00CF  0868               	movf	main@value+1,w
   882  00D0  3FC1               	movwi [1]fsr1
   883  00D1  3001               	movlw	1
   884  00D2  00B7               	movwf	??_main
   885  00D3  0837               	movf	??_main,w
   886  00D4  07E6               	addwf	main@averagePtr,f
   887                           
   888                           ;main.c: 214: if(averagePtr>=16){
   889  00D5  3010               	movlw	16
   890  00D6  0266               	subwf	main@averagePtr,w
   891  00D7  1803               	btfsc	3,0
   892                           
   893                           ;main.c: 215: averagePtr=0;
   894  00D8  01E6               	clrf	main@averagePtr
   895                           
   896                           ;main.c: 216: }
   897                           ;main.c: 217: cumulativeVal=0;
   898  00D9  3000               	movlw	0
   899  00DA  0021               	movlb	1	; select bank1
   900  00DB  00A3               	movwf	(_cumulativeVal+3)^(0+128)
   901  00DC  3000               	movlw	0
   902  00DD  00A2               	movwf	(_cumulativeVal+2)^(0+128)
   903  00DE  3000               	movlw	0
   904  00DF  00A1               	movwf	(_cumulativeVal+1)^(0+128)
   905  00E0  3000               	movlw	0
   906  00E1  00A0               	movwf	_cumulativeVal^(0+128)
   907                           
   908                           ;main.c: 220: for(i=0; i<16; i++){
   909  00E2  01A6               	clrf	main@i^(0+128)
   910  00E3  01A7               	clrf	(main@i+1)^(0+128)
   911  00E4  0827               	movf	(main@i+1)^(0+128),w
   912  00E5  3A80               	xorlw	128
   913  00E6  00FF               	movwf	127
   914  00E7  3080               	movlw	128
   915  00E8  027F               	subwf	127,w
   916  00E9  1D03               	skipz
   917  00EA  28ED               	goto	u1145
   918  00EB  3010               	movlw	16
   919  00EC  0226               	subwf	main@i^(0+128),w
   920  00ED                     u1145:	
   921  00ED  1803               	btfsc	3,0
   922  00EE  2920               	goto	l1453
   923  00EF                     l1447:	
   924                           
   925                           ;main.c: 221: cumulativeVal+=averageTable[i];
   926  00EF  0021               	movlb	1	; select bank1
   927  00F0  3526               	lslf	main@i^(0+128),w
   928  00F1  3E3D               	addlw	main@averageTable& (0+255)
   929  00F2  0086               	movwf	6
   930  00F3  0187               	clrf	7
   931  00F4  3F40               	moviw [0]fsr1
   932  00F5  0020               	movlb	0	; select bank0
   933  00F6  00B7               	movwf	??_main
   934  00F7  3F41               	moviw [1]fsr1
   935  00F8  00B8               	movwf	??_main+1
   936  00F9  0837               	movf	??_main,w
   937  00FA  00B9               	movwf	??_main+2
   938  00FB  0838               	movf	??_main+1,w
   939  00FC  00BA               	movwf	??_main+3
   940  00FD  3000               	movlw	0
   941  00FE  1BBA               	btfsc	??_main+3,7
   942  00FF  30FF               	movlw	255
   943  0100  00BB               	movwf	??_main+4
   944  0101  00BC               	movwf	??_main+5
   945  0102  0839               	movf	??_main+2,w
   946  0103  0021               	movlb	1	; select bank1
   947  0104  07A0               	addwf	_cumulativeVal^(0+128),f
   948  0105  0020               	movlb	0	; select bank0
   949  0106  083A               	movf	??_main+3,w
   950  0107  0021               	movlb	1	; select bank1
   951  0108  3DA1               	addwfc	(_cumulativeVal+1)^(0+128),f
   952  0109  0020               	movlb	0	; select bank0
   953  010A  083B               	movf	??_main+4,w
   954  010B  0021               	movlb	1	; select bank1
   955  010C  3DA2               	addwfc	(_cumulativeVal+2)^(0+128),f
   956  010D  0020               	movlb	0	; select bank0
   957  010E  083C               	movf	??_main+5,w
   958  010F  0021               	movlb	1	; select bank1
   959  0110  3DA3               	addwfc	(_cumulativeVal+3)^(0+128),f
   960  0111  3001               	movlw	1
   961  0112  07A6               	addwf	main@i^(0+128),f
   962  0113  3000               	movlw	0
   963  0114  3DA7               	addwfc	(main@i+1)^(0+128),f
   964  0115  0827               	movf	(main@i+1)^(0+128),w
   965  0116  3A80               	xorlw	128
   966  0117  00FF               	movwf	127
   967  0118  3080               	movlw	128
   968  0119  027F               	subwf	127,w
   969  011A  1D03               	skipz
   970  011B  291E               	goto	u1155
   971  011C  3010               	movlw	16
   972  011D  0226               	subwf	main@i^(0+128),w
   973  011E                     u1155:	
   974  011E  1C03               	skipc
   975  011F  28EF               	goto	l1447
   976  0120                     l1453:	
   977                           
   978                           ;main.c: 222: }
   979                           ;main.c: 223: steadyStateValue=cumulativeVal/16;
   980  0120  3000               	movlw	0
   981  0121  0020               	movlb	0	; select bank0
   982  0122  00A3               	movwf	___aldiv@divisor+3
   983  0123  3000               	movlw	0
   984  0124  00A2               	movwf	___aldiv@divisor+2
   985  0125  3000               	movlw	0
   986  0126  00A1               	movwf	___aldiv@divisor+1
   987  0127  3010               	movlw	16
   988  0128  00A0               	movwf	___aldiv@divisor
   989  0129  0021               	movlb	1	; select bank1
   990  012A  0823               	movf	(_cumulativeVal+3)^(0+128),w
   991  012B  0020               	movlb	0	; select bank0
   992  012C  00A7               	movwf	___aldiv@dividend+3
   993  012D  0021               	movlb	1	; select bank1
   994  012E  0822               	movf	(_cumulativeVal+2)^(0+128),w
   995  012F  0020               	movlb	0	; select bank0
   996  0130  00A6               	movwf	___aldiv@dividend+2
   997  0131  0021               	movlb	1	; select bank1
   998  0132  0821               	movf	(_cumulativeVal+1)^(0+128),w
   999  0133  0020               	movlb	0	; select bank0
  1000  0134  00A5               	movwf	___aldiv@dividend+1
  1001  0135  0021               	movlb	1	; select bank1
  1002  0136  0820               	movf	_cumulativeVal^(0+128),w
  1003  0137  0020               	movlb	0	; select bank0
  1004  0138  00A4               	movwf	___aldiv@dividend
  1005  0139  230B               	fcall	___aldiv
  1006  013A  0020               	movlb	0	; select bank0
  1007  013B  0821               	movf	?___aldiv+1,w
  1008  013C  0021               	movlb	1	; select bank1
  1009  013D  01A5               	clrf	(main@steadyStateValue+1)^(0+128)
  1010  013E  07A5               	addwf	(main@steadyStateValue+1)^(0+128),f
  1011  013F  0020               	movlb	0	; select bank0
  1012  0140  0820               	movf	?___aldiv,w
  1013  0141  0021               	movlb	1	; select bank1
  1014  0142  01A4               	clrf	main@steadyStateValue^(0+128)
  1015  0143  07A4               	addwf	main@steadyStateValue^(0+128),f
  1016                           
  1017                           ;main.c: 224: lowerBallSensorThresholdValue = steadyStateValue + steadyToLower;
  1018  0144  0020               	movlb	0	; select bank0
  1019  0145  0869               	movf	main@steadyToLower,w
  1020  0146  0021               	movlb	1	; select bank1
  1021  0147  0724               	addwf	main@steadyStateValue^(0+128),w
  1022  0148  0020               	movlb	0	; select bank0
  1023  0149  00ED               	movwf	main@lowerBallSensorThresholdValue
  1024  014A  086A               	movf	main@steadyToLower+1,w
  1025  014B  0021               	movlb	1	; select bank1
  1026  014C  3D25               	addwfc	(main@steadyStateValue+1)^(0+128),w
  1027  014D  0020               	movlb	0	; select bank0
  1028  014E  00EE               	movwf	main@lowerBallSensorThresholdValue+1
  1029                           
  1030                           ;main.c: 225: upperBallSensorThresholdValue = lowerBallSensorThresholdValue + lowerToUpp
      +                          er;
  1031  014F  086B               	movf	main@lowerToUpper,w
  1032  0150  076D               	addwf	main@lowerBallSensorThresholdValue,w
  1033  0151  00E1               	movwf	main@upperBallSensorThresholdValue
  1034  0152  086C               	movf	main@lowerToUpper+1,w
  1035  0153  3D6E               	addwfc	main@lowerBallSensorThresholdValue+1,w
  1036  0154  00E2               	movwf	main@upperBallSensorThresholdValue+1
  1037                           
  1038                           ;main.c: 226: LATAbits.LATA5 = 1;
  1039  0155  0022               	movlb	2	; select bank2
  1040  0156  168C               	bsf	12,5	;volatile
  1041  0157                     l1461:	
  1042                           
  1043                           ;main.c: 227: }
  1044                           ;main.c: 229: if ( value < lowerBallSensorThresholdValue )
  1045  0157  0020               	movlb	0	; select bank0
  1046  0158  0868               	movf	main@value+1,w
  1047  0159  3A80               	xorlw	128
  1048  015A  00B7               	movwf	??_main
  1049  015B  086E               	movf	main@lowerBallSensorThresholdValue+1,w
  1050  015C  3A80               	xorlw	128
  1051  015D  0237               	subwf	??_main,w
  1052  015E  1D03               	skipz
  1053  015F  2962               	goto	u1165
  1054  0160  086D               	movf	main@lowerBallSensorThresholdValue,w
  1055  0161  0267               	subwf	main@value,w
  1056  0162                     u1165:	
  1057  0162  1803               	skipnc
  1058  0163  29E0               	goto	l91
  1059                           
  1060                           ;main.c: 230: {
  1061                           ;main.c: 231: LATAbits.LATA0 = 0;
  1062  0164  0022               	movlb	2	; select bank2
  1063  0165  100C               	bcf	12,0	;volatile
  1064                           
  1065                           ;main.c: 233: timeout=0;
  1066  0166  0020               	movlb	0	; select bank0
  1067  0167  01DF               	clrf	main@timeout
  1068  0168  01E0               	clrf	main@timeout+1
  1069                           
  1070                           ;main.c: 234: toggleCount++;
  1071  0169  3001               	movlw	1
  1072  016A  07E3               	addwf	main@toggleCount,f
  1073  016B  3000               	movlw	0
  1074  016C  3DE4               	addwfc	main@toggleCount+1,f
  1075                           
  1076                           ;main.c: 235: LATAbits.LATA5 = 0;
  1077  016D  0022               	movlb	2	; select bank2
  1078  016E  128C               	bcf	12,5	;volatile
  1079                           
  1080                           ;main.c: 236: _delay_ms(10);
  1081  016F  300A               	movlw	10
  1082  0170  00F3               	movwf	__delay_ms@ms
  1083  0171  3000               	movlw	0
  1084  0172  00F4               	movwf	__delay_ms@ms+1
  1085  0173  23CF               	fcall	__delay_ms
  1086                           
  1087                           ;main.c: 237: state = onState;
  1088  0174  0020               	movlb	0	; select bank0
  1089  0175  01E5               	clrf	main@state
  1090  0176  0AE5               	incf	main@state,f
  1091                           
  1092                           ;main.c: 238: }
  1093                           ;main.c: 239: break;
  1094  0177  29E0               	goto	l91
  1095  0178                     l1475:	
  1096                           ;main.c: 240: case onState:
  1097                           
  1098                           
  1099                           ;main.c: 241: if ( value > upperBallSensorThresholdValue)
  1100  0178  0862               	movf	main@upperBallSensorThresholdValue+1,w
  1101  0179  3A80               	xorlw	128
  1102  017A  00B7               	movwf	??_main
  1103  017B  0868               	movf	main@value+1,w
  1104  017C  3A80               	xorlw	128
  1105  017D  0237               	subwf	??_main,w
  1106  017E  1D03               	skipz
  1107  017F  2982               	goto	u1175
  1108  0180  0867               	movf	main@value,w
  1109  0181  0261               	subwf	main@upperBallSensorThresholdValue,w
  1110  0182                     u1175:	
  1111  0182  1803               	skipnc
  1112  0183  2989               	goto	l1481
  1113                           
  1114                           ;main.c: 242: {
  1115                           ;main.c: 243: LATAbits.LATA5 = 1;
  1116  0184  0022               	movlb	2	; select bank2
  1117  0185  168C               	bsf	12,5	;volatile
  1118                           
  1119                           ;main.c: 244: LATAbits.LATA0 = 1;
  1120  0186  140C               	bsf	12,0	;volatile
  1121                           
  1122                           ;main.c: 245: state = offState;
  1123  0187  0020               	movlb	0	; select bank0
  1124  0188  01E5               	clrf	main@state
  1125  0189                     l1481:	
  1126                           
  1127                           ;main.c: 246: }
  1128                           ;main.c: 247: _delay_ms(10);
  1129  0189  300A               	movlw	10
  1130  018A  00F3               	movwf	__delay_ms@ms
  1131  018B  3000               	movlw	0
  1132  018C  00F4               	movwf	__delay_ms@ms+1
  1133  018D  23CF               	fcall	__delay_ms
  1134                           
  1135                           ;main.c: 252: if(++timeout>=6000){
  1136  018E  3001               	movlw	1
  1137  018F  0020               	movlb	0	; select bank0
  1138  0190  07DF               	addwf	main@timeout,f
  1139  0191  3000               	movlw	0
  1140  0192  3DE0               	addwfc	main@timeout+1,f
  1141  0193  0860               	movf	main@timeout+1,w
  1142  0194  3A80               	xorlw	128
  1143  0195  00FF               	movwf	127
  1144  0196  3097               	movlw	151
  1145  0197  027F               	subwf	127,w
  1146  0198  1D03               	skipz
  1147  0199  299C               	goto	u1185
  1148  019A  3070               	movlw	112
  1149  019B  025F               	subwf	main@timeout,w
  1150  019C                     u1185:	
  1151  019C  1C03               	skipc
  1152  019D  29E0               	goto	l91
  1153                           
  1154                           ;main.c: 253: timeout=0;
  1155  019E  0020               	movlb	0	; select bank0
  1156  019F  01DF               	clrf	main@timeout
  1157  01A0  01E0               	clrf	main@timeout+1
  1158                           
  1159                           ;main.c: 254: steadyStateValue = value;
  1160  01A1  0868               	movf	main@value+1,w
  1161  01A2  0021               	movlb	1	; select bank1
  1162  01A3  01A5               	clrf	(main@steadyStateValue+1)^(0+128)
  1163  01A4  07A5               	addwf	(main@steadyStateValue+1)^(0+128),f
  1164  01A5  0020               	movlb	0	; select bank0
  1165  01A6  0867               	movf	main@value,w
  1166  01A7  0021               	movlb	1	; select bank1
  1167  01A8  01A4               	clrf	main@steadyStateValue^(0+128)
  1168  01A9  07A4               	addwf	main@steadyStateValue^(0+128),f
  1169                           
  1170                           ;main.c: 255: for(i=0; i<16; i++){
  1171  01AA  01A6               	clrf	main@i^(0+128)
  1172  01AB  01A7               	clrf	(main@i+1)^(0+128)
  1173  01AC  0827               	movf	(main@i+1)^(0+128),w
  1174  01AD  3A80               	xorlw	128
  1175  01AE  00FF               	movwf	127
  1176  01AF  3080               	movlw	128
  1177  01B0  027F               	subwf	127,w
  1178  01B1  1D03               	skipz
  1179  01B2  29B5               	goto	u1195
  1180  01B3  3010               	movlw	16
  1181  01B4  0226               	subwf	main@i^(0+128),w
  1182  01B5                     u1195:	
  1183  01B5  1803               	btfsc	3,0
  1184  01B6  29CF               	goto	l1501
  1185  01B7                     l1495:	
  1186                           
  1187                           ;main.c: 256: averageTable[i]=steadyStateValue;
  1188  01B7  0021               	movlb	1	; select bank1
  1189  01B8  3526               	lslf	main@i^(0+128),w
  1190  01B9  3E3D               	addlw	main@averageTable& (0+255)
  1191  01BA  0086               	movwf	6
  1192  01BB  0187               	clrf	7
  1193  01BC  0824               	movf	main@steadyStateValue^(0+128),w
  1194  01BD  3FC0               	movwi [0]fsr1
  1195  01BE  0825               	movf	(main@steadyStateValue+1)^(0+128),w
  1196  01BF  3FC1               	movwi [1]fsr1
  1197  01C0  3001               	movlw	1
  1198  01C1  07A6               	addwf	main@i^(0+128),f
  1199  01C2  3000               	movlw	0
  1200  01C3  3DA7               	addwfc	(main@i+1)^(0+128),f
  1201  01C4  0827               	movf	(main@i+1)^(0+128),w
  1202  01C5  3A80               	xorlw	128
  1203  01C6  00FF               	movwf	127
  1204  01C7  3080               	movlw	128
  1205  01C8  027F               	subwf	127,w
  1206  01C9  1D03               	skipz
  1207  01CA  29CD               	goto	u1205
  1208  01CB  3010               	movlw	16
  1209  01CC  0226               	subwf	main@i^(0+128),w
  1210  01CD                     u1205:	
  1211  01CD  1C03               	skipc
  1212  01CE  29B7               	goto	l1495
  1213  01CF                     l1501:	
  1214                           
  1215                           ;main.c: 257: }
  1216                           ;main.c: 258: lowerBallSensorThresholdValue = steadyStateValue + steadyToLower;
  1217  01CF  0020               	movlb	0	; select bank0
  1218  01D0  0869               	movf	main@steadyToLower,w
  1219  01D1  0021               	movlb	1	; select bank1
  1220  01D2  0724               	addwf	main@steadyStateValue^(0+128),w
  1221  01D3  0020               	movlb	0	; select bank0
  1222  01D4  00ED               	movwf	main@lowerBallSensorThresholdValue
  1223  01D5  086A               	movf	main@steadyToLower+1,w
  1224  01D6  0021               	movlb	1	; select bank1
  1225  01D7  3D25               	addwfc	(main@steadyStateValue+1)^(0+128),w
  1226  01D8  0020               	movlb	0	; select bank0
  1227  01D9  00EE               	movwf	main@lowerBallSensorThresholdValue+1
  1228                           
  1229                           ;main.c: 259: upperBallSensorThresholdValue = lowerBallSensorThresholdValue + lowerToUpp
      +                          er;
  1230  01DA  086B               	movf	main@lowerToUpper,w
  1231  01DB  076D               	addwf	main@lowerBallSensorThresholdValue,w
  1232  01DC  00E1               	movwf	main@upperBallSensorThresholdValue
  1233  01DD  086C               	movf	main@lowerToUpper+1,w
  1234  01DE  3D6E               	addwfc	main@lowerBallSensorThresholdValue+1,w
  1235  01DF  00E2               	movwf	main@upperBallSensorThresholdValue+1
  1236  01E0                     l91:	
  1237                           ;main.c: 193: while (1)
  1238                           
  1239                           ;main.c: 264: }
  1240                           
  1241                           ;main.c: 260: }
  1242                           ;main.c: 262: break;
  1243                           
  1244  01E0  0064               	clrwdt	;# 
  1245                           
  1246                           ;main.c: 196: value = getValue();
  1247  01E1  238D               	fcall	_getValue
  1248  01E2  0874               	movf	?_getValue+1,w
  1249  01E3  0020               	movlb	0	; select bank0
  1250  01E4  01E8               	clrf	main@value+1
  1251  01E5  07E8               	addwf	main@value+1,f
  1252  01E6  0873               	movf	?_getValue,w
  1253  01E7  01E7               	clrf	main@value
  1254  01E8  07E7               	addwf	main@value,f
  1255  01E9  0865               	movf	main@state,w
  1256                           
  1257                           ; Switch size 1, requested type "space"
  1258                           ; Number of cases is 2, Range of values is 0 to 1
  1259                           ; switch strategies available:
  1260                           ; Name         Instructions Cycles
  1261                           ; simple_byte            7     4 (average)
  1262                           ; direct_byte           10     6 (fixed)
  1263                           ; jumptable            260     6 (fixed)
  1264                           ;	Chosen strategy is simple_byte
  1265  01EA  3A00               	xorlw	0	; case 0
  1266  01EB  1903               	skipnz
  1267  01EC  289A               	goto	l1419
  1268  01ED  3A01               	xorlw	1	; case 1
  1269  01EE  1903               	skipnz
  1270  01EF  2978               	goto	l1475
  1271  01F0  29E0               	goto	l91
  1272  01F1  29E0               	goto	l91
  1273  01F2                     __end_of_main:	
  1274                           
  1275                           	psect	text1
  1276  03F6                     __ptext1:	
  1277 ;; *************** function _initInterrupt *****************
  1278 ;; Defined at:
  1279 ;;		line 7 in file "interrupt.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;		None
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;		None
  1284 ;; Return value:  Size  Location     Type
  1285 ;;		None               void
  1286 ;; Registers used:
  1287 ;;		wreg, status,2, status,0
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMMON   BANK0   BANK1
  1293 ;;      Params:         0       0       0
  1294 ;;      Locals:         0       0       0
  1295 ;;      Temps:          0       0       0
  1296 ;;      Totals:         0       0       0
  1297 ;;Total ram usage:        0 bytes
  1298 ;; Hardware stack levels used:    1
  1299 ;; Hardware stack levels required when called:    1
  1300 ;; This function calls:
  1301 ;;		Nothing
  1302 ;; This function is called by:
  1303 ;;		_main
  1304 ;; This function uses a non-reentrant model
  1305 ;;
  1306                           
  1307                           
  1308                           ;psect for function _initInterrupt
  1309  03F6                     _initInterrupt:	
  1310                           
  1311                           ;interrupt.c: 9: IOCAPbits.IOCAP2 = 1;
  1312                           
  1313                           ;incstack = 0
  1314                           ; Regs used in _initInterrupt: [wreg+status,2+status,0]
  1315  03F6  0027               	movlb	7	; select bank7
  1316  03F7  1511               	bsf	17,2	;volatile
  1317                           
  1318                           ;interrupt.c: 10: IOCANbits.IOCAN2 = 0;
  1319  03F8  1112               	bcf	18,2	;volatile
  1320                           
  1321                           ;interrupt.c: 11: IOCAFbits.IOCAF = 0;
  1322  03F9  30C0               	movlw	-64
  1323  03FA  0593               	andwf	19,f	;volatile
  1324                           
  1325                           ;interrupt.c: 12: INTCONbits.IOCIF = 0;
  1326  03FB  100B               	bcf	11,0	;volatile
  1327                           
  1328                           ;interrupt.c: 13: INTCONbits.IOCIE = 1;
  1329  03FC  158B               	bsf	11,3	;volatile
  1330                           
  1331                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  1332  03FD  178B               	bsf	11,7	;volatile
  1333                           
  1334                           ;interrupt.c: 16: INTCONbits.PEIE = 1;
  1335  03FE  170B               	bsf	11,6	;volatile
  1336  03FF  0008               	return
  1337  0400                     __end_of_initInterrupt:	
  1338                           
  1339                           	psect	text2
  1340  03B4                     __ptext2:	
  1341 ;; *************** function _init *****************
  1342 ;; Defined at:
  1343 ;;		line 46 in file "main.c"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;		None
  1346 ;; Auto vars:     Size  Location     Type
  1347 ;;		None
  1348 ;; Return value:  Size  Location     Type
  1349 ;;		None               void
  1350 ;; Registers used:
  1351 ;;		wreg, status,2, status,0
  1352 ;; Tracked objects:
  1353 ;;		On entry : 0/0
  1354 ;;		On exit  : 0/0
  1355 ;;		Unchanged: 0/0
  1356 ;; Data sizes:     COMMON   BANK0   BANK1
  1357 ;;      Params:         0       0       0
  1358 ;;      Locals:         0       0       0
  1359 ;;      Temps:          0       0       0
  1360 ;;      Totals:         0       0       0
  1361 ;;Total ram usage:        0 bytes
  1362 ;; Hardware stack levels used:    1
  1363 ;; Hardware stack levels required when called:    1
  1364 ;; This function calls:
  1365 ;;		Nothing
  1366 ;; This function is called by:
  1367 ;;		_main
  1368 ;; This function uses a non-reentrant model
  1369 ;;
  1370                           
  1371                           
  1372                           ;psect for function _init
  1373  03B4                     _init:	
  1374                           
  1375                           ;main.c: 48: WDTCONbits.WDTPS = 0b01001;
  1376                           
  1377                           ;incstack = 0
  1378                           ; Regs used in _init: [wreg+status,2+status,0]
  1379  03B4  0021               	movlb	1	; select bank1
  1380  03B5  0817               	movf	23,w	;volatile
  1381  03B6  39C1               	andlw	-63
  1382  03B7  3812               	iorlw	18
  1383  03B8  0097               	movwf	23	;volatile
  1384                           
  1385                           ;main.c: 49: OSCCON=0x70;
  1386  03B9  3070               	movlw	112
  1387  03BA  0099               	movwf	25	;volatile
  1388                           
  1389                           ;main.c: 50: TRISAbits.TRISA5 = 0;
  1390  03BB  128C               	bcf	12,5	;volatile
  1391                           
  1392                           ;main.c: 51: LATAbits.LATA5 = 1;
  1393  03BC  0022               	movlb	2	; select bank2
  1394  03BD  168C               	bsf	12,5	;volatile
  1395                           
  1396                           ;main.c: 52: ANSELAbits.ANSA0 = 0;
  1397  03BE  0023               	movlb	3	; select bank3
  1398  03BF  100C               	bcf	12,0	;volatile
  1399                           
  1400                           ;main.c: 53: TRISAbits.TRISA0 = 0;
  1401  03C0  0021               	movlb	1	; select bank1
  1402  03C1  100C               	bcf	12,0	;volatile
  1403                           
  1404                           ;main.c: 54: LATAbits.LATA0 = 1;
  1405  03C2  0022               	movlb	2	; select bank2
  1406  03C3  140C               	bsf	12,0	;volatile
  1407                           
  1408                           ;main.c: 57: ANSELAbits.ANSA2 = 0;
  1409  03C4  0023               	movlb	3	; select bank3
  1410  03C5  110C               	bcf	12,2	;volatile
  1411                           
  1412                           ;main.c: 58: TRISAbits.TRISA2 = 1;
  1413  03C6  0021               	movlb	1	; select bank1
  1414  03C7  150C               	bsf	12,2	;volatile
  1415                           
  1416                           ;main.c: 60: ANSELAbits.ANSA1 = 0;
  1417  03C8  0023               	movlb	3	; select bank3
  1418  03C9  108C               	bcf	12,1	;volatile
  1419                           
  1420                           ;main.c: 61: TRISAbits.TRISA1 = 0;
  1421  03CA  0021               	movlb	1	; select bank1
  1422  03CB  108C               	bcf	12,1	;volatile
  1423                           
  1424                           ;main.c: 62: LATAbits.LATA1 = 0;
  1425  03CC  0022               	movlb	2	; select bank2
  1426  03CD  108C               	bcf	12,1	;volatile
  1427  03CE  0008               	return
  1428  03CF                     __end_of_init:	
  1429                           
  1430                           	psect	text3
  1431  01F2                     __ptext3:	
  1432 ;; *************** function _calibrate *****************
  1433 ;; Defined at:
  1434 ;;		line 88 in file "main.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;		None
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;  averageVal      4   16[BANK0 ] long 
  1439 ;;  inputVal        2   21[BANK0 ] int 
  1440 ;;  lastVal         2   14[BANK0 ] int 
  1441 ;;  i               1   20[BANK0 ] unsigned char 
  1442 ;; Return value:  Size  Location     Type
  1443 ;;                  2    8[BANK0 ] int 
  1444 ;; Registers used:
  1445 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1446 ;; Tracked objects:
  1447 ;;		On entry : 0/0
  1448 ;;		On exit  : 0/0
  1449 ;;		Unchanged: 0/0
  1450 ;; Data sizes:     COMMON   BANK0   BANK1
  1451 ;;      Params:         0       2       0
  1452 ;;      Locals:         0       9       0
  1453 ;;      Temps:          0       4       0
  1454 ;;      Totals:         0      15       0
  1455 ;;Total ram usage:       15 bytes
  1456 ;; Hardware stack levels used:    1
  1457 ;; Hardware stack levels required when called:    2
  1458 ;; This function calls:
  1459 ;;		___aldiv
  1460 ;;		__delay_ms
  1461 ;;		_abs
  1462 ;;		_getValue
  1463 ;; This function is called by:
  1464 ;;		_main
  1465 ;; This function uses a non-reentrant model
  1466 ;;
  1467                           
  1468                           
  1469                           ;psect for function _calibrate
  1470  01F2                     _calibrate:	
  1471                           
  1472                           ;main.c: 93: char i;
  1473                           ;main.c: 94: long averageVal;
  1474                           ;main.c: 95: int inputVal;
  1475                           ;main.c: 96: int lastVal = 0;
  1476                           
  1477                           ;incstack = 0
  1478                           ; Regs used in _calibrate: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1479  01F2  0020               	movlb	0	; select bank0
  1480  01F3  01AE               	clrf	calibrate@lastVal
  1481  01F4  01AF               	clrf	calibrate@lastVal+1
  1482                           
  1483                           ;main.c: 117: break;
  1484  01F5  29FB               	goto	l74
  1485  01F6                     l1343:	
  1486                           
  1487                           ;main.c: 118: }
  1488                           ;main.c: 119: }
  1489                           ;main.c: 120: }
  1490                           ;main.c: 121: _delay_ms(20);
  1491  01F6  3014               	movlw	20
  1492  01F7  00F3               	movwf	__delay_ms@ms
  1493  01F8  3000               	movlw	0
  1494  01F9  00F4               	movwf	__delay_ms@ms+1
  1495  01FA  23CF               	fcall	__delay_ms
  1496  01FB                     l74:	
  1497                           ;main.c: 101: while (1)
  1498                           
  1499  01FB  0064               	clrwdt	;# 
  1500                           
  1501                           ;main.c: 104: inputVal = getValue();
  1502  01FC  238D               	fcall	_getValue
  1503  01FD  0874               	movf	?_getValue+1,w
  1504  01FE  0020               	movlb	0	; select bank0
  1505  01FF  01B6               	clrf	calibrate@inputVal+1
  1506  0200  07B6               	addwf	calibrate@inputVal+1,f
  1507  0201  0873               	movf	?_getValue,w
  1508  0202  01B5               	clrf	calibrate@inputVal
  1509  0203  07B5               	addwf	calibrate@inputVal,f
  1510                           
  1511                           ;main.c: 105: if ( (inputVal < 1200)
  1512                           ;main.c: 106: && (inputVal > 300) )
  1513  0204  0836               	movf	calibrate@inputVal+1,w
  1514  0205  3A80               	xorlw	128
  1515  0206  00FF               	movwf	127
  1516  0207  3084               	movlw	132
  1517  0208  027F               	subwf	127,w
  1518  0209  1D03               	skipz
  1519  020A  2A0D               	goto	u1005
  1520  020B  30B0               	movlw	176
  1521  020C  0235               	subwf	calibrate@inputVal,w
  1522  020D                     u1005:	
  1523  020D  1803               	skipnc
  1524  020E  29F6               	goto	l1343
  1525  020F  0020               	movlb	0	; select bank0
  1526  0210  0836               	movf	calibrate@inputVal+1,w
  1527  0211  3A80               	xorlw	128
  1528  0212  00FF               	movwf	127
  1529  0213  3081               	movlw	129
  1530  0214  027F               	subwf	127,w
  1531  0215  1D03               	skipz
  1532  0216  2A19               	goto	u1015
  1533  0217  302D               	movlw	45
  1534  0218  0235               	subwf	calibrate@inputVal,w
  1535  0219                     u1015:	
  1536  0219  1C03               	skipc
  1537  021A  29F6               	goto	l1343
  1538                           
  1539                           ;main.c: 107: {
  1540                           ;main.c: 108: lastVal = inputVal;
  1541  021B  0020               	movlb	0	; select bank0
  1542  021C  0836               	movf	calibrate@inputVal+1,w
  1543  021D  01AF               	clrf	calibrate@lastVal+1
  1544  021E  07AF               	addwf	calibrate@lastVal+1,f
  1545  021F  0835               	movf	calibrate@inputVal,w
  1546  0220  01AE               	clrf	calibrate@lastVal
  1547  0221  07AE               	addwf	calibrate@lastVal,f
  1548                           
  1549                           ;main.c: 109: inputVal = getValue();
  1550  0222  238D               	fcall	_getValue
  1551  0223  0874               	movf	?_getValue+1,w
  1552  0224  0020               	movlb	0	; select bank0
  1553  0225  01B6               	clrf	calibrate@inputVal+1
  1554  0226  07B6               	addwf	calibrate@inputVal+1,f
  1555  0227  0873               	movf	?_getValue,w
  1556  0228  01B5               	clrf	calibrate@inputVal
  1557  0229  07B5               	addwf	calibrate@inputVal,f
  1558                           
  1559                           ;main.c: 110: if ( (inputVal < 1200)
  1560                           ;main.c: 111: && (inputVal > 300) )
  1561  022A  0836               	movf	calibrate@inputVal+1,w
  1562  022B  3A80               	xorlw	128
  1563  022C  00FF               	movwf	127
  1564  022D  3084               	movlw	132
  1565  022E  027F               	subwf	127,w
  1566  022F  1D03               	skipz
  1567  0230  2A33               	goto	u1025
  1568  0231  30B0               	movlw	176
  1569  0232  0235               	subwf	calibrate@inputVal,w
  1570  0233                     u1025:	
  1571  0233  1803               	skipnc
  1572  0234  29F6               	goto	l1343
  1573  0235  0020               	movlb	0	; select bank0
  1574  0236  0836               	movf	calibrate@inputVal+1,w
  1575  0237  3A80               	xorlw	128
  1576  0238  00FF               	movwf	127
  1577  0239  3081               	movlw	129
  1578  023A  027F               	subwf	127,w
  1579  023B  1D03               	skipz
  1580  023C  2A3F               	goto	u1035
  1581  023D  302D               	movlw	45
  1582  023E  0235               	subwf	calibrate@inputVal,w
  1583  023F                     u1035:	
  1584  023F  1C03               	skipc
  1585  0240  29F6               	goto	l1343
  1586                           
  1587                           ;main.c: 112: {
  1588                           ;main.c: 113: if ( abs( inputVal - lastVal ) < 10 )
  1589  0241  0020               	movlb	0	; select bank0
  1590  0242  092E               	comf	calibrate@lastVal,w
  1591  0243  00AA               	movwf	??_calibrate
  1592  0244  092F               	comf	calibrate@lastVal+1,w
  1593  0245  00AB               	movwf	??_calibrate+1
  1594  0246  0AAA               	incf	??_calibrate,f
  1595  0247  1903               	skipnz
  1596  0248  0AAB               	incf	??_calibrate+1,f
  1597  0249  0835               	movf	calibrate@inputVal,w
  1598  024A  072A               	addwf	??_calibrate,w
  1599  024B  00F3               	movwf	abs@a
  1600  024C  0836               	movf	calibrate@inputVal+1,w
  1601  024D  3D2B               	addwfc	??_calibrate+1,w
  1602  024E  00F4               	movwf	abs@a+1
  1603  024F  23E8               	fcall	_abs
  1604  0250  0874               	movf	?_abs+1,w
  1605  0251  3A80               	xorlw	128
  1606  0252  00FF               	movwf	127
  1607  0253  3080               	movlw	128
  1608  0254  027F               	subwf	127,w
  1609  0255  1D03               	skipz
  1610  0256  2A59               	goto	u1045
  1611  0257  300A               	movlw	10
  1612  0258  0273               	subwf	?_abs,w
  1613  0259                     u1045:	
  1614  0259  1803               	skipnc
  1615  025A  29F6               	goto	l1343
  1616                           
  1617                           ;main.c: 114: {
  1618                           ;main.c: 115: cumulativeVal = inputVal;
  1619  025B  0020               	movlb	0	; select bank0
  1620  025C  0835               	movf	calibrate@inputVal,w
  1621  025D  0021               	movlb	1	; select bank1
  1622  025E  00A0               	movwf	_cumulativeVal^(0+128)
  1623  025F  0020               	movlb	0	; select bank0
  1624  0260  0836               	movf	calibrate@inputVal+1,w
  1625  0261  0021               	movlb	1	; select bank1
  1626  0262  00A1               	movwf	(_cumulativeVal+1)^(0+128)
  1627  0263  0D89               	rlf	9,f
  1628  0264  3B89               	subwfb	9,f
  1629  0265  0989               	comf	9,f
  1630  0266  00A2               	movwf	(_cumulativeVal+2)^(0+128)
  1631  0267  00A3               	movwf	(_cumulativeVal+3)^(0+128)
  1632                           
  1633                           ;main.c: 116: averageVal = inputVal;
  1634  0268  0020               	movlb	0	; select bank0
  1635  0269  0835               	movf	calibrate@inputVal,w
  1636  026A  00B0               	movwf	calibrate@averageVal
  1637  026B  0836               	movf	calibrate@inputVal+1,w
  1638  026C  00B1               	movwf	calibrate@averageVal+1
  1639  026D  0D89               	rlf	9,f
  1640  026E  3B89               	subwfb	9,f
  1641  026F  0989               	comf	9,f
  1642  0270  00B2               	movwf	calibrate@averageVal+2
  1643  0271  00B3               	movwf	calibrate@averageVal+3
  1644                           
  1645                           ;main.c: 122: }
  1646                           ;main.c: 125: i = 1;
  1647  0272  01B4               	clrf	calibrate@i
  1648  0273  0AB4               	incf	calibrate@i,f
  1649  0274                     l1357:	
  1650                           ;main.c: 126: while (i < 10)
  1651                           
  1652  0274  300A               	movlw	10
  1653  0275  0020               	movlb	0	; select bank0
  1654  0276  0234               	subwf	calibrate@i,w
  1655  0277  1803               	btfsc	3,0
  1656  0278  2AE4               	goto	l1359
  1657                           
  1658                           ;main.c: 127: {
  1659                           ;main.c: 128: inputVal = getValue();
  1660  0279  238D               	fcall	_getValue
  1661  027A  0874               	movf	?_getValue+1,w
  1662  027B  0020               	movlb	0	; select bank0
  1663  027C  01B6               	clrf	calibrate@inputVal+1
  1664  027D  07B6               	addwf	calibrate@inputVal+1,f
  1665  027E  0873               	movf	?_getValue,w
  1666  027F  01B5               	clrf	calibrate@inputVal
  1667  0280  07B5               	addwf	calibrate@inputVal,f
  1668                           
  1669                           ;main.c: 129: if ( abs( inputVal - averageVal ) < 10 )
  1670  0281  0930               	comf	calibrate@averageVal,w
  1671  0282  00AA               	movwf	??_calibrate
  1672  0283  0931               	comf	calibrate@averageVal+1,w
  1673  0284  00AB               	movwf	??_calibrate+1
  1674  0285  0AAA               	incf	??_calibrate,f
  1675  0286  1903               	skipnz
  1676  0287  0AAB               	incf	??_calibrate+1,f
  1677  0288  0835               	movf	calibrate@inputVal,w
  1678  0289  072A               	addwf	??_calibrate,w
  1679  028A  00F3               	movwf	abs@a
  1680  028B  0836               	movf	calibrate@inputVal+1,w
  1681  028C  3D2B               	addwfc	??_calibrate+1,w
  1682  028D  00F4               	movwf	abs@a+1
  1683  028E  23E8               	fcall	_abs
  1684  028F  0874               	movf	?_abs+1,w
  1685  0290  3A80               	xorlw	128
  1686  0291  00FF               	movwf	127
  1687  0292  3080               	movlw	128
  1688  0293  027F               	subwf	127,w
  1689  0294  1D03               	skipz
  1690  0295  2A98               	goto	u1055
  1691  0296  300A               	movlw	10
  1692  0297  0273               	subwf	?_abs,w
  1693  0298                     u1055:	
  1694  0298  1803               	skipnc
  1695  0299  2ADE               	goto	l1355
  1696                           
  1697                           ;main.c: 130: {
  1698                           ;main.c: 131: cumulativeVal += inputVal;
  1699  029A  0020               	movlb	0	; select bank0
  1700  029B  0835               	movf	calibrate@inputVal,w
  1701  029C  00AA               	movwf	??_calibrate
  1702  029D  0836               	movf	calibrate@inputVal+1,w
  1703  029E  00AB               	movwf	??_calibrate+1
  1704  029F  3000               	movlw	0
  1705  02A0  1BAB               	btfsc	??_calibrate+1,7
  1706  02A1  30FF               	movlw	255
  1707  02A2  00AC               	movwf	??_calibrate+2
  1708  02A3  00AD               	movwf	??_calibrate+3
  1709  02A4  082A               	movf	??_calibrate,w
  1710  02A5  0021               	movlb	1	; select bank1
  1711  02A6  07A0               	addwf	_cumulativeVal^(0+128),f
  1712  02A7  0020               	movlb	0	; select bank0
  1713  02A8  082B               	movf	??_calibrate+1,w
  1714  02A9  0021               	movlb	1	; select bank1
  1715  02AA  3DA1               	addwfc	(_cumulativeVal+1)^(0+128),f
  1716  02AB  0020               	movlb	0	; select bank0
  1717  02AC  082C               	movf	??_calibrate+2,w
  1718  02AD  0021               	movlb	1	; select bank1
  1719  02AE  3DA2               	addwfc	(_cumulativeVal+2)^(0+128),f
  1720  02AF  0020               	movlb	0	; select bank0
  1721  02B0  082D               	movf	??_calibrate+3,w
  1722  02B1  0021               	movlb	1	; select bank1
  1723  02B2  3DA3               	addwfc	(_cumulativeVal+3)^(0+128),f
  1724                           
  1725                           ;main.c: 132: averageVal = cumulativeVal / (i + 1);
  1726  02B3  0020               	movlb	0	; select bank0
  1727  02B4  0834               	movf	calibrate@i,w
  1728  02B5  3E01               	addlw	1
  1729  02B6  00A0               	movwf	___aldiv@divisor
  1730  02B7  3000               	movlw	0
  1731  02B8  1803               	skipnc
  1732  02B9  3001               	movlw	1
  1733  02BA  00A1               	movwf	___aldiv@divisor+1
  1734  02BB  01A2               	clrf	___aldiv@divisor+2
  1735  02BC  1BA1               	btfsc	___aldiv@divisor+1,7
  1736  02BD  03A2               	decf	___aldiv@divisor+2,f
  1737  02BE  0822               	movf	___aldiv@divisor+2,w
  1738  02BF  00A3               	movwf	___aldiv@divisor+3
  1739  02C0  0021               	movlb	1	; select bank1
  1740  02C1  0823               	movf	(_cumulativeVal+3)^(0+128),w
  1741  02C2  0020               	movlb	0	; select bank0
  1742  02C3  00A7               	movwf	___aldiv@dividend+3
  1743  02C4  0021               	movlb	1	; select bank1
  1744  02C5  0822               	movf	(_cumulativeVal+2)^(0+128),w
  1745  02C6  0020               	movlb	0	; select bank0
  1746  02C7  00A6               	movwf	___aldiv@dividend+2
  1747  02C8  0021               	movlb	1	; select bank1
  1748  02C9  0821               	movf	(_cumulativeVal+1)^(0+128),w
  1749  02CA  0020               	movlb	0	; select bank0
  1750  02CB  00A5               	movwf	___aldiv@dividend+1
  1751  02CC  0021               	movlb	1	; select bank1
  1752  02CD  0820               	movf	_cumulativeVal^(0+128),w
  1753  02CE  0020               	movlb	0	; select bank0
  1754  02CF  00A4               	movwf	___aldiv@dividend
  1755  02D0  230B               	fcall	___aldiv
  1756  02D1  0020               	movlb	0	; select bank0
  1757  02D2  0823               	movf	?___aldiv+3,w
  1758  02D3  00B3               	movwf	calibrate@averageVal+3
  1759  02D4  0822               	movf	?___aldiv+2,w
  1760  02D5  00B2               	movwf	calibrate@averageVal+2
  1761  02D6  0821               	movf	?___aldiv+1,w
  1762  02D7  00B1               	movwf	calibrate@averageVal+1
  1763  02D8  0820               	movf	?___aldiv,w
  1764  02D9  00B0               	movwf	calibrate@averageVal
  1765                           
  1766                           ;main.c: 133: i ++;
  1767  02DA  3001               	movlw	1
  1768  02DB  00AA               	movwf	??_calibrate
  1769  02DC  082A               	movf	??_calibrate,w
  1770  02DD  07B4               	addwf	calibrate@i,f
  1771  02DE                     l1355:	
  1772                           
  1773                           ;main.c: 134: }
  1774                           ;main.c: 135: _delay_ms(20);
  1775  02DE  3014               	movlw	20
  1776  02DF  00F3               	movwf	__delay_ms@ms
  1777  02E0  3000               	movlw	0
  1778  02E1  00F4               	movwf	__delay_ms@ms+1
  1779  02E2  23CF               	fcall	__delay_ms
  1780  02E3  2A74               	goto	l1357
  1781  02E4                     l1359:	
  1782                           
  1783                           ;main.c: 136: }
  1784                           ;main.c: 141: for (i = 0; i < 2; i ++)
  1785  02E4  01B4               	clrf	calibrate@i
  1786  02E5  3002               	movlw	2
  1787  02E6  0234               	subwf	calibrate@i,w
  1788  02E7  1803               	btfsc	3,0
  1789  02E8  2B04               	goto	l1375
  1790  02E9                     l84:	
  1791  02E9  0064               	clrwdt	;# 
  1792                           
  1793                           ;main.c: 144: LATAbits.LATA5 = 0;
  1794  02EA  0022               	movlb	2	; select bank2
  1795  02EB  128C               	bcf	12,5	;volatile
  1796                           
  1797                           ;main.c: 145: LATAbits.LATA0 = 0;
  1798  02EC  100C               	bcf	12,0	;volatile
  1799                           
  1800                           ;main.c: 146: _delay_ms(200);
  1801  02ED  30C8               	movlw	200
  1802  02EE  00F3               	movwf	__delay_ms@ms
  1803  02EF  3000               	movlw	0
  1804  02F0  00F4               	movwf	__delay_ms@ms+1
  1805  02F1  23CF               	fcall	__delay_ms
  1806  02F2  0064               	clrwdt	;# 
  1807                           
  1808                           ;main.c: 149: LATAbits.LATA5= 1;
  1809  02F3  0022               	movlb	2	; select bank2
  1810  02F4  168C               	bsf	12,5	;volatile
  1811                           
  1812                           ;main.c: 150: LATAbits.LATA0 = 1;
  1813  02F5  140C               	bsf	12,0	;volatile
  1814                           
  1815                           ;main.c: 151: _delay_ms(200);
  1816  02F6  30C8               	movlw	200
  1817  02F7  00F3               	movwf	__delay_ms@ms
  1818  02F8  3000               	movlw	0
  1819  02F9  00F4               	movwf	__delay_ms@ms+1
  1820  02FA  23CF               	fcall	__delay_ms
  1821  02FB  3001               	movlw	1
  1822  02FC  0020               	movlb	0	; select bank0
  1823  02FD  00AA               	movwf	??_calibrate
  1824  02FE  082A               	movf	??_calibrate,w
  1825  02FF  07B4               	addwf	calibrate@i,f
  1826  0300  3002               	movlw	2
  1827  0301  0234               	subwf	calibrate@i,w
  1828  0302  1C03               	skipc
  1829  0303  2AE9               	goto	l84
  1830  0304                     l1375:	
  1831                           
  1832                           ;main.c: 152: }
  1833                           ;main.c: 154: return averageVal;
  1834  0304  0831               	movf	calibrate@averageVal+1,w
  1835  0305  01A9               	clrf	?_calibrate+1
  1836  0306  07A9               	addwf	?_calibrate+1,f
  1837  0307  0830               	movf	calibrate@averageVal,w
  1838  0308  01A8               	clrf	?_calibrate
  1839  0309  07A8               	addwf	?_calibrate,f
  1840  030A  0008               	return
  1841  030B                     __end_of_calibrate:	
  1842                           
  1843                           	psect	text4
  1844  038D                     __ptext4:	
  1845 ;; *************** function _getValue *****************
  1846 ;; Defined at:
  1847 ;;		line 66 in file "main.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;		None
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;		None
  1852 ;; Return value:  Size  Location     Type
  1853 ;;                  2    3[COMMON] int 
  1854 ;; Registers used:
  1855 ;;		wreg, status,2, status,0
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMMON   BANK0   BANK1
  1861 ;;      Params:         2       0       0
  1862 ;;      Locals:         0       0       0
  1863 ;;      Temps:          2       0       0
  1864 ;;      Totals:         4       0       0
  1865 ;;Total ram usage:        4 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    1
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		_calibrate
  1872 ;;		_main
  1873 ;; This function uses a non-reentrant model
  1874 ;;
  1875                           
  1876                           
  1877                           ;psect for function _getValue
  1878  038D                     _getValue:	
  1879                           
  1880                           ;main.c: 70: FVRCONbits.ADFVR = 0b10;
  1881                           
  1882                           ;incstack = 0
  1883                           ; Regs used in _getValue: [wreg+status,2+status,0]
  1884  038D  0022               	movlb	2	; select bank2
  1885  038E  0817               	movf	23,w	;volatile
  1886  038F  39FC               	andlw	-4
  1887  0390  3802               	iorlw	2
  1888  0391  0097               	movwf	23	;volatile
  1889                           
  1890                           ;main.c: 71: FVRCONbits.FVREN = 1;
  1891  0392  1797               	bsf	23,7	;volatile
  1892                           
  1893                           ;main.c: 72: ADCON1bits.ADPREF = 0b11;
  1894  0393  3003               	movlw	3
  1895  0394  0021               	movlb	1	; select bank1
  1896  0395  049E               	iorwf	30,f	;volatile
  1897                           
  1898                           ;main.c: 73: ADCON1bits.ADCS = 0b001;
  1899  0396  081E               	movf	30,w	;volatile
  1900  0397  398F               	andlw	-113
  1901  0398  3810               	iorlw	16
  1902  0399  009E               	movwf	30	;volatile
  1903                           
  1904                           ;main.c: 74: ANSELAbits.ANSA4 = 1;
  1905  039A  0023               	movlb	3	; select bank3
  1906  039B  160C               	bsf	12,4	;volatile
  1907                           
  1908                           ;main.c: 75: TRISAbits.TRISA4 = 1;
  1909  039C  0021               	movlb	1	; select bank1
  1910  039D  160C               	bsf	12,4	;volatile
  1911                           
  1912                           ;main.c: 76: ADCON0bits.CHS = 3;
  1913  039E  081D               	movf	29,w	;volatile
  1914  039F  3983               	andlw	-125
  1915  03A0  380C               	iorlw	12
  1916  03A1  009D               	movwf	29	;volatile
  1917                           
  1918                           ;main.c: 77: ADCON0bits.ADON = 1;
  1919  03A2  141D               	bsf	29,0	;volatile
  1920                           
  1921                           ;main.c: 78: ADCON0bits.GO_nDONE = 1;
  1922  03A3  149D               	bsf	29,1	;volatile
  1923  03A4                     l68:	
  1924                           ;main.c: 79: while (ADCON0bits.GO_nDONE);
  1925                           
  1926  03A4  189D               	btfsc	29,1	;volatile
  1927  03A5  2BA4               	goto	l68
  1928                           
  1929                           ;main.c: 83: return ADRES >> 6;
  1930  03A6  081C               	movf	28,w	;volatile
  1931  03A7  00F6               	movwf	??_getValue+1
  1932  03A8  081B               	movf	27,w	;volatile
  1933  03A9  00F5               	movwf	??_getValue
  1934  03AA  3006               	movlw	6
  1935  03AB                     u885:	
  1936  03AB  36F6               	lsrf	??_getValue+1,f
  1937  03AC  0CF5               	rrf	??_getValue,f
  1938  03AD  0B89               	decfsz	9,f
  1939  03AE  2BAB               	goto	u885
  1940  03AF  0875               	movf	??_getValue,w
  1941  03B0  00F3               	movwf	?_getValue
  1942  03B1  0876               	movf	??_getValue+1,w
  1943  03B2  00F4               	movwf	?_getValue+1
  1944  03B3  0008               	return
  1945  03B4                     __end_of_getValue:	
  1946                           
  1947                           	psect	text5
  1948  03E8                     __ptext5:	
  1949 ;; *************** function _abs *****************
  1950 ;; Defined at:
  1951 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.31\sources\common\abs.c"
  1952 ;; Parameters:    Size  Location     Type
  1953 ;;  a               2    3[COMMON] int 
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;		None
  1956 ;; Return value:  Size  Location     Type
  1957 ;;                  2    3[COMMON] int 
  1958 ;; Registers used:
  1959 ;;		wreg, status,2, status,0
  1960 ;; Tracked objects:
  1961 ;;		On entry : 0/0
  1962 ;;		On exit  : 0/0
  1963 ;;		Unchanged: 0/0
  1964 ;; Data sizes:     COMMON   BANK0   BANK1
  1965 ;;      Params:         2       0       0
  1966 ;;      Locals:         0       0       0
  1967 ;;      Temps:          2       0       0
  1968 ;;      Totals:         4       0       0
  1969 ;;Total ram usage:        4 bytes
  1970 ;; Hardware stack levels used:    1
  1971 ;; Hardware stack levels required when called:    1
  1972 ;; This function calls:
  1973 ;;		Nothing
  1974 ;; This function is called by:
  1975 ;;		_calibrate
  1976 ;; This function uses a non-reentrant model
  1977 ;;
  1978                           
  1979                           
  1980                           ;psect for function _abs
  1981  03E8                     _abs:	
  1982                           
  1983                           ;incstack = 0
  1984                           ; Regs used in _abs: [wreg+status,2+status,0]
  1985  03E8  1FF4               	btfss	abs@a+1,7
  1986  03E9  0008               	return
  1987  03EA  0973               	comf	abs@a,w
  1988  03EB  00F5               	movwf	??_abs
  1989  03EC  0974               	comf	abs@a+1,w
  1990  03ED  00F6               	movwf	??_abs+1
  1991  03EE  0AF5               	incf	??_abs,f
  1992  03EF  1903               	skipnz
  1993  03F0  0AF6               	incf	??_abs+1,f
  1994  03F1  0875               	movf	??_abs,w
  1995  03F2  00F3               	movwf	?_abs
  1996  03F3  0876               	movf	??_abs+1,w
  1997  03F4  00F4               	movwf	?_abs+1
  1998  03F5  0008               	return
  1999  03F6                     __end_of_abs:	
  2000                           
  2001                           	psect	text6
  2002  03CF                     __ptext6:	
  2003 ;; *************** function __delay_ms *****************
  2004 ;; Defined at:
  2005 ;;		line 34 in file "main.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;  ms              2    3[COMMON] unsigned int 
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;  us              1    7[COMMON] unsigned char 
  2010 ;;  i               1    6[COMMON] unsigned char 
  2011 ;; Return value:  Size  Location     Type
  2012 ;;		None               void
  2013 ;; Registers used:
  2014 ;;		wreg, status,2, status,0
  2015 ;; Tracked objects:
  2016 ;;		On entry : 0/0
  2017 ;;		On exit  : 0/0
  2018 ;;		Unchanged: 0/0
  2019 ;; Data sizes:     COMMON   BANK0   BANK1
  2020 ;;      Params:         2       0       0
  2021 ;;      Locals:         2       0       0
  2022 ;;      Temps:          1       0       0
  2023 ;;      Totals:         5       0       0
  2024 ;;Total ram usage:        5 bytes
  2025 ;; Hardware stack levels used:    1
  2026 ;; Hardware stack levels required when called:    1
  2027 ;; This function calls:
  2028 ;;		Nothing
  2029 ;; This function is called by:
  2030 ;;		_calibrate
  2031 ;;		_main
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           
  2036                           ;psect for function __delay_ms
  2037  03CF                     __delay_ms:	
  2038                           
  2039                           ;main.c: 36: unsigned char i;
  2040                           ;main.c: 37: if (ms == 0) return;
  2041                           
  2042                           ;incstack = 0
  2043                           ; Regs used in __delay_ms: [wreg+status,2+status,0]
  2044  03CF  0874               	movf	__delay_ms@ms+1,w
  2045  03D0  0473               	iorwf	__delay_ms@ms,w
  2046  03D1  1903               	btfsc	3,2
  2047  03D2  0008               	return
  2048                           
  2049                           ;main.c: 39: i = 4;
  2050                           
  2051                           ;main.c: 38: do {
  2052  03D3  3004               	movlw	4
  2053  03D4  00F5               	movwf	??__delay_ms
  2054  03D5  0875               	movf	??__delay_ms,w
  2055  03D6  00F6               	movwf	__delay_ms@i
  2056  03D7                     l57:	
  2057                           ;main.c: 40: do {
  2058                           
  2059                           
  2060                           ;main.c: 41: { unsigned char us; us = (164)/(12000000/8000000L)|1; while(--us != 0) cont
      +                          inue; };
  2061  03D7  30A5               	movlw	165
  2062  03D8  00F5               	movwf	??__delay_ms
  2063  03D9  0875               	movf	??__delay_ms,w
  2064  03DA  00F7               	movwf	__delay_ms@us
  2065  03DB                     l1219:	
  2066  03DB  3001               	movlw	1
  2067  03DC  02F7               	subwf	__delay_ms@us,f
  2068  03DD  1D03               	btfss	3,2
  2069  03DE  2BDB               	goto	l1219
  2070                           
  2071                           ;main.c: 42: } while(--i);
  2072  03DF  3001               	movlw	1
  2073  03E0  02F6               	subwf	__delay_ms@i,f
  2074  03E1  1D03               	btfss	3,2
  2075  03E2  2BD7               	goto	l57
  2076                           
  2077                           ;main.c: 43: } while(--ms);
  2078  03E3  3001               	movlw	1
  2079  03E4  02F3               	subwf	__delay_ms@ms,f
  2080  03E5  3000               	movlw	0
  2081  03E6  3BF4               	subwfb	__delay_ms@ms+1,f
  2082  03E7  2BCF               	goto	__delay_ms
  2083  03E8                     __end_of__delay_ms:	
  2084                           
  2085                           	psect	text7
  2086  030B                     __ptext7:	
  2087 ;; *************** function ___aldiv *****************
  2088 ;; Defined at:
  2089 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.31\sources\common\aldiv.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;  divisor         4    0[BANK0 ] long 
  2092 ;;  dividend        4    4[BANK0 ] long 
  2093 ;; Auto vars:     Size  Location     Type
  2094 ;;  quotient        4    6[COMMON] long 
  2095 ;;  sign            1    5[COMMON] unsigned char 
  2096 ;;  counter         1    4[COMMON] unsigned char 
  2097 ;; Return value:  Size  Location     Type
  2098 ;;                  4    0[BANK0 ] long 
  2099 ;; Registers used:
  2100 ;;		wreg, status,2, status,0
  2101 ;; Tracked objects:
  2102 ;;		On entry : 0/0
  2103 ;;		On exit  : 0/0
  2104 ;;		Unchanged: 0/0
  2105 ;; Data sizes:     COMMON   BANK0   BANK1
  2106 ;;      Params:         0       8       0
  2107 ;;      Locals:         6       0       0
  2108 ;;      Temps:          1       0       0
  2109 ;;      Totals:         7       8       0
  2110 ;;Total ram usage:       15 bytes
  2111 ;; Hardware stack levels used:    1
  2112 ;; Hardware stack levels required when called:    1
  2113 ;; This function calls:
  2114 ;;		Nothing
  2115 ;; This function is called by:
  2116 ;;		_calibrate
  2117 ;;		_main
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           
  2122                           ;psect for function ___aldiv
  2123  030B                     ___aldiv:	
  2124                           
  2125                           ;incstack = 0
  2126                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2127  030B  01F5               	clrf	___aldiv@sign
  2128  030C  0020               	movlb	0	; select bank0
  2129  030D  1FA3               	btfss	___aldiv@divisor+3,7
  2130  030E  2B1C               	goto	l227
  2131  030F  09A0               	comf	___aldiv@divisor,f
  2132  0310  09A1               	comf	___aldiv@divisor+1,f
  2133  0311  09A2               	comf	___aldiv@divisor+2,f
  2134  0312  09A3               	comf	___aldiv@divisor+3,f
  2135  0313  0AA0               	incf	___aldiv@divisor,f
  2136  0314  1903               	skipnz
  2137  0315  0AA1               	incf	___aldiv@divisor+1,f
  2138  0316  1903               	skipnz
  2139  0317  0AA2               	incf	___aldiv@divisor+2,f
  2140  0318  1903               	skipnz
  2141  0319  0AA3               	incf	___aldiv@divisor+3,f
  2142  031A  01F5               	clrf	___aldiv@sign
  2143  031B  0AF5               	incf	___aldiv@sign,f
  2144  031C                     l227:	
  2145  031C  1FA7               	btfss	___aldiv@dividend+3,7
  2146  031D  2B2D               	goto	l1257
  2147  031E  09A4               	comf	___aldiv@dividend,f
  2148  031F  09A5               	comf	___aldiv@dividend+1,f
  2149  0320  09A6               	comf	___aldiv@dividend+2,f
  2150  0321  09A7               	comf	___aldiv@dividend+3,f
  2151  0322  0AA4               	incf	___aldiv@dividend,f
  2152  0323  1903               	skipnz
  2153  0324  0AA5               	incf	___aldiv@dividend+1,f
  2154  0325  1903               	skipnz
  2155  0326  0AA6               	incf	___aldiv@dividend+2,f
  2156  0327  1903               	skipnz
  2157  0328  0AA7               	incf	___aldiv@dividend+3,f
  2158  0329  3001               	movlw	1
  2159  032A  00F3               	movwf	??___aldiv
  2160  032B  0873               	movf	??___aldiv,w
  2161  032C  06F5               	xorwf	___aldiv@sign,f
  2162  032D                     l1257:	
  2163  032D  3000               	movlw	0
  2164  032E  00F9               	movwf	___aldiv@quotient+3
  2165  032F  3000               	movlw	0
  2166  0330  00F8               	movwf	___aldiv@quotient+2
  2167  0331  3000               	movlw	0
  2168  0332  00F7               	movwf	___aldiv@quotient+1
  2169  0333  3000               	movlw	0
  2170  0334  00F6               	movwf	___aldiv@quotient
  2171  0335  0823               	movf	___aldiv@divisor+3,w
  2172  0336  0422               	iorwf	___aldiv@divisor+2,w
  2173  0337  0421               	iorwf	___aldiv@divisor+1,w
  2174  0338  0420               	iorwf	___aldiv@divisor,w
  2175  0339  1903               	skipnz
  2176  033A  2B76               	goto	l1279
  2177  033B  01F4               	clrf	___aldiv@counter
  2178  033C  0AF4               	incf	___aldiv@counter,f
  2179  033D                     l1265:	
  2180  033D  1BA3               	btfsc	___aldiv@divisor+3,7
  2181  033E  2B4B               	goto	l1267
  2182  033F  3001               	movlw	1
  2183  0340                     u935:	
  2184  0340  35A0               	lslf	___aldiv@divisor,f
  2185  0341  0DA1               	rlf	___aldiv@divisor+1,f
  2186  0342  0DA2               	rlf	___aldiv@divisor+2,f
  2187  0343  0DA3               	rlf	___aldiv@divisor+3,f
  2188  0344  0B89               	decfsz	9,f
  2189  0345  2B40               	goto	u935
  2190  0346  3001               	movlw	1
  2191  0347  00F3               	movwf	??___aldiv
  2192  0348  0873               	movf	??___aldiv,w
  2193  0349  07F4               	addwf	___aldiv@counter,f
  2194  034A  2B3D               	goto	l1265
  2195  034B                     l1267:	
  2196  034B  3001               	movlw	1
  2197  034C                     u955:	
  2198  034C  35F6               	lslf	___aldiv@quotient,f
  2199  034D  0DF7               	rlf	___aldiv@quotient+1,f
  2200  034E  0DF8               	rlf	___aldiv@quotient+2,f
  2201  034F  0DF9               	rlf	___aldiv@quotient+3,f
  2202  0350  0B89               	decfsz	9,f
  2203  0351  2B4C               	goto	u955
  2204  0352  0823               	movf	___aldiv@divisor+3,w
  2205  0353  0227               	subwf	___aldiv@dividend+3,w
  2206  0354  1D03               	skipz
  2207  0355  2B60               	goto	u965
  2208  0356  0822               	movf	___aldiv@divisor+2,w
  2209  0357  0226               	subwf	___aldiv@dividend+2,w
  2210  0358  1D03               	skipz
  2211  0359  2B60               	goto	u965
  2212  035A  0821               	movf	___aldiv@divisor+1,w
  2213  035B  0225               	subwf	___aldiv@dividend+1,w
  2214  035C  1D03               	skipz
  2215  035D  2B60               	goto	u965
  2216  035E  0820               	movf	___aldiv@divisor,w
  2217  035F  0224               	subwf	___aldiv@dividend,w
  2218  0360                     u965:	
  2219  0360  1C03               	skipc
  2220  0361  2B6B               	goto	l1275
  2221  0362  0820               	movf	___aldiv@divisor,w
  2222  0363  02A4               	subwf	___aldiv@dividend,f
  2223  0364  0821               	movf	___aldiv@divisor+1,w
  2224  0365  3BA5               	subwfb	___aldiv@dividend+1,f
  2225  0366  0822               	movf	___aldiv@divisor+2,w
  2226  0367  3BA6               	subwfb	___aldiv@dividend+2,f
  2227  0368  0823               	movf	___aldiv@divisor+3,w
  2228  0369  3BA7               	subwfb	___aldiv@dividend+3,f
  2229  036A  1476               	bsf	___aldiv@quotient,0
  2230  036B                     l1275:	
  2231  036B  3001               	movlw	1
  2232  036C                     u975:	
  2233  036C  36A3               	lsrf	___aldiv@divisor+3,f
  2234  036D  0CA2               	rrf	___aldiv@divisor+2,f
  2235  036E  0CA1               	rrf	___aldiv@divisor+1,f
  2236  036F  0CA0               	rrf	___aldiv@divisor,f
  2237  0370  0B89               	decfsz	9,f
  2238  0371  2B6C               	goto	u975
  2239  0372  3001               	movlw	1
  2240  0373  02F4               	subwf	___aldiv@counter,f
  2241  0374  1D03               	btfss	3,2
  2242  0375  2B4B               	goto	l1267
  2243  0376                     l1279:	
  2244  0376  0875               	movf	___aldiv@sign,w
  2245  0377  1903               	btfsc	3,2
  2246  0378  2B84               	goto	l1283
  2247  0379  09F6               	comf	___aldiv@quotient,f
  2248  037A  09F7               	comf	___aldiv@quotient+1,f
  2249  037B  09F8               	comf	___aldiv@quotient+2,f
  2250  037C  09F9               	comf	___aldiv@quotient+3,f
  2251  037D  0AF6               	incf	___aldiv@quotient,f
  2252  037E  1903               	skipnz
  2253  037F  0AF7               	incf	___aldiv@quotient+1,f
  2254  0380  1903               	skipnz
  2255  0381  0AF8               	incf	___aldiv@quotient+2,f
  2256  0382  1903               	skipnz
  2257  0383  0AF9               	incf	___aldiv@quotient+3,f
  2258  0384                     l1283:	
  2259  0384  0879               	movf	___aldiv@quotient+3,w
  2260  0385  00A3               	movwf	?___aldiv+3
  2261  0386  0878               	movf	___aldiv@quotient+2,w
  2262  0387  00A2               	movwf	?___aldiv+2
  2263  0388  0877               	movf	___aldiv@quotient+1,w
  2264  0389  00A1               	movwf	?___aldiv+1
  2265  038A  0876               	movf	___aldiv@quotient,w
  2266  038B  00A0               	movwf	?___aldiv
  2267  038C  0008               	return
  2268  038D                     __end_of___aldiv:	


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      11
    BANK0            80     79      79
    BANK1            32      4       8

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___aldiv
    _calibrate->___aldiv

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_calibrate
    _calibrate->___aldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                60    60      0    4881
                                             23 BANK0     56    56      0
                                              0 BANK1      4     4      0
                            ___aldiv
                          __delay_ms
                          _calibrate
                           _getValue
                               _init
                      _initInterrupt
 ---------------------------------------------------------------------------------
 (1) _initInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibrate                                           15    13      2    2138
                                              8 BANK0     15    13      2
                            ___aldiv
                          __delay_ms
                                _abs
                           _getValue
 ---------------------------------------------------------------------------------
 (1) _getValue                                             4     2      2       0
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     223
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) __delay_ms                                            5     3      2     650
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     705
                                              3 COMMON     7     7      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   __delay_ms
   _calibrate
     ___aldiv
     __delay_ms
     _abs
     _getValue
   _getValue
   _init
   _initInterrupt

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      62       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4F      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      4       8       8       25.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      62       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Tue Jul 21 13:51:57 2015

                       __CFG_CP$ON 0000                                  _d 03D0  
                               l57 03D7                                 l74 01FB  
                               l91 01E0                                 l68 03A4  
                               l84 02E9                        __CFG_CPD$ON 0000  
                              l227 031C  main@upperBallSensorThresholdValue 0061  
                              u935 0340                                u955 034C  
                              u965 0360                                u885 03AB  
                              u975 036C                                _abs 03E8  
                              _isr 0004                       __CFG_BORV$HI 0000  
                              wreg 0009                       __CFG_LVP$OFF 0000  
                             ?_abs 0073                               l1219 03DB  
                             l1501 01CF                               l1413 0087  
                             l1343 01F6                               l1407 006F  
                             l1265 033D                               l1257 032D  
                             l1283 0384                               l1275 036B  
                             l1267 034B                               l1355 02DE  
                             l1419 009A                               l1357 0274  
                             l1453 0120                               l1429 00C6  
                             l1461 0157                               l1279 0376  
                             l1375 0304                               l1359 02E4  
                             l1447 00EF                               l1481 0189  
                             l1475 0178                               l1495 01B7  
                             ?_isr 0070                       __CFG_WDTE$ON 0000  
                             u1005 020D                               u1015 0219  
                             u1025 0233                               u1105 0085  
                             u1035 023F                               u1115 00A7  
                             u1045 0259                               u1205 01CD  
                             u1125 00B7                               u1055 0298  
                             u1145 00ED                               u1155 011E  
                             u1165 0162                               u1175 0182  
                             u1095 006D                               u1185 019C  
                             u1195 01B5                               i1l20 0027  
                             i1l21 001A                               i1l23 0024  
                     __CFG_WRT$OFF 0000                               abs@a 0073  
                             _main 0036                               _init 03B4  
                             fsr1h 0007                               fsr1l 0006  
                             btemp 007E                      __CFG_BOREN$ON 0000  
                      main@timeout 005F                               ltemp 007E  
                             start 002D                               ttemp 007E  
                             wtemp 007E                      __CFG_IESO$OFF 0000  
                            ??_abs 0075                              ??_isr 0070  
                    __CFG_PLLEN$ON 0000                    __end_of___aldiv 038D  
                            ?_main 0070                              ?_init 0070  
                            _ADRES 009B                              i1l781 0020  
                     __delay_ms@ms 0073                       __delay_ms@us 0077  
main@lowerBallSensorThresholdValue 006D                      __CFG_PWRTE$ON 0000  
                   __CFG_FCMEN$OFF 0000                              main@i 00A6  
                   __pbitbssCOMMON 03D0                              isr@us 0072  
                            ltemp0 007E                              ltemp1 0082  
                            ltemp2 0086                              ltemp3 0080  
                            ttemp0 007E                              ttemp1 0081  
                            ttemp2 0084                              ttemp3 0087  
                            ttemp4 007F                              status 0003  
                            wtemp0 007E                              wtemp1 0080  
                            wtemp2 0082                              wtemp3 0084  
                            wtemp4 0086                              wtemp5 0088  
                            wtemp6 007F                     __CFG_MCLRE$OFF 0000  
                  __initialization 002E             __size_of_initInterrupt 000A  
                     __end_of_main 01F2                       __end_of_init 03CF  
                           ??_main 0037                             ??_init 0073  
                 calibrate@lastVal 002E                             _OSCCON 0099  
                 __end_of_getValue 03B4                          ??___aldiv 0073  
                    _initInterrupt 03F6            __end_of__initialization 0034  
               __size_of__delay_ms 0019                      _cumulativeVal 00A0  
                   __pcstackCOMMON 0070                 __size_of_calibrate 0119  
                   ?_initInterrupt 0070                         __pbssBANK1 00A0  
                 main@averageTable 003D                         __pmaintext 0036  
                   main@averagePtr 0066                         __pintentry 0004  
              calibrate@averageVal 0030                  calibrate@inputVal 0035  
                __end_of__delay_ms 03E8                          ?_getValue 0073  
                __end_of_calibrate 030B                         calibrate@i 0034  
                          ___aldiv 030B                    __CFG_STVREN$OFF 0000  
                          __ptext1 03F6                            __ptext2 03B4  
                          __ptext3 01F2                            __ptext4 038D  
                          __ptext5 03E8                            __ptext6 03CF  
                          __ptext7 030B                    ??_initInterrupt 0073  
                     __size_of_abs 000E                       __size_of_isr 0029  
                 ___aldiv@dividend 0024                          _IOCAFbits 0393  
                        _IOCANbits 0392                          _IOCAPbits 0391  
                       ??_getValue 0075               end_of_initialization 0034  
                 ___aldiv@quotient 0076                          _PORTAbits 000C  
                 __CFG_FOSC$INTOSC 0000                          _TRISAbits 008C  
                       main@sample 005D                        __delay_ms@i 0076  
              start_initialization 002E                        __end_of_abs 03F6  
                      __end_of_isr 002D                          ___latbits 0000  
                    __pcstackBANK0 0020                      __pcstackBANK1 00A4  
                        __delay_ms 03CF                  __size_of_getValue 0027  
                        _calibrate 01F2                           ?___aldiv 0020  
                       ?__delay_ms 0073                   main@lowerToUpper 006B  
                  ___aldiv@divisor 0020                  main@steadyToLower 0069  
                  ___aldiv@counter 0074                         ?_calibrate 0028  
                         _LATAbits 010C                         _ADCON0bits 009D  
                       _ADCON1bits 009E                          main@value 0067  
                        main@state 0065              __end_of_initInterrupt 0400  
             main@steadyStateValue 00A4                   __size_of___aldiv 0082  
                       _ANSELAbits 018C                        ??__delay_ms 0075  
                         _getValue 038D                        ??_calibrate 002A  
                    __size_of_main 01BC                      __size_of_init 001B  
                       _INTCONbits 000B                         _FVRCONbits 0117  
                         intlevel1 0000                    main@toggleCount 0063  
                __CFG_CLKOUTEN$OFF 0000                       ___aldiv@sign 0075  
                       _WDTCONbits 0097  
