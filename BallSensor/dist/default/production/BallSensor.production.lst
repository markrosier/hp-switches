

Microchip Technology PIC LITE Macro Assembler V1.31 build 56723 
                                                                                               Fri Jun 26 09:29:27 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 56723
     1                           	processor	12F1822
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	intentry,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     	;# 
    20  0001                     	;# 
    21  0002                     	;# 
    22  0003                     	;# 
    23  0004                     	;# 
    24  0005                     	;# 
    25  0006                     	;# 
    26  0007                     	;# 
    27  0008                     	;# 
    28  0009                     	;# 
    29  000A                     	;# 
    30  000B                     	;# 
    31  000C                     	;# 
    32  0011                     	;# 
    33  0012                     	;# 
    34  0015                     	;# 
    35  0016                     	;# 
    36  0016                     	;# 
    37  0017                     	;# 
    38  0018                     	;# 
    39  0019                     	;# 
    40  001A                     	;# 
    41  001B                     	;# 
    42  001C                     	;# 
    43  001E                     	;# 
    44  001F                     	;# 
    45  008C                     	;# 
    46  0091                     	;# 
    47  0092                     	;# 
    48  0095                     	;# 
    49  0096                     	;# 
    50  0097                     	;# 
    51  0098                     	;# 
    52  0099                     	;# 
    53  009A                     	;# 
    54  009B                     	;# 
    55  009B                     	;# 
    56  009C                     	;# 
    57  009D                     	;# 
    58  009E                     	;# 
    59  010C                     	;# 
    60  0111                     	;# 
    61  0112                     	;# 
    62  0115                     	;# 
    63  0116                     	;# 
    64  0117                     	;# 
    65  0118                     	;# 
    66  0119                     	;# 
    67  011A                     	;# 
    68  011B                     	;# 
    69  011D                     	;# 
    70  011D                     	;# 
    71  018C                     	;# 
    72  0191                     	;# 
    73  0191                     	;# 
    74  0192                     	;# 
    75  0193                     	;# 
    76  0193                     	;# 
    77  0193                     	;# 
    78  0194                     	;# 
    79  0195                     	;# 
    80  0196                     	;# 
    81  0199                     	;# 
    82  019A                     	;# 
    83  019B                     	;# 
    84  019B                     	;# 
    85  019B                     	;# 
    86  019B                     	;# 
    87  019C                     	;# 
    88  019C                     	;# 
    89  019D                     	;# 
    90  019E                     	;# 
    91  019F                     	;# 
    92  020C                     	;# 
    93  0211                     	;# 
    94  0211                     	;# 
    95  0212                     	;# 
    96  0212                     	;# 
    97  0213                     	;# 
    98  0213                     	;# 
    99  0214                     	;# 
   100  0214                     	;# 
   101  0215                     	;# 
   102  0215                     	;# 
   103  0215                     	;# 
   104  0216                     	;# 
   105  0216                     	;# 
   106  0217                     	;# 
   107  0217                     	;# 
   108  0291                     	;# 
   109  0291                     	;# 
   110  0292                     	;# 
   111  0293                     	;# 
   112  0294                     	;# 
   113  0295                     	;# 
   114  0295                     	;# 
   115  0296                     	;# 
   116  0391                     	;# 
   117  0392                     	;# 
   118  0393                     	;# 
   119  039A                     	;# 
   120  039C                     	;# 
   121  039D                     	;# 
   122  039E                     	;# 
   123  039F                     	;# 
   124  0FE4                     	;# 
   125  0FE5                     	;# 
   126  0FE6                     	;# 
   127  0FE7                     	;# 
   128  0FE8                     	;# 
   129  0FE9                     	;# 
   130  0FEA                     	;# 
   131  0FEB                     	;# 
   132  0FED                     	;# 
   133  0FEE                     	;# 
   134  0FEF                     	;# 
   135  0000                     	;# 
   136  0001                     	;# 
   137  0002                     	;# 
   138  0003                     	;# 
   139  0004                     	;# 
   140  0005                     	;# 
   141  0006                     	;# 
   142  0007                     	;# 
   143  0008                     	;# 
   144  0009                     	;# 
   145  000A                     	;# 
   146  000B                     	;# 
   147  000C                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001C                     	;# 
   159  001E                     	;# 
   160  001F                     	;# 
   161  008C                     	;# 
   162  0091                     	;# 
   163  0092                     	;# 
   164  0095                     	;# 
   165  0096                     	;# 
   166  0097                     	;# 
   167  0098                     	;# 
   168  0099                     	;# 
   169  009A                     	;# 
   170  009B                     	;# 
   171  009B                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  010C                     	;# 
   176  0111                     	;# 
   177  0112                     	;# 
   178  0115                     	;# 
   179  0116                     	;# 
   180  0117                     	;# 
   181  0118                     	;# 
   182  0119                     	;# 
   183  011A                     	;# 
   184  011B                     	;# 
   185  011D                     	;# 
   186  011D                     	;# 
   187  018C                     	;# 
   188  0191                     	;# 
   189  0191                     	;# 
   190  0192                     	;# 
   191  0193                     	;# 
   192  0193                     	;# 
   193  0193                     	;# 
   194  0194                     	;# 
   195  0195                     	;# 
   196  0196                     	;# 
   197  0199                     	;# 
   198  019A                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019C                     	;# 
   204  019C                     	;# 
   205  019D                     	;# 
   206  019E                     	;# 
   207  019F                     	;# 
   208  020C                     	;# 
   209  0211                     	;# 
   210  0211                     	;# 
   211  0212                     	;# 
   212  0212                     	;# 
   213  0213                     	;# 
   214  0213                     	;# 
   215  0214                     	;# 
   216  0214                     	;# 
   217  0215                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0216                     	;# 
   221  0216                     	;# 
   222  0217                     	;# 
   223  0217                     	;# 
   224  0291                     	;# 
   225  0291                     	;# 
   226  0292                     	;# 
   227  0293                     	;# 
   228  0294                     	;# 
   229  0295                     	;# 
   230  0295                     	;# 
   231  0296                     	;# 
   232  0391                     	;# 
   233  0392                     	;# 
   234  0393                     	;# 
   235  039A                     	;# 
   236  039C                     	;# 
   237  039D                     	;# 
   238  039E                     	;# 
   239  039F                     	;# 
   240  0FE4                     	;# 
   241  0FE5                     	;# 
   242  0FE6                     	;# 
   243  0FE7                     	;# 
   244  0FE8                     	;# 
   245  0FE9                     	;# 
   246  0FEA                     	;# 
   247  0FEB                     	;# 
   248  0FED                     	;# 
   249  0FEE                     	;# 
   250  0FEF                     	;# 
   251  000B                     _INTCONbits	set	11
   252  000C                     _PORTAbits	set	12
   253  009B                     _ADRES	set	155
   254  009D                     _ADCON0bits	set	157
   255  009E                     _ADCON1bits	set	158
   256  0099                     _OSCCON	set	153
   257  008C                     _TRISAbits	set	140
   258  0097                     _WDTCONbits	set	151
   259  0117                     _FVRCONbits	set	279
   260  010C                     _LATAbits	set	268
   261  018C                     _ANSELAbits	set	396
   262  0393                     _IOCAFbits	set	915
   263  0392                     _IOCANbits	set	914
   264  0391                     _IOCAPbits	set	913
   265                           
   266                           	psect	intentry
   267  0004                     __pintentry:	
   268                           
   269                           ; #config settings
   270  0000                     
   271 ;; *************** function _isr *****************
   272 ;; Defined at:
   273 ;;		line 22 in file "interrupt.c"
   274 ;; Parameters:    Size  Location     Type
   275 ;;		None
   276 ;; Auto vars:     Size  Location     Type
   277 ;;  us              1    2[COMMON] unsigned char 
   278 ;; Return value:  Size  Location     Type
   279 ;;		None               void
   280 ;; Registers used:
   281 ;;		wreg, status,2, status,0
   282 ;; Tracked objects:
   283 ;;		On entry : 0/0
   284 ;;		On exit  : 0/0
   285 ;;		Unchanged: 0/0
   286 ;; Data sizes:     COMMON   BANK0   BANK1
   287 ;;      Params:         0       0       0
   288 ;;      Locals:         1       0       0
   289 ;;      Temps:          2       0       0
   290 ;;      Totals:         3       0       0
   291 ;;Total ram usage:        3 bytes
   292 ;; Hardware stack levels used:    1
   293 ;; This function calls:
   294 ;;		Nothing
   295 ;; This function is called by:
   296 ;;		Interrupt level 1
   297 ;; This function uses a non-reentrant model
   298 ;;
   299  0004                     _isr:	
   300                           
   301                           ;incstack = 0
   302                           ; Regs used in _isr: [wreg+status,2+status,0]
   303  0004  3180               	pagesel	$
   304  0005  0020               	movlb	0	; select bank0
   305  0006  087F               	movf	127,w
   306  0007  00F1               	movwf	??_isr+1
   307                           
   308                           ;interrupt.c: 24: if (INTCONbits.IOCIF)
   309  0008  1C0B               	btfss	11,0	;volatile
   310  0009  2827               	goto	i1l20
   311                           
   312                           ;interrupt.c: 25: {
   313                           ;interrupt.c: 26: if (IOCAFbits.IOCAF2)
   314  000A  0027               	movlb	7	; select bank7
   315  000B  1D13               	btfss	19,2	;volatile
   316  000C  281A               	goto	i1l21
   317                           
   318                           ;interrupt.c: 27: {
   319                           ;interrupt.c: 28: d = PORTAbits.RA2;
   320  000D  0020               	movlb	0	; select bank0
   321  000E  0C0C               	rrf	12,w	;volatile
   322  000F  0C89               	rrf	9,f
   323  0010  3901               	andlw	1
   324  0011  00F0               	movwf	??_isr
   325  0012  0C70               	rrf	??_isr,w
   326  0013  1079               	bcf	_d/(0+8),_d& (0+7)
   327  0014  1803               	btfsc	3,0
   328  0015  1479               	bsf	_d/(0+8),_d& (0+7)
   329                           
   330                           ;interrupt.c: 29: LATAbits.LATA1 = 1;
   331  0016  0022               	movlb	2	; select bank2
   332  0017  148C               	bsf	12,1	;volatile
   333                           
   334                           ;interrupt.c: 30: if (!d)
   335  0018  1C79               	btfss	_d/(0+8),_d& (0+7)
   336                           
   337                           ;interrupt.c: 31: LATAbits.LATA1 = 0;
   338  0019  108C               	bcf	12,1	;volatile
   339  001A                     i1l21:	
   340                           
   341                           ;interrupt.c: 32: }
   342                           ;interrupt.c: 33: if (d == 1)
   343  001A  1C79               	btfss	_d/(0+8),_d& (0+7)
   344  001B  2824               	goto	i1l23
   345                           
   346                           ;interrupt.c: 34: { unsigned char us; us = (2)/(12000000/8000000L)|1; while(--us != 0) c
      +                          ontinue; };
   347  001C  3003               	movlw	3
   348  001D  00F0               	movwf	??_isr
   349  001E  0870               	movf	??_isr,w
   350  001F  00F2               	movwf	isr@us
   351  0020                     i1l829:	
   352  0020  3001               	movlw	1
   353  0021  02F2               	subwf	isr@us,f
   354  0022  1D03               	btfss	3,2
   355  0023  2820               	goto	i1l829
   356  0024                     i1l23:	
   357                           
   358                           ;interrupt.c: 35: IOCAFbits.IOCAF2 = 0;
   359  0024  0027               	movlb	7	; select bank7
   360  0025  1113               	bcf	19,2	;volatile
   361                           
   362                           ;interrupt.c: 36: INTCONbits.IOCIF = 0;
   363  0026  100B               	bcf	11,0	;volatile
   364  0027                     i1l20:	
   365                           
   366                           ;interrupt.c: 37: }
   367                           ;interrupt.c: 38: LATAbits.LATA1 = 0;
   368  0027  0022               	movlb	2	; select bank2
   369  0028  108C               	bcf	12,1	;volatile
   370  0029  0871               	movf	??_isr+1,w
   371  002A  0020               	movlb	0	; select bank0
   372  002B  00FF               	movwf	127
   373  002C  0009               	retfie
   374  002D                     __end_of_isr:	
   375  007E                     btemp	set	126	;btemp
   376  007E                     wtemp	set	126
   377  007E                     wtemp0	set	126
   378  0080                     wtemp1	set	128
   379  0082                     wtemp2	set	130
   380  0084                     wtemp3	set	132
   381  0086                     wtemp4	set	134
   382  0088                     wtemp5	set	136
   383  007F                     wtemp6	set	127
   384  007E                     ttemp	set	126
   385  007E                     ttemp0	set	126
   386  0081                     ttemp1	set	129
   387  0084                     ttemp2	set	132
   388  0087                     ttemp3	set	135
   389  007F                     ttemp4	set	127
   390  007E                     ltemp	set	126
   391  007E                     ltemp0	set	126
   392  0082                     ltemp1	set	130
   393  0086                     ltemp2	set	134
   394  0080                     ltemp3	set	128
   395                           
   396                           	psect	cinit
   397  002E                     start_initialization:	
   398  002E                     __initialization:	
   399                           
   400                           ; Clear objects allocated to BITCOMMON
   401  002E  01F9               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   402  002F                     end_of_initialization:	
   403                           ;End of C runtime variable initialization code
   404                           
   405  002F                     __end_of__initialization:	
   406  002F  0020               	movlb	0
   407  0030  2958               	ljmp	_main	;jump to C main() function
   408                           
   409                           	psect	bitbssCOMMON
   410  03C8                     __pbitbssCOMMON:	
   411  03C8                     _d:	
   412  03C8                     	ds	1
   413                           
   414                           	psect	cstackCOMMON
   415  0070                     __pcstackCOMMON:	
   416  0070                     ?_initInterrupt:	
   417  0070                     ?_isr:	
   418                           ; 0 bytes @ 0x0
   419                           
   420  0070                     ??_isr:	
   421                           ; 0 bytes @ 0x0
   422                           
   423  0070                     ?_init:	
   424                           ; 0 bytes @ 0x0
   425                           
   426                           
   427                           ; 0 bytes @ 0x0
   428  0070                     	ds	2
   429  0072                     isr@us:	
   430                           
   431                           ; 1 bytes @ 0x2
   432  0072                     	ds	1
   433  0073                     ??_initInterrupt:	
   434  0073                     ?__delay_ms:	
   435                           ; 0 bytes @ 0x3
   436                           
   437  0073                     ??_init:	
   438                           ; 0 bytes @ 0x3
   439                           
   440  0073                     ??___lmul:	
   441                           ; 0 bytes @ 0x3
   442                           
   443  0073                     ?_abs:	
   444                           ; 0 bytes @ 0x3
   445                           
   446  0073                     ?_getValue:	
   447                           ; 2 bytes @ 0x3
   448                           
   449  0073                     __delay_ms@ms:	
   450                           ; 2 bytes @ 0x3
   451                           
   452  0073                     abs@a:	
   453                           ; 2 bytes @ 0x3
   454                           
   455  0073                     ___lmul@product:	
   456                           ; 2 bytes @ 0x3
   457                           
   458                           
   459                           ; 4 bytes @ 0x3
   460  0073                     	ds	2
   461  0075                     ??_abs:	
   462  0075                     ??__delay_ms:	
   463                           ; 0 bytes @ 0x5
   464                           
   465  0075                     ??_getValue:	
   466                           ; 0 bytes @ 0x5
   467                           
   468                           
   469                           ; 0 bytes @ 0x5
   470  0075                     	ds	1
   471  0076                     __delay_ms@i:	
   472                           
   473                           ; 1 bytes @ 0x6
   474  0076                     	ds	1
   475  0077                     ??___aldiv:	
   476  0077                     __delay_ms@us:	
   477                           ; 0 bytes @ 0x7
   478                           
   479  0077                     getValue@val:	
   480                           ; 1 bytes @ 0x7
   481                           
   482                           
   483                           ; 2 bytes @ 0x7
   484  0077                     	ds	2
   485                           
   486                           	psect	cstackBANK0
   487  0020                     __pcstackBANK0:	
   488  0020                     ?___lmul:	
   489  0020                     ___lmul@multiplier:	
   490                           ; 4 bytes @ 0x0
   491                           
   492                           
   493                           ; 4 bytes @ 0x0
   494  0020                     	ds	4
   495  0024                     ___lmul@multiplicand:	
   496                           
   497                           ; 4 bytes @ 0x4
   498  0024                     	ds	4
   499  0028                     ?___aldiv:	
   500  0028                     ___aldiv@divisor:	
   501                           ; 4 bytes @ 0x8
   502                           
   503                           
   504                           ; 4 bytes @ 0x8
   505  0028                     	ds	4
   506  002C                     ___aldiv@dividend:	
   507                           
   508                           ; 4 bytes @ 0xC
   509  002C                     	ds	4
   510  0030                     ___aldiv@counter:	
   511                           
   512                           ; 1 bytes @ 0x10
   513  0030                     	ds	1
   514  0031                     ___aldiv@sign:	
   515                           
   516                           ; 1 bytes @ 0x11
   517  0031                     	ds	1
   518  0032                     ___aldiv@quotient:	
   519                           
   520                           ; 4 bytes @ 0x12
   521  0032                     	ds	4
   522  0036                     ?_calibrate:	
   523                           
   524                           ; 2 bytes @ 0x16
   525  0036                     	ds	2
   526  0038                     ??_calibrate:	
   527                           
   528                           ; 0 bytes @ 0x18
   529  0038                     	ds	4
   530  003C                     calibrate@lastVal:	
   531                           
   532                           ; 2 bytes @ 0x1C
   533  003C                     	ds	2
   534  003E                     calibrate@cumulativeVal:	
   535                           
   536                           ; 4 bytes @ 0x1E
   537  003E                     	ds	4
   538  0042                     calibrate@averageVal:	
   539                           
   540                           ; 4 bytes @ 0x22
   541  0042                     	ds	4
   542  0046                     calibrate@i:	
   543                           
   544                           ; 2 bytes @ 0x26
   545  0046                     	ds	2
   546  0048                     calibrate@inputVal:	
   547                           
   548                           ; 2 bytes @ 0x28
   549  0048                     	ds	2
   550  004A                     ?_main:	
   551  004A                     main@argc:	
   552                           ; 2 bytes @ 0x2A
   553                           
   554                           
   555                           ; 2 bytes @ 0x2A
   556  004A                     	ds	2
   557  004C                     main@argv:	
   558                           
   559                           ; 2 bytes @ 0x2C
   560  004C                     	ds	2
   561  004E                     ??_main:	
   562                           
   563                           ; 0 bytes @ 0x2E
   564  004E                     	ds	4
   565  0052                     main@upperBallSensorThresholdValue:	
   566                           
   567                           ; 2 bytes @ 0x32
   568  0052                     	ds	2
   569  0054                     main@changeValue:	
   570                           
   571                           ; 2 bytes @ 0x34
   572  0054                     	ds	2
   573  0056                     main@hysterysis:	
   574                           
   575                           ; 2 bytes @ 0x36
   576  0056                     	ds	2
   577  0058                     main@state:	
   578                           
   579                           ; 1 bytes @ 0x38
   580  0058                     	ds	1
   581  0059                     main@lowerBallSensorThresholdValue:	
   582                           
   583                           ; 2 bytes @ 0x39
   584  0059                     	ds	2
   585  005B                     main@value:	
   586                           
   587                           ; 2 bytes @ 0x3B
   588  005B                     	ds	2
   589  005D                     main@steadyStateValue:	
   590                           
   591                           ; 2 bytes @ 0x3D
   592  005D                     	ds	2
   593                           
   594                           	psect	maintext
   595  0158                     __pmaintext:	
   596 ;;
   597 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   598 ;;
   599 ;; *************** function _main *****************
   600 ;; Defined at:
   601 ;;		line 156 in file "main.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;  argc            2   42[BANK0 ] int 
   604 ;;  argv            2   44[BANK0 ] PTR PTR unsigned char 
   605 ;; Auto vars:     Size  Location     Type
   606 ;;  steadyStateV    2   61[BANK0 ] int 
   607 ;;  value           2   59[BANK0 ] int 
   608 ;;  lowerBallSen    2   57[BANK0 ] int 
   609 ;;  hysterysis      2   54[BANK0 ] int 
   610 ;;  changeValue     2   52[BANK0 ] int 
   611 ;;  upperBallSen    2   50[BANK0 ] int 
   612 ;;  i               2    0        int 
   613 ;;  state           1   56[BANK0 ] enum E2412
   614 ;; Return value:  Size  Location     Type
   615 ;;                  2   42[BANK0 ] int 
   616 ;; Registers used:
   617 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   618 ;; Tracked objects:
   619 ;;		On entry : 17F/0
   620 ;;		On exit  : 0/0
   621 ;;		Unchanged: 0/0
   622 ;; Data sizes:     COMMON   BANK0   BANK1
   623 ;;      Params:         0       4       0
   624 ;;      Locals:         0      13       0
   625 ;;      Temps:          0       4       0
   626 ;;      Totals:         0      21       0
   627 ;;Total ram usage:       21 bytes
   628 ;; Hardware stack levels required when called:    3
   629 ;; This function calls:
   630 ;;		___aldiv
   631 ;;		___lmul
   632 ;;		__delay_ms
   633 ;;		_calibrate
   634 ;;		_getValue
   635 ;;		_init
   636 ;;		_initInterrupt
   637 ;; This function is called by:
   638 ;;		Startup code after reset
   639 ;; This function uses a non-reentrant model
   640 ;;
   641                           
   642                           
   643                           ;psect for function _main
   644  0158                     _main:	
   645                           
   646                           ;main.c: 158: int steadyStateValue, lowerBallSensorThresholdValue, upperBallSensorThresh
      +                          oldValue;
   647                           ;main.c: 159: enum {offState, onState} state = offState;
   648                           
   649                           ;incstack = 0
   650                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   651  0158  0020               	movlb	0	; select bank0
   652  0159  01D8               	clrf	main@state
   653                           
   654                           ;main.c: 160: int value;
   655                           ;main.c: 161: int i;
   656                           ;main.c: 163: init();
   657  015A  22FF               	fcall	_init
   658  015B  0064               	clrwdt	;# 
   659                           
   660                           ;main.c: 169: LATAbits.LATA5 = 0;
   661  015C  0022               	movlb	2	; select bank2
   662  015D  128C               	bcf	12,5	;volatile
   663                           
   664                           ;main.c: 170: LATAbits.LATA0 = 0;
   665  015E  100C               	bcf	12,0	;volatile
   666                           
   667                           ;main.c: 171: _delay_ms(200);
   668  015F  30C8               	movlw	200
   669  0160  00F3               	movwf	__delay_ms@ms
   670  0161  3000               	movlw	0
   671  0162  00F4               	movwf	__delay_ms@ms+1
   672  0163  231A               	fcall	__delay_ms
   673  0164  0064               	clrwdt	;# 
   674                           
   675                           ;main.c: 174: LATAbits.LATA5 = 1;
   676  0165  0022               	movlb	2	; select bank2
   677  0166  168C               	bsf	12,5	;volatile
   678                           
   679                           ;main.c: 175: LATAbits.LATA0 = 1;
   680  0167  140C               	bsf	12,0	;volatile
   681                           
   682                           ;main.c: 176: _delay_ms(100);
   683  0168  3064               	movlw	100
   684  0169  00F3               	movwf	__delay_ms@ms
   685  016A  3000               	movlw	0
   686  016B  00F4               	movwf	__delay_ms@ms+1
   687  016C  231A               	fcall	__delay_ms
   688  016D  0064               	clrwdt	;# 
   689                           
   690                           ;main.c: 179: steadyStateValue = calibrate();
   691  016E  2031               	fcall	_calibrate
   692  016F  0020               	movlb	0	; select bank0
   693  0170  0837               	movf	?_calibrate+1,w
   694  0171  01DE               	clrf	main@steadyStateValue+1
   695  0172  07DE               	addwf	main@steadyStateValue+1,f
   696  0173  0836               	movf	?_calibrate,w
   697  0174  01DD               	clrf	main@steadyStateValue
   698  0175  07DD               	addwf	main@steadyStateValue,f
   699                           
   700                           ;main.c: 180: int changeValue = ((long)steadyStateValue * 12)/100;
   701  0176  3000               	movlw	0
   702  0177  00AB               	movwf	___aldiv@divisor+3
   703  0178  3000               	movlw	0
   704  0179  00AA               	movwf	___aldiv@divisor+2
   705  017A  3000               	movlw	0
   706  017B  00A9               	movwf	___aldiv@divisor+1
   707  017C  3064               	movlw	100
   708  017D  00A8               	movwf	___aldiv@divisor
   709  017E  085D               	movf	main@steadyStateValue,w
   710  017F  00A0               	movwf	___lmul@multiplier
   711  0180  085E               	movf	main@steadyStateValue+1,w
   712  0181  00A1               	movwf	___lmul@multiplier+1
   713  0182  0D89               	rlf	9,f
   714  0183  3B89               	subwfb	9,f
   715  0184  0989               	comf	9,f
   716  0185  00A2               	movwf	___lmul@multiplier+2
   717  0186  00A3               	movwf	___lmul@multiplier+3
   718  0187  3000               	movlw	0
   719  0188  00A7               	movwf	___lmul@multiplicand+3
   720  0189  3000               	movlw	0
   721  018A  00A6               	movwf	___lmul@multiplicand+2
   722  018B  3000               	movlw	0
   723  018C  00A5               	movwf	___lmul@multiplicand+1
   724  018D  300C               	movlw	12
   725  018E  00A4               	movwf	___lmul@multiplicand
   726  018F  22CF               	fcall	___lmul
   727  0190  0020               	movlb	0	; select bank0
   728  0191  0823               	movf	?___lmul+3,w
   729  0192  00AF               	movwf	___aldiv@dividend+3
   730  0193  0822               	movf	?___lmul+2,w
   731  0194  00AE               	movwf	___aldiv@dividend+2
   732  0195  0821               	movf	?___lmul+1,w
   733  0196  00AD               	movwf	___aldiv@dividend+1
   734  0197  0820               	movf	?___lmul,w
   735  0198  00AC               	movwf	___aldiv@dividend
   736  0199  2219               	fcall	___aldiv
   737  019A  0020               	movlb	0	; select bank0
   738  019B  0829               	movf	?___aldiv+1,w
   739  019C  01D5               	clrf	main@changeValue+1
   740  019D  07D5               	addwf	main@changeValue+1,f
   741  019E  0828               	movf	?___aldiv,w
   742  019F  01D4               	clrf	main@changeValue
   743  01A0  07D4               	addwf	main@changeValue,f
   744                           
   745                           ;main.c: 181: lowerBallSensorThresholdValue = steadyStateValue - changeValue;
   746  01A1  0954               	comf	main@changeValue,w
   747  01A2  00CE               	movwf	??_main
   748  01A3  0955               	comf	main@changeValue+1,w
   749  01A4  00CF               	movwf	??_main+1
   750  01A5  0ACE               	incf	??_main,f
   751  01A6  1903               	skipnz
   752  01A7  0ACF               	incf	??_main+1,f
   753  01A8  085D               	movf	main@steadyStateValue,w
   754  01A9  074E               	addwf	??_main,w
   755  01AA  00D9               	movwf	main@lowerBallSensorThresholdValue
   756  01AB  085E               	movf	main@steadyStateValue+1,w
   757  01AC  3D4F               	addwfc	??_main+1,w
   758  01AD  00DA               	movwf	main@lowerBallSensorThresholdValue+1
   759                           
   760                           ;main.c: 182: int hysterysis = ((long)steadyStateValue * 8)/100;
   761  01AE  3000               	movlw	0
   762  01AF  00AB               	movwf	___aldiv@divisor+3
   763  01B0  3000               	movlw	0
   764  01B1  00AA               	movwf	___aldiv@divisor+2
   765  01B2  3000               	movlw	0
   766  01B3  00A9               	movwf	___aldiv@divisor+1
   767  01B4  3064               	movlw	100
   768  01B5  00A8               	movwf	___aldiv@divisor
   769  01B6  085D               	movf	main@steadyStateValue,w
   770  01B7  00CE               	movwf	??_main
   771  01B8  085E               	movf	main@steadyStateValue+1,w
   772  01B9  00CF               	movwf	??_main+1
   773  01BA  3000               	movlw	0
   774  01BB  1BCF               	btfsc	??_main+1,7
   775  01BC  30FF               	movlw	255
   776  01BD  00D0               	movwf	??_main+2
   777  01BE  00D1               	movwf	??_main+3
   778  01BF  3003               	movlw	3
   779  01C0                     u965:	
   780  01C0  35CE               	lslf	??_main,f
   781  01C1  0DCF               	rlf	??_main+1,f
   782  01C2  0DD0               	rlf	??_main+2,f
   783  01C3  0DD1               	rlf	??_main+3,f
   784  01C4  0B89               	decfsz	9,f
   785  01C5  29C0               	goto	u965
   786  01C6  0851               	movf	??_main+3,w
   787  01C7  00AF               	movwf	___aldiv@dividend+3
   788  01C8  0850               	movf	??_main+2,w
   789  01C9  00AE               	movwf	___aldiv@dividend+2
   790  01CA  084F               	movf	??_main+1,w
   791  01CB  00AD               	movwf	___aldiv@dividend+1
   792  01CC  084E               	movf	??_main,w
   793  01CD  00AC               	movwf	___aldiv@dividend
   794  01CE  2219               	fcall	___aldiv
   795  01CF  0020               	movlb	0	; select bank0
   796  01D0  0829               	movf	?___aldiv+1,w
   797  01D1  01D7               	clrf	main@hysterysis+1
   798  01D2  07D7               	addwf	main@hysterysis+1,f
   799  01D3  0828               	movf	?___aldiv,w
   800  01D4  01D6               	clrf	main@hysterysis
   801  01D5  07D6               	addwf	main@hysterysis,f
   802                           
   803                           ;main.c: 183: upperBallSensorThresholdValue = lowerBallSensorThresholdValue + hysterysis;
   804  01D6  0856               	movf	main@hysterysis,w
   805  01D7  0759               	addwf	main@lowerBallSensorThresholdValue,w
   806  01D8  00D2               	movwf	main@upperBallSensorThresholdValue
   807  01D9  0857               	movf	main@hysterysis+1,w
   808  01DA  3D5A               	addwfc	main@lowerBallSensorThresholdValue+1,w
   809  01DB  00D3               	movwf	main@upperBallSensorThresholdValue+1
   810                           
   811                           ;main.c: 184: initInterrupt();
   812  01DC  2341               	fcall	_initInterrupt
   813                           
   814                           ;main.c: 190: switch (state)
   815  01DD  2A07               	goto	l87
   816  01DE                     l1279:	
   817                           ;main.c: 191: {
   818                           ;main.c: 192: case offState:
   819                           
   820                           
   821                           ;main.c: 193: if ( value < lowerBallSensorThresholdValue )
   822  01DE  085C               	movf	main@value+1,w
   823  01DF  3A80               	xorlw	128
   824  01E0  00CE               	movwf	??_main
   825  01E1  085A               	movf	main@lowerBallSensorThresholdValue+1,w
   826  01E2  3A80               	xorlw	128
   827  01E3  024E               	subwf	??_main,w
   828  01E4  1D03               	skipz
   829  01E5  29E8               	goto	u975
   830  01E6  0859               	movf	main@lowerBallSensorThresholdValue,w
   831  01E7  025B               	subwf	main@value,w
   832  01E8                     u975:	
   833  01E8  1803               	skipnc
   834  01E9  2A07               	goto	l87
   835                           
   836                           ;main.c: 194: {
   837                           ;main.c: 195: LATAbits.LATA5 = 0;
   838  01EA  0022               	movlb	2	; select bank2
   839  01EB  128C               	bcf	12,5	;volatile
   840                           
   841                           ;main.c: 196: LATAbits.LATA0 = 0;
   842  01EC  100C               	bcf	12,0	;volatile
   843                           
   844                           ;main.c: 197: _delay_ms(10);
   845  01ED  300A               	movlw	10
   846  01EE  00F3               	movwf	__delay_ms@ms
   847  01EF  3000               	movlw	0
   848  01F0  00F4               	movwf	__delay_ms@ms+1
   849  01F1  231A               	fcall	__delay_ms
   850                           
   851                           ;main.c: 198: state = onState;
   852  01F2  0020               	movlb	0	; select bank0
   853  01F3  01D8               	clrf	main@state
   854  01F4  0AD8               	incf	main@state,f
   855                           
   856                           ;main.c: 199: }
   857                           ;main.c: 200: break;
   858  01F5  2A07               	goto	l87
   859  01F6                     l1287:	
   860                           ;main.c: 201: case onState:
   861                           
   862                           
   863                           ;main.c: 202: if ( value > upperBallSensorThresholdValue)
   864  01F6  0853               	movf	main@upperBallSensorThresholdValue+1,w
   865  01F7  3A80               	xorlw	128
   866  01F8  00CE               	movwf	??_main
   867  01F9  085C               	movf	main@value+1,w
   868  01FA  3A80               	xorlw	128
   869  01FB  024E               	subwf	??_main,w
   870  01FC  1D03               	skipz
   871  01FD  2A00               	goto	u985
   872  01FE  085B               	movf	main@value,w
   873  01FF  0252               	subwf	main@upperBallSensorThresholdValue,w
   874  0200                     u985:	
   875  0200  1803               	skipnc
   876  0201  2A07               	goto	l87
   877                           
   878                           ;main.c: 203: {
   879                           ;main.c: 204: LATAbits.LATA5 = 1;
   880  0202  0022               	movlb	2	; select bank2
   881  0203  168C               	bsf	12,5	;volatile
   882                           
   883                           ;main.c: 205: LATAbits.LATA0 = 1;
   884  0204  140C               	bsf	12,0	;volatile
   885                           
   886                           ;main.c: 206: state = offState;
   887  0205  0020               	movlb	0	; select bank0
   888  0206  01D8               	clrf	main@state
   889  0207                     l87:	
   890                           ;main.c: 186: while (1)
   891                           
   892                           ;main.c: 209: }
   893                           
   894                           ;main.c: 207: }
   895                           ;main.c: 208: break;
   896                           
   897  0207  0064               	clrwdt	;# 
   898                           
   899                           ;main.c: 189: value = getValue();
   900  0208  229B               	fcall	_getValue
   901  0209  0874               	movf	?_getValue+1,w
   902  020A  0020               	movlb	0	; select bank0
   903  020B  01DC               	clrf	main@value+1
   904  020C  07DC               	addwf	main@value+1,f
   905  020D  0873               	movf	?_getValue,w
   906  020E  01DB               	clrf	main@value
   907  020F  07DB               	addwf	main@value,f
   908  0210  0858               	movf	main@state,w
   909                           
   910                           ; Switch size 1, requested type "space"
   911                           ; Number of cases is 2, Range of values is 0 to 1
   912                           ; switch strategies available:
   913                           ; Name         Instructions Cycles
   914                           ; simple_byte            7     4 (average)
   915                           ; direct_byte           10     6 (fixed)
   916                           ; jumptable            260     6 (fixed)
   917                           ;	Chosen strategy is simple_byte
   918  0211  3A00               	xorlw	0	; case 0
   919  0212  1903               	skipnz
   920  0213  29DE               	goto	l1279
   921  0214  3A01               	xorlw	1	; case 1
   922  0215  1903               	skipnz
   923  0216  29F6               	goto	l1287
   924  0217  2A07               	goto	l87
   925  0218  2A07               	goto	l87
   926  0219                     __end_of_main:	
   927                           
   928                           	psect	text1
   929  0341                     __ptext1:	
   930 ;; *************** function _initInterrupt *****************
   931 ;; Defined at:
   932 ;;		line 7 in file "interrupt.c"
   933 ;; Parameters:    Size  Location     Type
   934 ;;		None
   935 ;; Auto vars:     Size  Location     Type
   936 ;;		None
   937 ;; Return value:  Size  Location     Type
   938 ;;		None               void
   939 ;; Registers used:
   940 ;;		wreg, status,2, status,0
   941 ;; Tracked objects:
   942 ;;		On entry : 0/0
   943 ;;		On exit  : 0/0
   944 ;;		Unchanged: 0/0
   945 ;; Data sizes:     COMMON   BANK0   BANK1
   946 ;;      Params:         0       0       0
   947 ;;      Locals:         0       0       0
   948 ;;      Temps:          0       0       0
   949 ;;      Totals:         0       0       0
   950 ;;Total ram usage:        0 bytes
   951 ;; Hardware stack levels used:    1
   952 ;; Hardware stack levels required when called:    1
   953 ;; This function calls:
   954 ;;		Nothing
   955 ;; This function is called by:
   956 ;;		_main
   957 ;; This function uses a non-reentrant model
   958 ;;
   959                           
   960                           
   961                           ;psect for function _initInterrupt
   962  0341                     _initInterrupt:	
   963                           
   964                           ;interrupt.c: 9: IOCAPbits.IOCAP2 = 1;
   965                           
   966                           ;incstack = 0
   967                           ; Regs used in _initInterrupt: [wreg+status,2+status,0]
   968  0341  0027               	movlb	7	; select bank7
   969  0342  1511               	bsf	17,2	;volatile
   970                           
   971                           ;interrupt.c: 10: IOCANbits.IOCAN2 = 0;
   972  0343  1112               	bcf	18,2	;volatile
   973                           
   974                           ;interrupt.c: 11: IOCAFbits.IOCAF = 0;
   975  0344  30C0               	movlw	-64
   976  0345  0593               	andwf	19,f	;volatile
   977                           
   978                           ;interrupt.c: 12: INTCONbits.IOCIF = 0;
   979  0346  100B               	bcf	11,0	;volatile
   980                           
   981                           ;interrupt.c: 13: INTCONbits.IOCIE = 1;
   982  0347  158B               	bsf	11,3	;volatile
   983                           
   984                           ;interrupt.c: 14: INTCONbits.GIE = 1;
   985  0348  178B               	bsf	11,7	;volatile
   986                           
   987                           ;interrupt.c: 16: INTCONbits.PEIE = 1;
   988  0349  170B               	bsf	11,6	;volatile
   989  034A  0008               	return
   990  034B                     __end_of_initInterrupt:	
   991                           
   992                           	psect	text2
   993  02FF                     __ptext2:	
   994 ;; *************** function _init *****************
   995 ;; Defined at:
   996 ;;		line 44 in file "main.c"
   997 ;; Parameters:    Size  Location     Type
   998 ;;		None
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;		None
  1001 ;; Return value:  Size  Location     Type
  1002 ;;		None               void
  1003 ;; Registers used:
  1004 ;;		wreg, status,2, status,0
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMMON   BANK0   BANK1
  1010 ;;      Params:         0       0       0
  1011 ;;      Locals:         0       0       0
  1012 ;;      Temps:          0       0       0
  1013 ;;      Totals:         0       0       0
  1014 ;;Total ram usage:        0 bytes
  1015 ;; Hardware stack levels used:    1
  1016 ;; Hardware stack levels required when called:    1
  1017 ;; This function calls:
  1018 ;;		Nothing
  1019 ;; This function is called by:
  1020 ;;		_main
  1021 ;; This function uses a non-reentrant model
  1022 ;;
  1023                           
  1024                           
  1025                           ;psect for function _init
  1026  02FF                     _init:	
  1027                           
  1028                           ;main.c: 46: WDTCONbits.WDTPS = 0b01001;
  1029                           
  1030                           ;incstack = 0
  1031                           ; Regs used in _init: [wreg+status,2+status,0]
  1032  02FF  0021               	movlb	1	; select bank1
  1033  0300  0817               	movf	23,w	;volatile
  1034  0301  39C1               	andlw	-63
  1035  0302  3812               	iorlw	18
  1036  0303  0097               	movwf	23	;volatile
  1037                           
  1038                           ;main.c: 47: OSCCON=0x70;
  1039  0304  3070               	movlw	112
  1040  0305  0099               	movwf	25	;volatile
  1041                           
  1042                           ;main.c: 48: TRISAbits.TRISA5 = 0;
  1043  0306  128C               	bcf	12,5	;volatile
  1044                           
  1045                           ;main.c: 49: LATAbits.LATA5 = 1;
  1046  0307  0022               	movlb	2	; select bank2
  1047  0308  168C               	bsf	12,5	;volatile
  1048                           
  1049                           ;main.c: 50: ANSELAbits.ANSA0 = 0;
  1050  0309  0023               	movlb	3	; select bank3
  1051  030A  100C               	bcf	12,0	;volatile
  1052                           
  1053                           ;main.c: 51: TRISAbits.TRISA0 = 0;
  1054  030B  0021               	movlb	1	; select bank1
  1055  030C  100C               	bcf	12,0	;volatile
  1056                           
  1057                           ;main.c: 52: LATAbits.LATA0 = 1;
  1058  030D  0022               	movlb	2	; select bank2
  1059  030E  140C               	bsf	12,0	;volatile
  1060                           
  1061                           ;main.c: 55: ANSELAbits.ANSA2 = 0;
  1062  030F  0023               	movlb	3	; select bank3
  1063  0310  110C               	bcf	12,2	;volatile
  1064                           
  1065                           ;main.c: 56: TRISAbits.TRISA2 = 1;
  1066  0311  0021               	movlb	1	; select bank1
  1067  0312  150C               	bsf	12,2	;volatile
  1068                           
  1069                           ;main.c: 58: ANSELAbits.ANSA1 = 0;
  1070  0313  0023               	movlb	3	; select bank3
  1071  0314  108C               	bcf	12,1	;volatile
  1072                           
  1073                           ;main.c: 59: TRISAbits.TRISA1 = 0;
  1074  0315  0021               	movlb	1	; select bank1
  1075  0316  108C               	bcf	12,1	;volatile
  1076                           
  1077                           ;main.c: 60: LATAbits.LATA1 = 0;
  1078  0317  0022               	movlb	2	; select bank2
  1079  0318  108C               	bcf	12,1	;volatile
  1080  0319  0008               	return
  1081  031A                     __end_of_init:	
  1082                           
  1083                           	psect	text3
  1084  0031                     __ptext3:	
  1085 ;; *************** function _calibrate *****************
  1086 ;; Defined at:
  1087 ;;		line 86 in file "main.c"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;		None
  1090 ;; Auto vars:     Size  Location     Type
  1091 ;;  averageVal      4   34[BANK0 ] long 
  1092 ;;  cumulativeVa    4   30[BANK0 ] long 
  1093 ;;  inputVal        2   40[BANK0 ] int 
  1094 ;;  i               2   38[BANK0 ] int 
  1095 ;;  lastVal         2   28[BANK0 ] int 
  1096 ;; Return value:  Size  Location     Type
  1097 ;;                  2   22[BANK0 ] int 
  1098 ;; Registers used:
  1099 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1100 ;; Tracked objects:
  1101 ;;		On entry : 0/0
  1102 ;;		On exit  : 0/0
  1103 ;;		Unchanged: 0/0
  1104 ;; Data sizes:     COMMON   BANK0   BANK1
  1105 ;;      Params:         0       2       0
  1106 ;;      Locals:         0      14       0
  1107 ;;      Temps:          0       4       0
  1108 ;;      Totals:         0      20       0
  1109 ;;Total ram usage:       20 bytes
  1110 ;; Hardware stack levels used:    1
  1111 ;; Hardware stack levels required when called:    2
  1112 ;; This function calls:
  1113 ;;		___aldiv
  1114 ;;		__delay_ms
  1115 ;;		_abs
  1116 ;;		_getValue
  1117 ;; This function is called by:
  1118 ;;		_main
  1119 ;; This function uses a non-reentrant model
  1120 ;;
  1121                           
  1122                           
  1123                           ;psect for function _calibrate
  1124  0031                     _calibrate:	
  1125                           
  1126                           ;main.c: 91: int i;
  1127                           ;main.c: 92: long cumulativeVal = 0;
  1128                           
  1129                           ;incstack = 0
  1130                           ; Regs used in _calibrate: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1131  0031  3000               	movlw	0
  1132  0032  0020               	movlb	0	; select bank0
  1133  0033  00C1               	movwf	calibrate@cumulativeVal+3
  1134  0034  3000               	movlw	0
  1135  0035  00C0               	movwf	calibrate@cumulativeVal+2
  1136  0036  3000               	movlw	0
  1137  0037  00BF               	movwf	calibrate@cumulativeVal+1
  1138  0038  3000               	movlw	0
  1139  0039  00BE               	movwf	calibrate@cumulativeVal
  1140                           
  1141                           ;main.c: 93: long averageVal;
  1142                           ;main.c: 94: int inputVal;
  1143                           ;main.c: 95: int lastVal = 0;
  1144  003A  01BC               	clrf	calibrate@lastVal
  1145  003B  01BD               	clrf	calibrate@lastVal+1
  1146                           
  1147                           ;main.c: 116: break;
  1148  003C  2842               	goto	l72
  1149  003D                     l1199:	
  1150                           
  1151                           ;main.c: 117: }
  1152                           ;main.c: 118: }
  1153                           ;main.c: 119: }
  1154                           ;main.c: 120: _delay_ms(20);
  1155  003D  3014               	movlw	20
  1156  003E  00F3               	movwf	__delay_ms@ms
  1157  003F  3000               	movlw	0
  1158  0040  00F4               	movwf	__delay_ms@ms+1
  1159  0041  231A               	fcall	__delay_ms
  1160  0042                     l72:	
  1161                           ;main.c: 100: while (1)
  1162                           
  1163  0042  0064               	clrwdt	;# 
  1164                           
  1165                           ;main.c: 103: inputVal = getValue();
  1166  0043  229B               	fcall	_getValue
  1167  0044  0874               	movf	?_getValue+1,w
  1168  0045  0020               	movlb	0	; select bank0
  1169  0046  01C9               	clrf	calibrate@inputVal+1
  1170  0047  07C9               	addwf	calibrate@inputVal+1,f
  1171  0048  0873               	movf	?_getValue,w
  1172  0049  01C8               	clrf	calibrate@inputVal
  1173  004A  07C8               	addwf	calibrate@inputVal,f
  1174                           
  1175                           ;main.c: 104: if ( (inputVal < 1200)
  1176                           ;main.c: 105: && (inputVal > 300) )
  1177  004B  0849               	movf	calibrate@inputVal+1,w
  1178  004C  3A80               	xorlw	128
  1179  004D  00FF               	movwf	127
  1180  004E  3084               	movlw	132
  1181  004F  027F               	subwf	127,w
  1182  0050  1D03               	skipz
  1183  0051  2854               	goto	u835
  1184  0052  30B0               	movlw	176
  1185  0053  0248               	subwf	calibrate@inputVal,w
  1186  0054                     u835:	
  1187  0054  1803               	skipnc
  1188  0055  283D               	goto	l1199
  1189  0056  0020               	movlb	0	; select bank0
  1190  0057  0849               	movf	calibrate@inputVal+1,w
  1191  0058  3A80               	xorlw	128
  1192  0059  00FF               	movwf	127
  1193  005A  3081               	movlw	129
  1194  005B  027F               	subwf	127,w
  1195  005C  1D03               	skipz
  1196  005D  2860               	goto	u845
  1197  005E  302D               	movlw	45
  1198  005F  0248               	subwf	calibrate@inputVal,w
  1199  0060                     u845:	
  1200  0060  1C03               	skipc
  1201  0061  283D               	goto	l1199
  1202                           
  1203                           ;main.c: 106: {
  1204                           ;main.c: 107: lastVal = inputVal;
  1205  0062  0020               	movlb	0	; select bank0
  1206  0063  0849               	movf	calibrate@inputVal+1,w
  1207  0064  01BD               	clrf	calibrate@lastVal+1
  1208  0065  07BD               	addwf	calibrate@lastVal+1,f
  1209  0066  0848               	movf	calibrate@inputVal,w
  1210  0067  01BC               	clrf	calibrate@lastVal
  1211  0068  07BC               	addwf	calibrate@lastVal,f
  1212                           
  1213                           ;main.c: 108: inputVal = getValue();
  1214  0069  229B               	fcall	_getValue
  1215  006A  0874               	movf	?_getValue+1,w
  1216  006B  0020               	movlb	0	; select bank0
  1217  006C  01C9               	clrf	calibrate@inputVal+1
  1218  006D  07C9               	addwf	calibrate@inputVal+1,f
  1219  006E  0873               	movf	?_getValue,w
  1220  006F  01C8               	clrf	calibrate@inputVal
  1221  0070  07C8               	addwf	calibrate@inputVal,f
  1222                           
  1223                           ;main.c: 109: if ( (inputVal < 1200)
  1224                           ;main.c: 110: && (inputVal > 300) )
  1225  0071  0849               	movf	calibrate@inputVal+1,w
  1226  0072  3A80               	xorlw	128
  1227  0073  00FF               	movwf	127
  1228  0074  3084               	movlw	132
  1229  0075  027F               	subwf	127,w
  1230  0076  1D03               	skipz
  1231  0077  287A               	goto	u855
  1232  0078  30B0               	movlw	176
  1233  0079  0248               	subwf	calibrate@inputVal,w
  1234  007A                     u855:	
  1235  007A  1803               	skipnc
  1236  007B  283D               	goto	l1199
  1237  007C  0020               	movlb	0	; select bank0
  1238  007D  0849               	movf	calibrate@inputVal+1,w
  1239  007E  3A80               	xorlw	128
  1240  007F  00FF               	movwf	127
  1241  0080  3081               	movlw	129
  1242  0081  027F               	subwf	127,w
  1243  0082  1D03               	skipz
  1244  0083  2886               	goto	u865
  1245  0084  302D               	movlw	45
  1246  0085  0248               	subwf	calibrate@inputVal,w
  1247  0086                     u865:	
  1248  0086  1C03               	skipc
  1249  0087  283D               	goto	l1199
  1250                           
  1251                           ;main.c: 111: {
  1252                           ;main.c: 112: if ( abs( inputVal - lastVal ) < 10 )
  1253  0088  0020               	movlb	0	; select bank0
  1254  0089  093C               	comf	calibrate@lastVal,w
  1255  008A  00B8               	movwf	??_calibrate
  1256  008B  093D               	comf	calibrate@lastVal+1,w
  1257  008C  00B9               	movwf	??_calibrate+1
  1258  008D  0AB8               	incf	??_calibrate,f
  1259  008E  1903               	skipnz
  1260  008F  0AB9               	incf	??_calibrate+1,f
  1261  0090  0848               	movf	calibrate@inputVal,w
  1262  0091  0738               	addwf	??_calibrate,w
  1263  0092  00F3               	movwf	abs@a
  1264  0093  0849               	movf	calibrate@inputVal+1,w
  1265  0094  3D39               	addwfc	??_calibrate+1,w
  1266  0095  00F4               	movwf	abs@a+1
  1267  0096  2333               	fcall	_abs
  1268  0097  0874               	movf	?_abs+1,w
  1269  0098  3A80               	xorlw	128
  1270  0099  00FF               	movwf	127
  1271  009A  3080               	movlw	128
  1272  009B  027F               	subwf	127,w
  1273  009C  1D03               	skipz
  1274  009D  28A0               	goto	u875
  1275  009E  300A               	movlw	10
  1276  009F  0273               	subwf	?_abs,w
  1277  00A0                     u875:	
  1278  00A0  1803               	skipnc
  1279  00A1  283D               	goto	l1199
  1280                           
  1281                           ;main.c: 113: {
  1282                           ;main.c: 114: cumulativeVal = inputVal;
  1283  00A2  0020               	movlb	0	; select bank0
  1284  00A3  0848               	movf	calibrate@inputVal,w
  1285  00A4  00BE               	movwf	calibrate@cumulativeVal
  1286  00A5  0849               	movf	calibrate@inputVal+1,w
  1287  00A6  00BF               	movwf	calibrate@cumulativeVal+1
  1288  00A7  0D89               	rlf	9,f
  1289  00A8  3B89               	subwfb	9,f
  1290  00A9  0989               	comf	9,f
  1291  00AA  00C0               	movwf	calibrate@cumulativeVal+2
  1292  00AB  00C1               	movwf	calibrate@cumulativeVal+3
  1293                           
  1294                           ;main.c: 115: averageVal = inputVal;
  1295  00AC  0848               	movf	calibrate@inputVal,w
  1296  00AD  00C2               	movwf	calibrate@averageVal
  1297  00AE  0849               	movf	calibrate@inputVal+1,w
  1298  00AF  00C3               	movwf	calibrate@averageVal+1
  1299  00B0  0D89               	rlf	9,f
  1300  00B1  3B89               	subwfb	9,f
  1301  00B2  0989               	comf	9,f
  1302  00B3  00C4               	movwf	calibrate@averageVal+2
  1303  00B4  00C5               	movwf	calibrate@averageVal+3
  1304                           
  1305                           ;main.c: 121: }
  1306                           ;main.c: 124: i = 1;
  1307  00B5  3001               	movlw	1
  1308  00B6  0020               	movlb	0	; select bank0
  1309  00B7  00C6               	movwf	calibrate@i
  1310  00B8  3000               	movlw	0
  1311  00B9  00C7               	movwf	calibrate@i+1
  1312  00BA                     l1213:	
  1313                           ;main.c: 125: while (i < 10)
  1314                           
  1315  00BA  0020               	movlb	0	; select bank0
  1316  00BB  0847               	movf	calibrate@i+1,w
  1317  00BC  3A80               	xorlw	128
  1318  00BD  00FF               	movwf	127
  1319  00BE  3080               	movlw	128
  1320  00BF  027F               	subwf	127,w
  1321  00C0  1D03               	skipz
  1322  00C1  28C4               	goto	u895
  1323  00C2  300A               	movlw	10
  1324  00C3  0246               	subwf	calibrate@i,w
  1325  00C4                     u895:	
  1326  00C4  1803               	btfsc	3,0
  1327  00C5  2920               	goto	l1215
  1328                           
  1329                           ;main.c: 126: {
  1330                           ;main.c: 127: inputVal = getValue();
  1331  00C6  229B               	fcall	_getValue
  1332  00C7  0874               	movf	?_getValue+1,w
  1333  00C8  0020               	movlb	0	; select bank0
  1334  00C9  01C9               	clrf	calibrate@inputVal+1
  1335  00CA  07C9               	addwf	calibrate@inputVal+1,f
  1336  00CB  0873               	movf	?_getValue,w
  1337  00CC  01C8               	clrf	calibrate@inputVal
  1338  00CD  07C8               	addwf	calibrate@inputVal,f
  1339                           
  1340                           ;main.c: 128: if ( abs( inputVal - averageVal ) < 10 )
  1341  00CE  0942               	comf	calibrate@averageVal,w
  1342  00CF  00B8               	movwf	??_calibrate
  1343  00D0  0943               	comf	calibrate@averageVal+1,w
  1344  00D1  00B9               	movwf	??_calibrate+1
  1345  00D2  0AB8               	incf	??_calibrate,f
  1346  00D3  1903               	skipnz
  1347  00D4  0AB9               	incf	??_calibrate+1,f
  1348  00D5  0848               	movf	calibrate@inputVal,w
  1349  00D6  0738               	addwf	??_calibrate,w
  1350  00D7  00F3               	movwf	abs@a
  1351  00D8  0849               	movf	calibrate@inputVal+1,w
  1352  00D9  3D39               	addwfc	??_calibrate+1,w
  1353  00DA  00F4               	movwf	abs@a+1
  1354  00DB  2333               	fcall	_abs
  1355  00DC  0874               	movf	?_abs+1,w
  1356  00DD  3A80               	xorlw	128
  1357  00DE  00FF               	movwf	127
  1358  00DF  3080               	movlw	128
  1359  00E0  027F               	subwf	127,w
  1360  00E1  1D03               	skipz
  1361  00E2  28E5               	goto	u885
  1362  00E3  300A               	movlw	10
  1363  00E4  0273               	subwf	?_abs,w
  1364  00E5                     u885:	
  1365  00E5  1803               	skipnc
  1366  00E6  291A               	goto	l80
  1367                           
  1368                           ;main.c: 129: {
  1369                           ;main.c: 130: cumulativeVal += inputVal;
  1370  00E7  0020               	movlb	0	; select bank0
  1371  00E8  0848               	movf	calibrate@inputVal,w
  1372  00E9  00B8               	movwf	??_calibrate
  1373  00EA  0849               	movf	calibrate@inputVal+1,w
  1374  00EB  00B9               	movwf	??_calibrate+1
  1375  00EC  3000               	movlw	0
  1376  00ED  1BB9               	btfsc	??_calibrate+1,7
  1377  00EE  30FF               	movlw	255
  1378  00EF  00BA               	movwf	??_calibrate+2
  1379  00F0  00BB               	movwf	??_calibrate+3
  1380  00F1  0838               	movf	??_calibrate,w
  1381  00F2  07BE               	addwf	calibrate@cumulativeVal,f
  1382  00F3  0839               	movf	??_calibrate+1,w
  1383  00F4  3DBF               	addwfc	calibrate@cumulativeVal+1,f
  1384  00F5  083A               	movf	??_calibrate+2,w
  1385  00F6  3DC0               	addwfc	calibrate@cumulativeVal+2,f
  1386  00F7  083B               	movf	??_calibrate+3,w
  1387  00F8  3DC1               	addwfc	calibrate@cumulativeVal+3,f
  1388                           
  1389                           ;main.c: 131: averageVal = cumulativeVal / (i + 1);
  1390  00F9  0846               	movf	calibrate@i,w
  1391  00FA  3E01               	addlw	1
  1392  00FB  00A8               	movwf	___aldiv@divisor
  1393  00FC  3000               	movlw	0
  1394  00FD  3D47               	addwfc	calibrate@i+1,w
  1395  00FE  00A9               	movwf	___aldiv@divisor+1
  1396  00FF  01AA               	clrf	___aldiv@divisor+2
  1397  0100  1BA9               	btfsc	___aldiv@divisor+1,7
  1398  0101  03AA               	decf	___aldiv@divisor+2,f
  1399  0102  082A               	movf	___aldiv@divisor+2,w
  1400  0103  00AB               	movwf	___aldiv@divisor+3
  1401  0104  0841               	movf	calibrate@cumulativeVal+3,w
  1402  0105  00AF               	movwf	___aldiv@dividend+3
  1403  0106  0840               	movf	calibrate@cumulativeVal+2,w
  1404  0107  00AE               	movwf	___aldiv@dividend+2
  1405  0108  083F               	movf	calibrate@cumulativeVal+1,w
  1406  0109  00AD               	movwf	___aldiv@dividend+1
  1407  010A  083E               	movf	calibrate@cumulativeVal,w
  1408  010B  00AC               	movwf	___aldiv@dividend
  1409  010C  2219               	fcall	___aldiv
  1410  010D  0020               	movlb	0	; select bank0
  1411  010E  082B               	movf	?___aldiv+3,w
  1412  010F  00C5               	movwf	calibrate@averageVal+3
  1413  0110  082A               	movf	?___aldiv+2,w
  1414  0111  00C4               	movwf	calibrate@averageVal+2
  1415  0112  0829               	movf	?___aldiv+1,w
  1416  0113  00C3               	movwf	calibrate@averageVal+1
  1417  0114  0828               	movf	?___aldiv,w
  1418  0115  00C2               	movwf	calibrate@averageVal
  1419                           
  1420                           ;main.c: 132: i ++;
  1421  0116  3001               	movlw	1
  1422  0117  07C6               	addwf	calibrate@i,f
  1423  0118  3000               	movlw	0
  1424  0119  3DC7               	addwfc	calibrate@i+1,f
  1425  011A                     l80:	
  1426                           
  1427                           ;main.c: 133: }
  1428                           ;main.c: 134: _delay_ms(20);
  1429  011A  3014               	movlw	20
  1430  011B  00F3               	movwf	__delay_ms@ms
  1431  011C  3000               	movlw	0
  1432  011D  00F4               	movwf	__delay_ms@ms+1
  1433  011E  231A               	fcall	__delay_ms
  1434  011F  28BA               	goto	l1213
  1435  0120                     l1215:	
  1436                           
  1437                           ;main.c: 135: }
  1438                           ;main.c: 140: for (i = 0; i < 2; i ++)
  1439  0120  0020               	movlb	0	; select bank0
  1440  0121  01C6               	clrf	calibrate@i
  1441  0122  01C7               	clrf	calibrate@i+1
  1442  0123  0847               	movf	calibrate@i+1,w
  1443  0124  3A80               	xorlw	128
  1444  0125  00FF               	movwf	127
  1445  0126  3080               	movlw	128
  1446  0127  027F               	subwf	127,w
  1447  0128  1D03               	skipz
  1448  0129  292C               	goto	u905
  1449  012A  3002               	movlw	2
  1450  012B  0246               	subwf	calibrate@i,w
  1451  012C                     u905:	
  1452  012C  1803               	btfsc	3,0
  1453  012D  2950               	goto	l1231
  1454  012E                     l82:	
  1455  012E  0064               	clrwdt	;# 
  1456                           
  1457                           ;main.c: 143: LATAbits.LATA5 = 0;
  1458  012F  0022               	movlb	2	; select bank2
  1459  0130  128C               	bcf	12,5	;volatile
  1460                           
  1461                           ;main.c: 144: LATAbits.LATA0 = 0;
  1462  0131  100C               	bcf	12,0	;volatile
  1463                           
  1464                           ;main.c: 145: _delay_ms(200);
  1465  0132  30C8               	movlw	200
  1466  0133  00F3               	movwf	__delay_ms@ms
  1467  0134  3000               	movlw	0
  1468  0135  00F4               	movwf	__delay_ms@ms+1
  1469  0136  231A               	fcall	__delay_ms
  1470  0137  0064               	clrwdt	;# 
  1471                           
  1472                           ;main.c: 148: LATAbits.LATA5= 1;
  1473  0138  0022               	movlb	2	; select bank2
  1474  0139  168C               	bsf	12,5	;volatile
  1475                           
  1476                           ;main.c: 149: LATAbits.LATA0 = 1;
  1477  013A  140C               	bsf	12,0	;volatile
  1478                           
  1479                           ;main.c: 150: _delay_ms(200);
  1480  013B  30C8               	movlw	200
  1481  013C  00F3               	movwf	__delay_ms@ms
  1482  013D  3000               	movlw	0
  1483  013E  00F4               	movwf	__delay_ms@ms+1
  1484  013F  231A               	fcall	__delay_ms
  1485  0140  3001               	movlw	1
  1486  0141  0020               	movlb	0	; select bank0
  1487  0142  07C6               	addwf	calibrate@i,f
  1488  0143  3000               	movlw	0
  1489  0144  3DC7               	addwfc	calibrate@i+1,f
  1490  0145  0847               	movf	calibrate@i+1,w
  1491  0146  3A80               	xorlw	128
  1492  0147  00FF               	movwf	127
  1493  0148  3080               	movlw	128
  1494  0149  027F               	subwf	127,w
  1495  014A  1D03               	skipz
  1496  014B  294E               	goto	u915
  1497  014C  3002               	movlw	2
  1498  014D  0246               	subwf	calibrate@i,w
  1499  014E                     u915:	
  1500  014E  1C03               	skipc
  1501  014F  292E               	goto	l82
  1502  0150                     l1231:	
  1503                           
  1504                           ;main.c: 151: }
  1505                           ;main.c: 153: return averageVal;
  1506  0150  0020               	movlb	0	; select bank0
  1507  0151  0843               	movf	calibrate@averageVal+1,w
  1508  0152  01B7               	clrf	?_calibrate+1
  1509  0153  07B7               	addwf	?_calibrate+1,f
  1510  0154  0842               	movf	calibrate@averageVal,w
  1511  0155  01B6               	clrf	?_calibrate
  1512  0156  07B6               	addwf	?_calibrate,f
  1513  0157  0008               	return
  1514  0158                     __end_of_calibrate:	
  1515                           
  1516                           	psect	text4
  1517  029B                     __ptext4:	
  1518 ;; *************** function _getValue *****************
  1519 ;; Defined at:
  1520 ;;		line 64 in file "main.c"
  1521 ;; Parameters:    Size  Location     Type
  1522 ;;		None
  1523 ;; Auto vars:     Size  Location     Type
  1524 ;;  val             2    7[COMMON] int 
  1525 ;; Return value:  Size  Location     Type
  1526 ;;                  2    3[COMMON] int 
  1527 ;; Registers used:
  1528 ;;		wreg, status,2, status,0
  1529 ;; Tracked objects:
  1530 ;;		On entry : 0/0
  1531 ;;		On exit  : 0/0
  1532 ;;		Unchanged: 0/0
  1533 ;; Data sizes:     COMMON   BANK0   BANK1
  1534 ;;      Params:         2       0       0
  1535 ;;      Locals:         2       0       0
  1536 ;;      Temps:          2       0       0
  1537 ;;      Totals:         6       0       0
  1538 ;;Total ram usage:        6 bytes
  1539 ;; Hardware stack levels used:    1
  1540 ;; Hardware stack levels required when called:    1
  1541 ;; This function calls:
  1542 ;;		Nothing
  1543 ;; This function is called by:
  1544 ;;		_calibrate
  1545 ;;		_main
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           
  1550                           ;psect for function _getValue
  1551  029B                     _getValue:	
  1552                           
  1553                           ;main.c: 66: int val = 0;
  1554                           
  1555                           ;incstack = 0
  1556                           ; Regs used in _getValue: [wreg+status,2+status,0]
  1557  029B  01F7               	clrf	getValue@val
  1558  029C  01F8               	clrf	getValue@val+1
  1559                           
  1560                           ;main.c: 68: FVRCONbits.ADFVR = 0b10;
  1561  029D  0022               	movlb	2	; select bank2
  1562  029E  0817               	movf	23,w	;volatile
  1563  029F  39FC               	andlw	-4
  1564  02A0  3802               	iorlw	2
  1565  02A1  0097               	movwf	23	;volatile
  1566                           
  1567                           ;main.c: 69: FVRCONbits.FVREN = 1;
  1568  02A2  1797               	bsf	23,7	;volatile
  1569                           
  1570                           ;main.c: 70: ADCON1bits.ADPREF = 0b11;
  1571  02A3  3003               	movlw	3
  1572  02A4  0021               	movlb	1	; select bank1
  1573  02A5  049E               	iorwf	30,f	;volatile
  1574                           
  1575                           ;main.c: 71: ADCON1bits.ADCS = 0b001;
  1576  02A6  081E               	movf	30,w	;volatile
  1577  02A7  398F               	andlw	-113
  1578  02A8  3810               	iorlw	16
  1579  02A9  009E               	movwf	30	;volatile
  1580                           
  1581                           ;main.c: 72: ANSELAbits.ANSA4 = 1;
  1582  02AA  0023               	movlb	3	; select bank3
  1583  02AB  160C               	bsf	12,4	;volatile
  1584                           
  1585                           ;main.c: 73: TRISAbits.TRISA4 = 1;
  1586  02AC  0021               	movlb	1	; select bank1
  1587  02AD  160C               	bsf	12,4	;volatile
  1588                           
  1589                           ;main.c: 74: ADCON0bits.CHS = 3;
  1590  02AE  081D               	movf	29,w	;volatile
  1591  02AF  3983               	andlw	-125
  1592  02B0  380C               	iorlw	12
  1593  02B1  009D               	movwf	29	;volatile
  1594                           
  1595                           ;main.c: 75: ADCON0bits.ADON = 1;
  1596  02B2  141D               	bsf	29,0	;volatile
  1597                           
  1598                           ;main.c: 76: ADCON0bits.GO_nDONE = 1;
  1599  02B3  149D               	bsf	29,1	;volatile
  1600  02B4                     l921:	
  1601                           ;main.c: 77: while (ADCON0bits.GO_nDONE)
  1602                           
  1603  02B4  1C9D               	btfss	29,1	;volatile
  1604  02B5  2ABB               	goto	l923
  1605                           
  1606                           ;main.c: 78: {
  1607                           ;main.c: 79: val ++;
  1608  02B6  3001               	movlw	1
  1609  02B7  07F7               	addwf	getValue@val,f
  1610  02B8  3000               	movlw	0
  1611  02B9  3DF8               	addwfc	getValue@val+1,f
  1612  02BA  2AB4               	goto	l921
  1613  02BB                     l923:	
  1614                           
  1615                           ;main.c: 80: }
  1616                           ;main.c: 81: val = ADRES >> 6;
  1617  02BB  081C               	movf	28,w	;volatile
  1618  02BC  00F6               	movwf	??_getValue+1
  1619  02BD  081B               	movf	27,w	;volatile
  1620  02BE  00F5               	movwf	??_getValue
  1621  02BF  3006               	movlw	6
  1622  02C0                     u455:	
  1623  02C0  36F6               	lsrf	??_getValue+1,f
  1624  02C1  0CF5               	rrf	??_getValue,f
  1625  02C2  0B89               	decfsz	9,f
  1626  02C3  2AC0               	goto	u455
  1627  02C4  0875               	movf	??_getValue,w
  1628  02C5  00F7               	movwf	getValue@val
  1629  02C6  0876               	movf	??_getValue+1,w
  1630  02C7  00F8               	movwf	getValue@val+1
  1631                           
  1632                           ;main.c: 83: return val;
  1633  02C8  0878               	movf	getValue@val+1,w
  1634  02C9  01F4               	clrf	?_getValue+1
  1635  02CA  07F4               	addwf	?_getValue+1,f
  1636  02CB  0877               	movf	getValue@val,w
  1637  02CC  01F3               	clrf	?_getValue
  1638  02CD  07F3               	addwf	?_getValue,f
  1639  02CE  0008               	return
  1640  02CF                     __end_of_getValue:	
  1641                           
  1642                           	psect	text5
  1643  0333                     __ptext5:	
  1644 ;; *************** function _abs *****************
  1645 ;; Defined at:
  1646 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.31\sources\common\abs.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;  a               2    3[COMMON] int 
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;		None
  1651 ;; Return value:  Size  Location     Type
  1652 ;;                  2    3[COMMON] int 
  1653 ;; Registers used:
  1654 ;;		wreg, status,2, status,0
  1655 ;; Tracked objects:
  1656 ;;		On entry : 0/0
  1657 ;;		On exit  : 0/0
  1658 ;;		Unchanged: 0/0
  1659 ;; Data sizes:     COMMON   BANK0   BANK1
  1660 ;;      Params:         2       0       0
  1661 ;;      Locals:         0       0       0
  1662 ;;      Temps:          2       0       0
  1663 ;;      Totals:         4       0       0
  1664 ;;Total ram usage:        4 bytes
  1665 ;; Hardware stack levels used:    1
  1666 ;; Hardware stack levels required when called:    1
  1667 ;; This function calls:
  1668 ;;		Nothing
  1669 ;; This function is called by:
  1670 ;;		_calibrate
  1671 ;; This function uses a non-reentrant model
  1672 ;;
  1673                           
  1674                           
  1675                           ;psect for function _abs
  1676  0333                     _abs:	
  1677                           
  1678                           ;incstack = 0
  1679                           ; Regs used in _abs: [wreg+status,2+status,0]
  1680  0333  1FF4               	btfss	abs@a+1,7
  1681  0334  0008               	return
  1682  0335  0973               	comf	abs@a,w
  1683  0336  00F5               	movwf	??_abs
  1684  0337  0974               	comf	abs@a+1,w
  1685  0338  00F6               	movwf	??_abs+1
  1686  0339  0AF5               	incf	??_abs,f
  1687  033A  1903               	skipnz
  1688  033B  0AF6               	incf	??_abs+1,f
  1689  033C  0875               	movf	??_abs,w
  1690  033D  00F3               	movwf	?_abs
  1691  033E  0876               	movf	??_abs+1,w
  1692  033F  00F4               	movwf	?_abs+1
  1693  0340  0008               	return
  1694  0341                     __end_of_abs:	
  1695                           
  1696                           	psect	text6
  1697  031A                     __ptext6:	
  1698 ;; *************** function __delay_ms *****************
  1699 ;; Defined at:
  1700 ;;		line 32 in file "main.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;  ms              2    3[COMMON] unsigned int 
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;  us              1    7[COMMON] unsigned char 
  1705 ;;  i               1    6[COMMON] unsigned char 
  1706 ;; Return value:  Size  Location     Type
  1707 ;;		None               void
  1708 ;; Registers used:
  1709 ;;		wreg, status,2, status,0
  1710 ;; Tracked objects:
  1711 ;;		On entry : 0/0
  1712 ;;		On exit  : 0/0
  1713 ;;		Unchanged: 0/0
  1714 ;; Data sizes:     COMMON   BANK0   BANK1
  1715 ;;      Params:         2       0       0
  1716 ;;      Locals:         2       0       0
  1717 ;;      Temps:          1       0       0
  1718 ;;      Totals:         5       0       0
  1719 ;;Total ram usage:        5 bytes
  1720 ;; Hardware stack levels used:    1
  1721 ;; Hardware stack levels required when called:    1
  1722 ;; This function calls:
  1723 ;;		Nothing
  1724 ;; This function is called by:
  1725 ;;		_calibrate
  1726 ;;		_main
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           
  1731                           ;psect for function __delay_ms
  1732  031A                     __delay_ms:	
  1733                           
  1734                           ;main.c: 34: unsigned char i;
  1735                           ;main.c: 35: if (ms == 0) return;
  1736                           
  1737                           ;incstack = 0
  1738                           ; Regs used in __delay_ms: [wreg+status,2+status,0]
  1739  031A  0874               	movf	__delay_ms@ms+1,w
  1740  031B  0473               	iorwf	__delay_ms@ms,w
  1741  031C  1903               	btfsc	3,2
  1742  031D  0008               	return
  1743                           
  1744                           ;main.c: 37: i = 4;
  1745                           
  1746                           ;main.c: 36: do {
  1747  031E  3004               	movlw	4
  1748  031F  00F5               	movwf	??__delay_ms
  1749  0320  0875               	movf	??__delay_ms,w
  1750  0321  00F6               	movwf	__delay_ms@i
  1751  0322                     l55:	
  1752                           ;main.c: 38: do {
  1753                           
  1754                           
  1755                           ;main.c: 39: { unsigned char us; us = (164)/(12000000/8000000L)|1; while(--us != 0) cont
      +                          inue; };
  1756  0322  30A5               	movlw	165
  1757  0323  00F5               	movwf	??__delay_ms
  1758  0324  0875               	movf	??__delay_ms,w
  1759  0325  00F7               	movwf	__delay_ms@us
  1760  0326                     l893:	
  1761  0326  3001               	movlw	1
  1762  0327  02F7               	subwf	__delay_ms@us,f
  1763  0328  1D03               	btfss	3,2
  1764  0329  2B26               	goto	l893
  1765                           
  1766                           ;main.c: 40: } while(--i);
  1767  032A  3001               	movlw	1
  1768  032B  02F6               	subwf	__delay_ms@i,f
  1769  032C  1D03               	btfss	3,2
  1770  032D  2B22               	goto	l55
  1771                           
  1772                           ;main.c: 41: } while(--ms);
  1773  032E  3001               	movlw	1
  1774  032F  02F3               	subwf	__delay_ms@ms,f
  1775  0330  3000               	movlw	0
  1776  0331  3BF4               	subwfb	__delay_ms@ms+1,f
  1777  0332  2B1A               	goto	__delay_ms
  1778  0333                     __end_of__delay_ms:	
  1779                           
  1780                           	psect	text7
  1781  0219                     __ptext7:	
  1782 ;; *************** function ___aldiv *****************
  1783 ;; Defined at:
  1784 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.31\sources\common\aldiv.c"
  1785 ;; Parameters:    Size  Location     Type
  1786 ;;  divisor         4    8[BANK0 ] long 
  1787 ;;  dividend        4   12[BANK0 ] long 
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;  quotient        4   18[BANK0 ] long 
  1790 ;;  sign            1   17[BANK0 ] unsigned char 
  1791 ;;  counter         1   16[BANK0 ] unsigned char 
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  4    8[BANK0 ] long 
  1794 ;; Registers used:
  1795 ;;		wreg, status,2, status,0
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMMON   BANK0   BANK1
  1801 ;;      Params:         0       8       0
  1802 ;;      Locals:         0       6       0
  1803 ;;      Temps:          1       0       0
  1804 ;;      Totals:         1      14       0
  1805 ;;Total ram usage:       15 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; Hardware stack levels required when called:    1
  1808 ;; This function calls:
  1809 ;;		Nothing
  1810 ;; This function is called by:
  1811 ;;		_calibrate
  1812 ;;		_main
  1813 ;; This function uses a non-reentrant model
  1814 ;;
  1815                           
  1816                           
  1817                           ;psect for function ___aldiv
  1818  0219                     ___aldiv:	
  1819                           
  1820                           ;incstack = 0
  1821                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1822  0219  0020               	movlb	0	; select bank0
  1823  021A  01B1               	clrf	___aldiv@sign
  1824  021B  1FAB               	btfss	___aldiv@divisor+3,7
  1825  021C  2A2A               	goto	l215
  1826  021D  09A8               	comf	___aldiv@divisor,f
  1827  021E  09A9               	comf	___aldiv@divisor+1,f
  1828  021F  09AA               	comf	___aldiv@divisor+2,f
  1829  0220  09AB               	comf	___aldiv@divisor+3,f
  1830  0221  0AA8               	incf	___aldiv@divisor,f
  1831  0222  1903               	skipnz
  1832  0223  0AA9               	incf	___aldiv@divisor+1,f
  1833  0224  1903               	skipnz
  1834  0225  0AAA               	incf	___aldiv@divisor+2,f
  1835  0226  1903               	skipnz
  1836  0227  0AAB               	incf	___aldiv@divisor+3,f
  1837  0228  01B1               	clrf	___aldiv@sign
  1838  0229  0AB1               	incf	___aldiv@sign,f
  1839  022A                     l215:	
  1840  022A  1FAF               	btfss	___aldiv@dividend+3,7
  1841  022B  2A3B               	goto	l1147
  1842  022C  09AC               	comf	___aldiv@dividend,f
  1843  022D  09AD               	comf	___aldiv@dividend+1,f
  1844  022E  09AE               	comf	___aldiv@dividend+2,f
  1845  022F  09AF               	comf	___aldiv@dividend+3,f
  1846  0230  0AAC               	incf	___aldiv@dividend,f
  1847  0231  1903               	skipnz
  1848  0232  0AAD               	incf	___aldiv@dividend+1,f
  1849  0233  1903               	skipnz
  1850  0234  0AAE               	incf	___aldiv@dividend+2,f
  1851  0235  1903               	skipnz
  1852  0236  0AAF               	incf	___aldiv@dividend+3,f
  1853  0237  3001               	movlw	1
  1854  0238  00F7               	movwf	??___aldiv
  1855  0239  0877               	movf	??___aldiv,w
  1856  023A  06B1               	xorwf	___aldiv@sign,f
  1857  023B                     l1147:	
  1858  023B  3000               	movlw	0
  1859  023C  00B5               	movwf	___aldiv@quotient+3
  1860  023D  3000               	movlw	0
  1861  023E  00B4               	movwf	___aldiv@quotient+2
  1862  023F  3000               	movlw	0
  1863  0240  00B3               	movwf	___aldiv@quotient+1
  1864  0241  3000               	movlw	0
  1865  0242  00B2               	movwf	___aldiv@quotient
  1866  0243  082B               	movf	___aldiv@divisor+3,w
  1867  0244  042A               	iorwf	___aldiv@divisor+2,w
  1868  0245  0429               	iorwf	___aldiv@divisor+1,w
  1869  0246  0428               	iorwf	___aldiv@divisor,w
  1870  0247  1903               	skipnz
  1871  0248  2A84               	goto	l1169
  1872  0249  01B0               	clrf	___aldiv@counter
  1873  024A  0AB0               	incf	___aldiv@counter,f
  1874  024B                     l1155:	
  1875  024B  1BAB               	btfsc	___aldiv@divisor+3,7
  1876  024C  2A59               	goto	l1157
  1877  024D  3001               	movlw	1
  1878  024E                     u765:	
  1879  024E  35A8               	lslf	___aldiv@divisor,f
  1880  024F  0DA9               	rlf	___aldiv@divisor+1,f
  1881  0250  0DAA               	rlf	___aldiv@divisor+2,f
  1882  0251  0DAB               	rlf	___aldiv@divisor+3,f
  1883  0252  0B89               	decfsz	9,f
  1884  0253  2A4E               	goto	u765
  1885  0254  3001               	movlw	1
  1886  0255  00F7               	movwf	??___aldiv
  1887  0256  0877               	movf	??___aldiv,w
  1888  0257  07B0               	addwf	___aldiv@counter,f
  1889  0258  2A4B               	goto	l1155
  1890  0259                     l1157:	
  1891  0259  3001               	movlw	1
  1892  025A                     u785:	
  1893  025A  35B2               	lslf	___aldiv@quotient,f
  1894  025B  0DB3               	rlf	___aldiv@quotient+1,f
  1895  025C  0DB4               	rlf	___aldiv@quotient+2,f
  1896  025D  0DB5               	rlf	___aldiv@quotient+3,f
  1897  025E  0B89               	decfsz	9,f
  1898  025F  2A5A               	goto	u785
  1899  0260  082B               	movf	___aldiv@divisor+3,w
  1900  0261  022F               	subwf	___aldiv@dividend+3,w
  1901  0262  1D03               	skipz
  1902  0263  2A6E               	goto	u795
  1903  0264  082A               	movf	___aldiv@divisor+2,w
  1904  0265  022E               	subwf	___aldiv@dividend+2,w
  1905  0266  1D03               	skipz
  1906  0267  2A6E               	goto	u795
  1907  0268  0829               	movf	___aldiv@divisor+1,w
  1908  0269  022D               	subwf	___aldiv@dividend+1,w
  1909  026A  1D03               	skipz
  1910  026B  2A6E               	goto	u795
  1911  026C  0828               	movf	___aldiv@divisor,w
  1912  026D  022C               	subwf	___aldiv@dividend,w
  1913  026E                     u795:	
  1914  026E  1C03               	skipc
  1915  026F  2A79               	goto	l1165
  1916  0270  0828               	movf	___aldiv@divisor,w
  1917  0271  02AC               	subwf	___aldiv@dividend,f
  1918  0272  0829               	movf	___aldiv@divisor+1,w
  1919  0273  3BAD               	subwfb	___aldiv@dividend+1,f
  1920  0274  082A               	movf	___aldiv@divisor+2,w
  1921  0275  3BAE               	subwfb	___aldiv@dividend+2,f
  1922  0276  082B               	movf	___aldiv@divisor+3,w
  1923  0277  3BAF               	subwfb	___aldiv@dividend+3,f
  1924  0278  1432               	bsf	___aldiv@quotient,0
  1925  0279                     l1165:	
  1926  0279  3001               	movlw	1
  1927  027A                     u805:	
  1928  027A  36AB               	lsrf	___aldiv@divisor+3,f
  1929  027B  0CAA               	rrf	___aldiv@divisor+2,f
  1930  027C  0CA9               	rrf	___aldiv@divisor+1,f
  1931  027D  0CA8               	rrf	___aldiv@divisor,f
  1932  027E  0B89               	decfsz	9,f
  1933  027F  2A7A               	goto	u805
  1934  0280  3001               	movlw	1
  1935  0281  02B0               	subwf	___aldiv@counter,f
  1936  0282  1D03               	btfss	3,2
  1937  0283  2A59               	goto	l1157
  1938  0284                     l1169:	
  1939  0284  0831               	movf	___aldiv@sign,w
  1940  0285  1903               	btfsc	3,2
  1941  0286  2A92               	goto	l1173
  1942  0287  09B2               	comf	___aldiv@quotient,f
  1943  0288  09B3               	comf	___aldiv@quotient+1,f
  1944  0289  09B4               	comf	___aldiv@quotient+2,f
  1945  028A  09B5               	comf	___aldiv@quotient+3,f
  1946  028B  0AB2               	incf	___aldiv@quotient,f
  1947  028C  1903               	skipnz
  1948  028D  0AB3               	incf	___aldiv@quotient+1,f
  1949  028E  1903               	skipnz
  1950  028F  0AB4               	incf	___aldiv@quotient+2,f
  1951  0290  1903               	skipnz
  1952  0291  0AB5               	incf	___aldiv@quotient+3,f
  1953  0292                     l1173:	
  1954  0292  0835               	movf	___aldiv@quotient+3,w
  1955  0293  00AB               	movwf	?___aldiv+3
  1956  0294  0834               	movf	___aldiv@quotient+2,w
  1957  0295  00AA               	movwf	?___aldiv+2
  1958  0296  0833               	movf	___aldiv@quotient+1,w
  1959  0297  00A9               	movwf	?___aldiv+1
  1960  0298  0832               	movf	___aldiv@quotient,w
  1961  0299  00A8               	movwf	?___aldiv
  1962  029A  0008               	return
  1963  029B                     __end_of___aldiv:	
  1964                           
  1965                           	psect	text8
  1966  02CF                     __ptext8:	
  1967 ;; *************** function ___lmul *****************
  1968 ;; Defined at:
  1969 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.31\sources\common\lmul.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;  multiplier      4    0[BANK0 ] unsigned long 
  1972 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;  product         4    3[COMMON] unsigned long 
  1975 ;; Return value:  Size  Location     Type
  1976 ;;                  4    0[BANK0 ] unsigned long 
  1977 ;; Registers used:
  1978 ;;		wreg, status,2, status,0
  1979 ;; Tracked objects:
  1980 ;;		On entry : 0/0
  1981 ;;		On exit  : 0/0
  1982 ;;		Unchanged: 0/0
  1983 ;; Data sizes:     COMMON   BANK0   BANK1
  1984 ;;      Params:         0       8       0
  1985 ;;      Locals:         4       0       0
  1986 ;;      Temps:          0       0       0
  1987 ;;      Totals:         4       8       0
  1988 ;;Total ram usage:       12 bytes
  1989 ;; Hardware stack levels used:    1
  1990 ;; Hardware stack levels required when called:    1
  1991 ;; This function calls:
  1992 ;;		Nothing
  1993 ;; This function is called by:
  1994 ;;		_main
  1995 ;; This function uses a non-reentrant model
  1996 ;;
  1997                           
  1998                           
  1999                           ;psect for function ___lmul
  2000  02CF                     ___lmul:	
  2001                           
  2002                           ;incstack = 0
  2003                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2004  02CF  3000               	movlw	0
  2005  02D0  00F6               	movwf	___lmul@product+3
  2006  02D1  3000               	movlw	0
  2007  02D2  00F5               	movwf	___lmul@product+2
  2008  02D3  3000               	movlw	0
  2009  02D4  00F4               	movwf	___lmul@product+1
  2010  02D5  3000               	movlw	0
  2011  02D6  00F3               	movwf	___lmul@product
  2012  02D7                     l1237:	
  2013  02D7  0020               	movlb	0	; select bank0
  2014  02D8  1C20               	btfss	___lmul@multiplier,0
  2015  02D9  2AE2               	goto	l1241
  2016  02DA  0824               	movf	___lmul@multiplicand,w
  2017  02DB  07F3               	addwf	___lmul@product,f
  2018  02DC  0825               	movf	___lmul@multiplicand+1,w
  2019  02DD  3DF4               	addwfc	___lmul@product+1,f
  2020  02DE  0826               	movf	___lmul@multiplicand+2,w
  2021  02DF  3DF5               	addwfc	___lmul@product+2,f
  2022  02E0  0827               	movf	___lmul@multiplicand+3,w
  2023  02E1  3DF6               	addwfc	___lmul@product+3,f
  2024  02E2                     l1241:	
  2025  02E2  3001               	movlw	1
  2026  02E3                     u935:	
  2027  02E3  35A4               	lslf	___lmul@multiplicand,f
  2028  02E4  0DA5               	rlf	___lmul@multiplicand+1,f
  2029  02E5  0DA6               	rlf	___lmul@multiplicand+2,f
  2030  02E6  0DA7               	rlf	___lmul@multiplicand+3,f
  2031  02E7  0B89               	decfsz	9,f
  2032  02E8  2AE3               	goto	u935
  2033  02E9  3001               	movlw	1
  2034  02EA                     u945:	
  2035  02EA  36A3               	lsrf	___lmul@multiplier+3,f
  2036  02EB  0CA2               	rrf	___lmul@multiplier+2,f
  2037  02EC  0CA1               	rrf	___lmul@multiplier+1,f
  2038  02ED  0CA0               	rrf	___lmul@multiplier,f
  2039  02EE  0B89               	decfsz	9,f
  2040  02EF  2AEA               	goto	u945
  2041  02F0  0823               	movf	___lmul@multiplier+3,w
  2042  02F1  0422               	iorwf	___lmul@multiplier+2,w
  2043  02F2  0421               	iorwf	___lmul@multiplier+1,w
  2044  02F3  0420               	iorwf	___lmul@multiplier,w
  2045  02F4  1D03               	skipz
  2046  02F5  2AD7               	goto	l1237
  2047  02F6  0876               	movf	___lmul@product+3,w
  2048  02F7  00A3               	movwf	?___lmul+3
  2049  02F8  0875               	movf	___lmul@product+2,w
  2050  02F9  00A2               	movwf	?___lmul+2
  2051  02FA  0874               	movf	___lmul@product+1,w
  2052  02FB  00A1               	movwf	?___lmul+1
  2053  02FC  0873               	movf	___lmul@product,w
  2054  02FD  00A0               	movwf	?___lmul
  2055  02FE  0008               	return
  2056  02FF                     __end_of___lmul:	


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      10
    BANK0            80     63      63
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_getValue
    _calibrate->_getValue
    ___aldiv->___lmul

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_calibrate
    _calibrate->___aldiv
    ___aldiv->___lmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    19      4    4048
                                             42 BANK0     21    17      4
                            ___aldiv
                             ___lmul
                          __delay_ms
                          _calibrate
                           _getValue
                               _init
                      _initInterrupt
 ---------------------------------------------------------------------------------
 (1) _initInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibrate                                           20    18      2    2093
                                             22 BANK0     20    18      2
                            ___aldiv
                          __delay_ms
                                _abs
                           _getValue
 ---------------------------------------------------------------------------------
 (1) _getValue                                             6     4      2      25
                                              3 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     172
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) __delay_ms                                            5     3      2     461
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     835
                                              7 COMMON     1     1      0
                                              8 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     266
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
     ___lmul (ARG)
   ___lmul
   __delay_ms
   _calibrate
     ___aldiv
       ___lmul (ARG)
     __delay_ms
     _abs
     _getValue
   _getValue
   _init
   _initInterrupt

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      49       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3F      3F       6       78.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      49       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Fri Jun 26 09:29:27 2015

                       __CFG_CP$ON 0000                                  _d 03C8  
                               l55 0322                                 l80 011A  
                               l72 0042                                 l82 012E  
                               l87 0207                        __CFG_CPD$ON 0000  
                              l215 022A                                l921 02B4  
                              l923 02BB                                l893 0326  
main@upperBallSensorThresholdValue 0052                                u455 02C0  
                              u805 027A                                u905 012C  
                              u915 014E                                u835 0054  
                              u765 024E                                u845 0060  
                              u935 02E3                                u855 007A  
                              u945 02EA                                u785 025A  
                              u865 0086                                u795 026E  
                              u875 00A0                                u885 00E5  
                              u965 01C0                                u895 00C4  
                              u975 01E8                                u985 0200  
                              _abs 0333                                _isr 0004  
                     __CFG_BORV$HI 0000                                wreg 0009  
                     __CFG_LVP$OFF 0000                               ?_abs 0073  
                             l1213 00BA                               l1231 0150  
                             l1215 0120                               l1241 02E2  
                             l1155 024B                               l1147 023B  
                             l1237 02D7                               l1173 0292  
                             l1165 0279                               l1157 0259  
                             l1169 0284                               l1199 003D  
                             l1287 01F6                               l1279 01DE  
                             ?_isr 0070                       __CFG_WDTE$ON 0000  
                             i1l20 0027                               i1l21 001A  
                             i1l23 0024                       __CFG_WRT$OFF 0000  
                             abs@a 0073                               _main 0158  
                             _init 02FF                               btemp 007E  
                    __CFG_BOREN$ON 0000                               ltemp 007E  
                             start 002D                               ttemp 007E  
                             wtemp 007E                      __CFG_IESO$OFF 0000  
           calibrate@cumulativeVal 003E                              ??_abs 0075  
                            ??_isr 0070                      __CFG_PLLEN$ON 0000  
                  __end_of___aldiv 029B                              ?_main 004A  
                            ?_init 0070                              _ADRES 009B  
                            i1l829 0020                       __delay_ms@ms 0073  
                     __delay_ms@us 0077  main@lowerBallSensorThresholdValue 0059  
              ___lmul@multiplicand 0024                      __CFG_PWRTE$ON 0000  
                   __CFG_FCMEN$OFF 0000                     __pbitbssCOMMON 03C8  
                            isr@us 0072                              ltemp0 007E  
                            ltemp1 0082                              ltemp2 0086  
                            ltemp3 0080                              ttemp0 007E  
                            ttemp1 0081                              ttemp2 0084  
                            ttemp3 0087                              ttemp4 007F  
                            status 0003                              wtemp0 007E  
                            wtemp1 0080                              wtemp2 0082  
                            wtemp3 0084                              wtemp4 0086  
                            wtemp5 0088                              wtemp6 007F  
                   __CFG_MCLRE$OFF 0000                    __initialization 002E  
           __size_of_initInterrupt 000A                       __end_of_main 0219  
                     __end_of_init 031A                             ??_main 004E  
                           ??_init 0073                   calibrate@lastVal 003C  
                           _OSCCON 0099                   __end_of_getValue 02CF  
                           ___lmul 02CF                          ??___aldiv 0077  
                    _initInterrupt 0341            __end_of__initialization 002F  
               __size_of__delay_ms 0019                     __pcstackCOMMON 0070  
               __size_of_calibrate 0127                     ?_initInterrupt 0070  
                       __pmaintext 0158                            ?___lmul 0020  
                       __pintentry 0004                calibrate@averageVal 0042  
                   ___lmul@product 0073                  calibrate@inputVal 0048  
                __end_of__delay_ms 0333                          ?_getValue 0073  
                __end_of_calibrate 0158                         calibrate@i 0046  
                          ___aldiv 0219                    __size_of___lmul 0030  
                  __CFG_STVREN$OFF 0000                            __ptext1 0341  
                          __ptext2 02FF                            __ptext3 0031  
                          __ptext4 029B                            __ptext5 0333  
                          __ptext6 031A                            __ptext7 0219  
                          __ptext8 02CF                    ??_initInterrupt 0073  
                     __size_of_abs 000E                       __size_of_isr 0029  
                 ___aldiv@dividend 002C                          _IOCAFbits 0393  
                        _IOCANbits 0392                          _IOCAPbits 0391  
                       ??_getValue 0075               end_of_initialization 002F  
                   main@hysterysis 0056                   ___aldiv@quotient 0032  
                        _PORTAbits 000C                   __CFG_FOSC$INTOSC 0000  
                        _TRISAbits 008C                     __end_of___lmul 02FF  
                      __delay_ms@i 0076                    main@changeValue 0054  
              start_initialization 002E                        __end_of_abs 0341  
                      __end_of_isr 002D                           ??___lmul 0073  
                        ___latbits 0000                      __pcstackBANK0 0020  
                        __delay_ms 031A                  __size_of_getValue 0034  
                        _calibrate 0031                           ?___aldiv 0028  
                       ?__delay_ms 0073                    ___aldiv@divisor 0028  
                  ___aldiv@counter 0030                         ?_calibrate 0036  
                         _LATAbits 010C                         _ADCON0bits 009D  
                       _ADCON1bits 009E                          main@value 005B  
                        main@state 0058              __end_of_initInterrupt 034B  
                ___lmul@multiplier 0020               main@steadyStateValue 005D  
                 __size_of___aldiv 0082                         _ANSELAbits 018C  
                      ??__delay_ms 0075                           _getValue 029B  
                      ??_calibrate 0038                      __size_of_main 00C1  
                    __size_of_init 001B                           main@argc 004A  
                         main@argv 004C                         _INTCONbits 000B  
                       _FVRCONbits 0117                           intlevel1 0000  
                __CFG_CLKOUTEN$OFF 0000                       ___aldiv@sign 0031  
                       _WDTCONbits 0097                        getValue@val 0077  
