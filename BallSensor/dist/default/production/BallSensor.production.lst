

Microchip Technology PIC LITE Macro Assembler V1.31 build 56723 
                                                                                               Fri Jul 17 17:04:01 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 56723
     1                           	processor	12F1822
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	intentry,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     	;# 
    20  0001                     	;# 
    21  0002                     	;# 
    22  0003                     	;# 
    23  0004                     	;# 
    24  0005                     	;# 
    25  0006                     	;# 
    26  0007                     	;# 
    27  0008                     	;# 
    28  0009                     	;# 
    29  000A                     	;# 
    30  000B                     	;# 
    31  000C                     	;# 
    32  0011                     	;# 
    33  0012                     	;# 
    34  0015                     	;# 
    35  0016                     	;# 
    36  0016                     	;# 
    37  0017                     	;# 
    38  0018                     	;# 
    39  0019                     	;# 
    40  001A                     	;# 
    41  001B                     	;# 
    42  001C                     	;# 
    43  001E                     	;# 
    44  001F                     	;# 
    45  008C                     	;# 
    46  0091                     	;# 
    47  0092                     	;# 
    48  0095                     	;# 
    49  0096                     	;# 
    50  0097                     	;# 
    51  0098                     	;# 
    52  0099                     	;# 
    53  009A                     	;# 
    54  009B                     	;# 
    55  009B                     	;# 
    56  009C                     	;# 
    57  009D                     	;# 
    58  009E                     	;# 
    59  010C                     	;# 
    60  0111                     	;# 
    61  0112                     	;# 
    62  0115                     	;# 
    63  0116                     	;# 
    64  0117                     	;# 
    65  0118                     	;# 
    66  0119                     	;# 
    67  011A                     	;# 
    68  011B                     	;# 
    69  011D                     	;# 
    70  011D                     	;# 
    71  018C                     	;# 
    72  0191                     	;# 
    73  0191                     	;# 
    74  0192                     	;# 
    75  0193                     	;# 
    76  0193                     	;# 
    77  0193                     	;# 
    78  0194                     	;# 
    79  0195                     	;# 
    80  0196                     	;# 
    81  0199                     	;# 
    82  019A                     	;# 
    83  019B                     	;# 
    84  019B                     	;# 
    85  019B                     	;# 
    86  019B                     	;# 
    87  019C                     	;# 
    88  019C                     	;# 
    89  019D                     	;# 
    90  019E                     	;# 
    91  019F                     	;# 
    92  020C                     	;# 
    93  0211                     	;# 
    94  0211                     	;# 
    95  0212                     	;# 
    96  0212                     	;# 
    97  0213                     	;# 
    98  0213                     	;# 
    99  0214                     	;# 
   100  0214                     	;# 
   101  0215                     	;# 
   102  0215                     	;# 
   103  0215                     	;# 
   104  0216                     	;# 
   105  0216                     	;# 
   106  0217                     	;# 
   107  0217                     	;# 
   108  0291                     	;# 
   109  0291                     	;# 
   110  0292                     	;# 
   111  0293                     	;# 
   112  0294                     	;# 
   113  0295                     	;# 
   114  0295                     	;# 
   115  0296                     	;# 
   116  0391                     	;# 
   117  0392                     	;# 
   118  0393                     	;# 
   119  039A                     	;# 
   120  039C                     	;# 
   121  039D                     	;# 
   122  039E                     	;# 
   123  039F                     	;# 
   124  0FE4                     	;# 
   125  0FE5                     	;# 
   126  0FE6                     	;# 
   127  0FE7                     	;# 
   128  0FE8                     	;# 
   129  0FE9                     	;# 
   130  0FEA                     	;# 
   131  0FEB                     	;# 
   132  0FED                     	;# 
   133  0FEE                     	;# 
   134  0FEF                     	;# 
   135  0000                     	;# 
   136  0001                     	;# 
   137  0002                     	;# 
   138  0003                     	;# 
   139  0004                     	;# 
   140  0005                     	;# 
   141  0006                     	;# 
   142  0007                     	;# 
   143  0008                     	;# 
   144  0009                     	;# 
   145  000A                     	;# 
   146  000B                     	;# 
   147  000C                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001C                     	;# 
   159  001E                     	;# 
   160  001F                     	;# 
   161  008C                     	;# 
   162  0091                     	;# 
   163  0092                     	;# 
   164  0095                     	;# 
   165  0096                     	;# 
   166  0097                     	;# 
   167  0098                     	;# 
   168  0099                     	;# 
   169  009A                     	;# 
   170  009B                     	;# 
   171  009B                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  010C                     	;# 
   176  0111                     	;# 
   177  0112                     	;# 
   178  0115                     	;# 
   179  0116                     	;# 
   180  0117                     	;# 
   181  0118                     	;# 
   182  0119                     	;# 
   183  011A                     	;# 
   184  011B                     	;# 
   185  011D                     	;# 
   186  011D                     	;# 
   187  018C                     	;# 
   188  0191                     	;# 
   189  0191                     	;# 
   190  0192                     	;# 
   191  0193                     	;# 
   192  0193                     	;# 
   193  0193                     	;# 
   194  0194                     	;# 
   195  0195                     	;# 
   196  0196                     	;# 
   197  0199                     	;# 
   198  019A                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019C                     	;# 
   204  019C                     	;# 
   205  019D                     	;# 
   206  019E                     	;# 
   207  019F                     	;# 
   208  020C                     	;# 
   209  0211                     	;# 
   210  0211                     	;# 
   211  0212                     	;# 
   212  0212                     	;# 
   213  0213                     	;# 
   214  0213                     	;# 
   215  0214                     	;# 
   216  0214                     	;# 
   217  0215                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0216                     	;# 
   221  0216                     	;# 
   222  0217                     	;# 
   223  0217                     	;# 
   224  0291                     	;# 
   225  0291                     	;# 
   226  0292                     	;# 
   227  0293                     	;# 
   228  0294                     	;# 
   229  0295                     	;# 
   230  0295                     	;# 
   231  0296                     	;# 
   232  0391                     	;# 
   233  0392                     	;# 
   234  0393                     	;# 
   235  039A                     	;# 
   236  039C                     	;# 
   237  039D                     	;# 
   238  039E                     	;# 
   239  039F                     	;# 
   240  0FE4                     	;# 
   241  0FE5                     	;# 
   242  0FE6                     	;# 
   243  0FE7                     	;# 
   244  0FE8                     	;# 
   245  0FE9                     	;# 
   246  0FEA                     	;# 
   247  0FEB                     	;# 
   248  0FED                     	;# 
   249  0FEE                     	;# 
   250  0FEF                     	;# 
   251  000B                     _INTCONbits	set	11
   252  000C                     _PORTAbits	set	12
   253  009B                     _ADRES	set	155
   254  009D                     _ADCON0bits	set	157
   255  009E                     _ADCON1bits	set	158
   256  0099                     _OSCCON	set	153
   257  008C                     _TRISAbits	set	140
   258  0097                     _WDTCONbits	set	151
   259  0117                     _FVRCONbits	set	279
   260  010C                     _LATAbits	set	268
   261  018C                     _ANSELAbits	set	396
   262  0393                     _IOCAFbits	set	915
   263  0392                     _IOCANbits	set	914
   264  0391                     _IOCAPbits	set	913
   265                           
   266                           	psect	intentry
   267  0004                     __pintentry:	
   268                           
   269                           ; #config settings
   270  0000                     
   271 ;; *************** function _isr *****************
   272 ;; Defined at:
   273 ;;		line 22 in file "interrupt.c"
   274 ;; Parameters:    Size  Location     Type
   275 ;;		None
   276 ;; Auto vars:     Size  Location     Type
   277 ;;  us              1    2[COMMON] unsigned char 
   278 ;; Return value:  Size  Location     Type
   279 ;;		None               void
   280 ;; Registers used:
   281 ;;		wreg, status,2, status,0
   282 ;; Tracked objects:
   283 ;;		On entry : 0/0
   284 ;;		On exit  : 0/0
   285 ;;		Unchanged: 0/0
   286 ;; Data sizes:     COMMON   BANK0   BANK1
   287 ;;      Params:         0       0       0
   288 ;;      Locals:         1       0       0
   289 ;;      Temps:          2       0       0
   290 ;;      Totals:         3       0       0
   291 ;;Total ram usage:        3 bytes
   292 ;; Hardware stack levels used:    1
   293 ;; This function calls:
   294 ;;		Nothing
   295 ;; This function is called by:
   296 ;;		Interrupt level 1
   297 ;; This function uses a non-reentrant model
   298 ;;
   299  0004                     _isr:	
   300                           
   301                           ;incstack = 0
   302                           ; Regs used in _isr: [wreg+status,2+status,0]
   303  0004  3180               	pagesel	$
   304  0005  0020               	movlb	0	; select bank0
   305  0006  087F               	movf	127,w
   306  0007  00F1               	movwf	??_isr+1
   307                           
   308                           ;interrupt.c: 24: if (INTCONbits.IOCIF)
   309  0008  1C0B               	btfss	11,0	;volatile
   310  0009  2827               	goto	i1l20
   311                           
   312                           ;interrupt.c: 25: {
   313                           ;interrupt.c: 26: if (IOCAFbits.IOCAF2)
   314  000A  0027               	movlb	7	; select bank7
   315  000B  1D13               	btfss	19,2	;volatile
   316  000C  281A               	goto	i1l21
   317                           
   318                           ;interrupt.c: 27: {
   319                           ;interrupt.c: 28: d = PORTAbits.RA2;
   320  000D  0020               	movlb	0	; select bank0
   321  000E  0C0C               	rrf	12,w	;volatile
   322  000F  0C89               	rrf	9,f
   323  0010  3901               	andlw	1
   324  0011  00F0               	movwf	??_isr
   325  0012  0C70               	rrf	??_isr,w
   326  0013  107A               	bcf	_d/(0+8),_d& (0+7)
   327  0014  1803               	btfsc	3,0
   328  0015  147A               	bsf	_d/(0+8),_d& (0+7)
   329                           
   330                           ;interrupt.c: 29: LATAbits.LATA1 = 1;
   331  0016  0022               	movlb	2	; select bank2
   332  0017  148C               	bsf	12,1	;volatile
   333                           
   334                           ;interrupt.c: 30: if (!d)
   335  0018  1C7A               	btfss	_d/(0+8),_d& (0+7)
   336                           
   337                           ;interrupt.c: 31: LATAbits.LATA1 = 0;
   338  0019  108C               	bcf	12,1	;volatile
   339  001A                     i1l21:	
   340                           
   341                           ;interrupt.c: 32: }
   342                           ;interrupt.c: 33: if (d == 1)
   343  001A  1C7A               	btfss	_d/(0+8),_d& (0+7)
   344  001B  2824               	goto	i1l23
   345                           
   346                           ;interrupt.c: 34: { unsigned char us; us = (2)/(12000000/8000000L)|1; while(--us != 0) c
      +                          ontinue; };
   347  001C  3003               	movlw	3
   348  001D  00F0               	movwf	??_isr
   349  001E  0870               	movf	??_isr,w
   350  001F  00F2               	movwf	isr@us
   351  0020                     i1l761:	
   352  0020  3001               	movlw	1
   353  0021  02F2               	subwf	isr@us,f
   354  0022  1D03               	btfss	3,2
   355  0023  2820               	goto	i1l761
   356  0024                     i1l23:	
   357                           
   358                           ;interrupt.c: 35: IOCAFbits.IOCAF2 = 0;
   359  0024  0027               	movlb	7	; select bank7
   360  0025  1113               	bcf	19,2	;volatile
   361                           
   362                           ;interrupt.c: 36: INTCONbits.IOCIF = 0;
   363  0026  100B               	bcf	11,0	;volatile
   364  0027                     i1l20:	
   365                           
   366                           ;interrupt.c: 37: }
   367                           ;interrupt.c: 38: LATAbits.LATA1 = 0;
   368  0027  0022               	movlb	2	; select bank2
   369  0028  108C               	bcf	12,1	;volatile
   370  0029  0871               	movf	??_isr+1,w
   371  002A  0020               	movlb	0	; select bank0
   372  002B  00FF               	movwf	127
   373  002C  0009               	retfie
   374  002D                     __end_of_isr:	
   375  007E                     btemp	set	126	;btemp
   376  007E                     wtemp	set	126
   377  007E                     wtemp0	set	126
   378  0080                     wtemp1	set	128
   379  0082                     wtemp2	set	130
   380  0084                     wtemp3	set	132
   381  0086                     wtemp4	set	134
   382  0088                     wtemp5	set	136
   383  007F                     wtemp6	set	127
   384  007E                     ttemp	set	126
   385  007E                     ttemp0	set	126
   386  0081                     ttemp1	set	129
   387  0084                     ttemp2	set	132
   388  0087                     ttemp3	set	135
   389  007F                     ttemp4	set	127
   390  007E                     ltemp	set	126
   391  007E                     ltemp0	set	126
   392  0082                     ltemp1	set	130
   393  0086                     ltemp2	set	134
   394  0080                     ltemp3	set	128
   395                           
   396                           	psect	cinit
   397  002E                     start_initialization:	
   398  002E                     __initialization:	
   399                           
   400                           ; Clear objects allocated to BITCOMMON
   401  002E  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   402                           
   403                           ; Clear objects allocated to BANK0
   404  002F  01E9               	clrf	__pbssBANK0& (0+127)
   405  0030  01EA               	clrf	(__pbssBANK0+1)& (0+127)
   406  0031  01EB               	clrf	(__pbssBANK0+2)& (0+127)
   407  0032  01EC               	clrf	(__pbssBANK0+3)& (0+127)
   408  0033                     end_of_initialization:	
   409                           ;End of C runtime variable initialization code
   410                           
   411  0033                     __end_of__initialization:	
   412  0033  0020               	movlb	0
   413  0034  2835               	ljmp	_main	;jump to C main() function
   414                           
   415                           	psect	bitbssCOMMON
   416  03D0                     __pbitbssCOMMON:	
   417  03D0                     _d:	
   418  03D0                     	ds	1
   419                           
   420                           	psect	bssBANK0
   421  0069                     __pbssBANK0:	
   422  0069                     _cumulativeVal:	
   423  0069                     	ds	4
   424                           
   425                           	psect	cstackCOMMON
   426  0070                     __pcstackCOMMON:	
   427  0070                     ?_initInterrupt:	
   428  0070                     ?_isr:	
   429                           ; 0 bytes @ 0x0
   430                           
   431  0070                     ??_isr:	
   432                           ; 0 bytes @ 0x0
   433                           
   434  0070                     ?_init:	
   435                           ; 0 bytes @ 0x0
   436                           
   437  0070                     ?_main:	
   438                           ; 0 bytes @ 0x0
   439                           
   440                           
   441                           ; 0 bytes @ 0x0
   442  0070                     	ds	2
   443  0072                     isr@us:	
   444                           
   445                           ; 1 bytes @ 0x2
   446  0072                     	ds	1
   447  0073                     ??_initInterrupt:	
   448  0073                     ?__delay_ms:	
   449                           ; 0 bytes @ 0x3
   450                           
   451  0073                     ??_init:	
   452                           ; 0 bytes @ 0x3
   453                           
   454  0073                     ??___aldiv:	
   455                           ; 0 bytes @ 0x3
   456                           
   457  0073                     ?_abs:	
   458                           ; 0 bytes @ 0x3
   459                           
   460  0073                     ?_getValue:	
   461                           ; 2 bytes @ 0x3
   462                           
   463  0073                     __delay_ms@ms:	
   464                           ; 2 bytes @ 0x3
   465                           
   466  0073                     abs@a:	
   467                           ; 2 bytes @ 0x3
   468                           
   469                           
   470                           ; 2 bytes @ 0x3
   471  0073                     	ds	1
   472  0074                     ___aldiv@counter:	
   473                           
   474                           ; 1 bytes @ 0x4
   475  0074                     	ds	1
   476  0075                     ??_abs:	
   477  0075                     ??__delay_ms:	
   478                           ; 0 bytes @ 0x5
   479                           
   480  0075                     ??_getValue:	
   481                           ; 0 bytes @ 0x5
   482                           
   483  0075                     ___aldiv@sign:	
   484                           ; 0 bytes @ 0x5
   485                           
   486                           
   487                           ; 1 bytes @ 0x5
   488  0075                     	ds	1
   489  0076                     __delay_ms@i:	
   490  0076                     ___aldiv@quotient:	
   491                           ; 1 bytes @ 0x6
   492                           
   493                           
   494                           ; 4 bytes @ 0x6
   495  0076                     	ds	1
   496  0077                     __delay_ms@us:	
   497                           
   498                           ; 1 bytes @ 0x7
   499  0077                     	ds	3
   500                           
   501                           	psect	cstackBANK0
   502  0020                     __pcstackBANK0:	
   503  0020                     ?___aldiv:	
   504  0020                     ___aldiv@divisor:	
   505                           ; 4 bytes @ 0x0
   506                           
   507                           
   508                           ; 4 bytes @ 0x0
   509  0020                     	ds	4
   510  0024                     ___aldiv@dividend:	
   511                           
   512                           ; 4 bytes @ 0x4
   513  0024                     	ds	4
   514  0028                     ?_calibrate:	
   515                           
   516                           ; 2 bytes @ 0x8
   517  0028                     	ds	2
   518  002A                     ??_calibrate:	
   519                           
   520                           ; 0 bytes @ 0xA
   521  002A                     	ds	4
   522  002E                     calibrate@lastVal:	
   523                           
   524                           ; 2 bytes @ 0xE
   525  002E                     	ds	2
   526  0030                     calibrate@averageVal:	
   527                           
   528                           ; 4 bytes @ 0x10
   529  0030                     	ds	4
   530  0034                     calibrate@i:	
   531                           
   532                           ; 1 bytes @ 0x14
   533  0034                     	ds	1
   534  0035                     calibrate@inputVal:	
   535                           
   536                           ; 2 bytes @ 0x15
   537  0035                     	ds	2
   538  0037                     ??_main:	
   539                           
   540                           ; 0 bytes @ 0x17
   541  0037                     	ds	6
   542  003D                     main@averageTable:	
   543                           
   544                           ; 32 bytes @ 0x1D
   545  003D                     	ds	32
   546  005D                     main@upperBallSensorThresholdValue:	
   547                           
   548                           ; 2 bytes @ 0x3D
   549  005D                     	ds	2
   550  005F                     main@state:	
   551                           
   552                           ; 1 bytes @ 0x3F
   553  005F                     	ds	1
   554  0060                     main@averagePtr:	
   555                           
   556                           ; 1 bytes @ 0x40
   557  0060                     	ds	1
   558  0061                     main@value:	
   559                           
   560                           ; 2 bytes @ 0x41
   561  0061                     	ds	2
   562  0063                     main@steadyStateValue:	
   563                           
   564                           ; 2 bytes @ 0x43
   565  0063                     	ds	2
   566  0065                     main@lowerBallSensorThresholdValue:	
   567                           
   568                           ; 2 bytes @ 0x45
   569  0065                     	ds	2
   570  0067                     main@i:	
   571                           
   572                           ; 2 bytes @ 0x47
   573  0067                     	ds	2
   574                           
   575                           	psect	maintext
   576  0035                     __pmaintext:	
   577 ;;
   578 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
   579 ;;
   580 ;; *************** function _main *****************
   581 ;; Defined at:
   582 ;;		line 157 in file "main.c"
   583 ;; Parameters:    Size  Location     Type
   584 ;;		None
   585 ;; Auto vars:     Size  Location     Type
   586 ;;  averageTable   32   29[BANK0 ] int [16]
   587 ;;  i               2   71[BANK0 ] int 
   588 ;;  lowerBallSen    2   69[BANK0 ] int 
   589 ;;  steadyStateV    2   67[BANK0 ] int 
   590 ;;  value           2   65[BANK0 ] int 
   591 ;;  upperBallSen    2   61[BANK0 ] int 
   592 ;;  averagePtr      1   64[BANK0 ] unsigned char 
   593 ;;  state           1   63[BANK0 ] enum E2410
   594 ;; Return value:  Size  Location     Type
   595 ;;		None               void
   596 ;; Registers used:
   597 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
   598 ;; Tracked objects:
   599 ;;		On entry : 17F/0
   600 ;;		On exit  : 0/0
   601 ;;		Unchanged: 0/0
   602 ;; Data sizes:     COMMON   BANK0   BANK1
   603 ;;      Params:         0       0       0
   604 ;;      Locals:         0      44       0
   605 ;;      Temps:          0       6       0
   606 ;;      Totals:         0      50       0
   607 ;;Total ram usage:       50 bytes
   608 ;; Hardware stack levels required when called:    3
   609 ;; This function calls:
   610 ;;		__delay_ms
   611 ;;		_calibrate
   612 ;;		_getValue
   613 ;;		_init
   614 ;;		_initInterrupt
   615 ;; This function is called by:
   616 ;;		Startup code after reset
   617 ;; This function uses a non-reentrant model
   618 ;;
   619                           
   620                           
   621                           ;psect for function _main
   622  0035                     _main:	
   623                           
   624                           ;main.c: 159: int steadyStateValue, lowerBallSensorThresholdValue, upperBallSensorThresh
      +                          oldValue;
   625                           ;main.c: 160: enum {offState, onState} state = offState;
   626                           
   627                           ;incstack = 0
   628                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
   629  0035  0020               	movlb	0	; select bank0
   630  0036  01DF               	clrf	main@state
   631                           
   632                           ;main.c: 161: int value, i=0;
   633  0037  01E7               	clrf	main@i
   634  0038  01E8               	clrf	main@i+1
   635                           
   636                           ;main.c: 162: unsigned char averagePtr=0;
   637  0039  01E0               	clrf	main@averagePtr
   638                           
   639                           ;main.c: 163: int averageTable[16];
   640                           ;main.c: 165: init();
   641  003A  22FB               	fcall	_init
   642  003B  0064               	clrwdt	;# 
   643                           
   644                           ;main.c: 171: LATAbits.LATA5 = 0;
   645  003C  0022               	movlb	2	; select bank2
   646  003D  128C               	bcf	12,5	;volatile
   647                           
   648                           ;main.c: 172: LATAbits.LATA0 = 0;
   649  003E  100C               	bcf	12,0	;volatile
   650                           
   651                           ;main.c: 173: _delay_ms(200);
   652  003F  30C8               	movlw	200
   653  0040  00F3               	movwf	__delay_ms@ms
   654  0041  3000               	movlw	0
   655  0042  00F4               	movwf	__delay_ms@ms+1
   656  0043  2316               	fcall	__delay_ms
   657  0044  0064               	clrwdt	;# 
   658                           
   659                           ;main.c: 176: LATAbits.LATA5 = 1;
   660  0045  0022               	movlb	2	; select bank2
   661  0046  168C               	bsf	12,5	;volatile
   662                           
   663                           ;main.c: 177: LATAbits.LATA0 = 1;
   664  0047  140C               	bsf	12,0	;volatile
   665                           
   666                           ;main.c: 178: _delay_ms(100);
   667  0048  3064               	movlw	100
   668  0049  00F3               	movwf	__delay_ms@ms
   669  004A  3000               	movlw	0
   670  004B  00F4               	movwf	__delay_ms@ms+1
   671  004C  2316               	fcall	__delay_ms
   672  004D  0064               	clrwdt	;# 
   673                           
   674                           ;main.c: 181: steadyStateValue = calibrate();
   675  004E  214D               	fcall	_calibrate
   676  004F  0020               	movlb	0	; select bank0
   677  0050  0829               	movf	?_calibrate+1,w
   678  0051  01E4               	clrf	main@steadyStateValue+1
   679  0052  07E4               	addwf	main@steadyStateValue+1,f
   680  0053  0828               	movf	?_calibrate,w
   681  0054  01E3               	clrf	main@steadyStateValue
   682  0055  07E3               	addwf	main@steadyStateValue,f
   683                           
   684                           ;main.c: 182: for(i=0; i<16; i++){
   685  0056  01E7               	clrf	main@i
   686  0057  01E8               	clrf	main@i+1
   687  0058  0868               	movf	main@i+1,w
   688  0059  3A80               	xorlw	128
   689  005A  00FF               	movwf	127
   690  005B  3080               	movlw	128
   691  005C  027F               	subwf	127,w
   692  005D  1D03               	skipz
   693  005E  2861               	goto	u965
   694  005F  3010               	movlw	16
   695  0060  0267               	subwf	main@i,w
   696  0061                     u965:	
   697  0061  1803               	btfsc	3,0
   698  0062  287B               	goto	l1231
   699  0063                     l1225:	
   700                           
   701                           ;main.c: 183: averageTable[i]=steadyStateValue;
   702  0063  0020               	movlb	0	; select bank0
   703  0064  3567               	lslf	main@i,w
   704  0065  3E3D               	addlw	main@averageTable& (0+255)
   705  0066  0086               	movwf	6
   706  0067  0187               	clrf	7
   707  0068  0863               	movf	main@steadyStateValue,w
   708  0069  3FC0               	movwi [0]fsr1
   709  006A  0864               	movf	main@steadyStateValue+1,w
   710  006B  3FC1               	movwi [1]fsr1
   711  006C  3001               	movlw	1
   712  006D  07E7               	addwf	main@i,f
   713  006E  3000               	movlw	0
   714  006F  3DE8               	addwfc	main@i+1,f
   715  0070  0868               	movf	main@i+1,w
   716  0071  3A80               	xorlw	128
   717  0072  00FF               	movwf	127
   718  0073  3080               	movlw	128
   719  0074  027F               	subwf	127,w
   720  0075  1D03               	skipz
   721  0076  2879               	goto	u975
   722  0077  3010               	movlw	16
   723  0078  0267               	subwf	main@i,w
   724  0079                     u975:	
   725  0079  1C03               	skipc
   726  007A  2863               	goto	l1225
   727  007B                     l1231:	
   728                           
   729                           ;main.c: 184: }
   730                           ;main.c: 186: lowerBallSensorThresholdValue = steadyStateValue - 40;
   731  007B  0020               	movlb	0	; select bank0
   732  007C  0863               	movf	main@steadyStateValue,w
   733  007D  3ED8               	addlw	216
   734  007E  00E5               	movwf	main@lowerBallSensorThresholdValue
   735  007F  30FF               	movlw	255
   736  0080  3D64               	addwfc	main@steadyStateValue+1,w
   737  0081  00E6               	movwf	main@lowerBallSensorThresholdValue+1
   738                           
   739                           ;main.c: 188: upperBallSensorThresholdValue = lowerBallSensorThresholdValue + 30;
   740  0082  0865               	movf	main@lowerBallSensorThresholdValue,w
   741  0083  3E1E               	addlw	30
   742  0084  00DD               	movwf	main@upperBallSensorThresholdValue
   743  0085  3000               	movlw	0
   744  0086  3D66               	addwfc	main@lowerBallSensorThresholdValue+1,w
   745  0087  00DE               	movwf	main@upperBallSensorThresholdValue+1
   746                           
   747                           ;main.c: 189: initInterrupt();
   748  0088  233D               	fcall	_initInterrupt
   749                           
   750                           ;main.c: 195: switch (state)
   751  0089  293B               	goto	l91
   752  008A                     l1237:	
   753                           ;main.c: 196: {
   754                           ;main.c: 197: case offState:
   755                           
   756                           
   757                           ;main.c: 200: if(++i>=5000){
   758  008A  3001               	movlw	1
   759  008B  07E7               	addwf	main@i,f
   760  008C  3000               	movlw	0
   761  008D  3DE8               	addwfc	main@i+1,f
   762  008E  0868               	movf	main@i+1,w
   763  008F  3A80               	xorlw	128
   764  0090  00FF               	movwf	127
   765  0091  3093               	movlw	147
   766  0092  027F               	subwf	127,w
   767  0093  1D03               	skipz
   768  0094  2897               	goto	u985
   769  0095  3088               	movlw	136
   770  0096  0267               	subwf	main@i,w
   771  0097                     u985:	
   772  0097  1C03               	skipc
   773  0098  2911               	goto	l1269
   774                           
   775                           ;main.c: 201: LATAbits.LATA5 = 0;
   776  0099  0022               	movlb	2	; select bank2
   777  009A  128C               	bcf	12,5	;volatile
   778                           
   779                           ;main.c: 202: i=0;
   780  009B  0020               	movlb	0	; select bank0
   781  009C  01E7               	clrf	main@i
   782  009D  01E8               	clrf	main@i+1
   783                           
   784                           ;main.c: 204: averageTable[averagePtr++]=value;
   785  009E  3560               	lslf	main@averagePtr,w
   786  009F  3E3D               	addlw	main@averageTable& (0+255)
   787  00A0  0086               	movwf	6
   788  00A1  0187               	clrf	7
   789  00A2  0861               	movf	main@value,w
   790  00A3  3FC0               	movwi [0]fsr1
   791  00A4  0862               	movf	main@value+1,w
   792  00A5  3FC1               	movwi [1]fsr1
   793  00A6  3001               	movlw	1
   794  00A7  00B7               	movwf	??_main
   795  00A8  0837               	movf	??_main,w
   796  00A9  07E0               	addwf	main@averagePtr,f
   797                           
   798                           ;main.c: 205: if(averagePtr>=16){
   799  00AA  3010               	movlw	16
   800  00AB  0260               	subwf	main@averagePtr,w
   801  00AC  1803               	btfsc	3,0
   802                           
   803                           ;main.c: 206: averagePtr=0;
   804  00AD  01E0               	clrf	main@averagePtr
   805                           
   806                           ;main.c: 207: }
   807                           ;main.c: 208: cumulativeVal=0;
   808  00AE  3000               	movlw	0
   809  00AF  00EC               	movwf	_cumulativeVal+3
   810  00B0  3000               	movlw	0
   811  00B1  00EB               	movwf	_cumulativeVal+2
   812  00B2  3000               	movlw	0
   813  00B3  00EA               	movwf	_cumulativeVal+1
   814  00B4  3000               	movlw	0
   815  00B5  00E9               	movwf	_cumulativeVal
   816                           
   817                           ;main.c: 210: for(i=0; i<16; i++){
   818  00B6  01E7               	clrf	main@i
   819  00B7  01E8               	clrf	main@i+1
   820  00B8  0868               	movf	main@i+1,w
   821  00B9  3A80               	xorlw	128
   822  00BA  00FF               	movwf	127
   823  00BB  3080               	movlw	128
   824  00BC  027F               	subwf	127,w
   825  00BD  1D03               	skipz
   826  00BE  28C1               	goto	u1005
   827  00BF  3010               	movlw	16
   828  00C0  0267               	subwf	main@i,w
   829  00C1                     u1005:	
   830  00C1  1803               	btfsc	3,0
   831  00C2  28EC               	goto	l1265
   832  00C3                     l1259:	
   833                           
   834                           ;main.c: 211: cumulativeVal+=averageTable[i];
   835  00C3  0020               	movlb	0	; select bank0
   836  00C4  3567               	lslf	main@i,w
   837  00C5  3E3D               	addlw	main@averageTable& (0+255)
   838  00C6  0086               	movwf	6
   839  00C7  0187               	clrf	7
   840  00C8  3F40               	moviw [0]fsr1
   841  00C9  00B7               	movwf	??_main
   842  00CA  3F41               	moviw [1]fsr1
   843  00CB  00B8               	movwf	??_main+1
   844  00CC  0837               	movf	??_main,w
   845  00CD  00B9               	movwf	??_main+2
   846  00CE  0838               	movf	??_main+1,w
   847  00CF  00BA               	movwf	??_main+3
   848  00D0  3000               	movlw	0
   849  00D1  1BBA               	btfsc	??_main+3,7
   850  00D2  30FF               	movlw	255
   851  00D3  00BB               	movwf	??_main+4
   852  00D4  00BC               	movwf	??_main+5
   853  00D5  0839               	movf	??_main+2,w
   854  00D6  07E9               	addwf	_cumulativeVal,f
   855  00D7  083A               	movf	??_main+3,w
   856  00D8  3DEA               	addwfc	_cumulativeVal+1,f
   857  00D9  083B               	movf	??_main+4,w
   858  00DA  3DEB               	addwfc	_cumulativeVal+2,f
   859  00DB  083C               	movf	??_main+5,w
   860  00DC  3DEC               	addwfc	_cumulativeVal+3,f
   861  00DD  3001               	movlw	1
   862  00DE  07E7               	addwf	main@i,f
   863  00DF  3000               	movlw	0
   864  00E0  3DE8               	addwfc	main@i+1,f
   865  00E1  0868               	movf	main@i+1,w
   866  00E2  3A80               	xorlw	128
   867  00E3  00FF               	movwf	127
   868  00E4  3080               	movlw	128
   869  00E5  027F               	subwf	127,w
   870  00E6  1D03               	skipz
   871  00E7  28EA               	goto	u1015
   872  00E8  3010               	movlw	16
   873  00E9  0267               	subwf	main@i,w
   874  00EA                     u1015:	
   875  00EA  1C03               	skipc
   876  00EB  28C3               	goto	l1259
   877  00EC                     l1265:	
   878                           
   879                           ;main.c: 212: }
   880                           ;main.c: 213: steadyStateValue=cumulativeVal>>4;
   881  00EC  0020               	movlb	0	; select bank0
   882  00ED  0869               	movf	_cumulativeVal,w
   883  00EE  00B7               	movwf	??_main
   884  00EF  086A               	movf	_cumulativeVal+1,w
   885  00F0  00B8               	movwf	??_main+1
   886  00F1  086B               	movf	_cumulativeVal+2,w
   887  00F2  00B9               	movwf	??_main+2
   888  00F3  086C               	movf	_cumulativeVal+3,w
   889  00F4  00BA               	movwf	??_main+3
   890  00F5  3004               	movlw	4
   891  00F6  00BB               	movwf	??_main+4
   892  00F7                     u1025:	
   893  00F7  37BA               	asrf	??_main+3,f
   894  00F8  0CB9               	rrf	??_main+2,f
   895  00F9  0CB8               	rrf	??_main+1,f
   896  00FA  0CB7               	rrf	??_main,f
   897  00FB  0BBB               	decfsz	??_main+4,f
   898  00FC  28F7               	goto	u1025
   899  00FD  0838               	movf	??_main+1,w
   900  00FE  01E4               	clrf	main@steadyStateValue+1
   901  00FF  07E4               	addwf	main@steadyStateValue+1,f
   902  0100  0837               	movf	??_main,w
   903  0101  01E3               	clrf	main@steadyStateValue
   904  0102  07E3               	addwf	main@steadyStateValue,f
   905                           
   906                           ;main.c: 214: lowerBallSensorThresholdValue = steadyStateValue - 40;
   907  0103  0863               	movf	main@steadyStateValue,w
   908  0104  3ED8               	addlw	216
   909  0105  00E5               	movwf	main@lowerBallSensorThresholdValue
   910  0106  30FF               	movlw	255
   911  0107  3D64               	addwfc	main@steadyStateValue+1,w
   912  0108  00E6               	movwf	main@lowerBallSensorThresholdValue+1
   913                           
   914                           ;main.c: 215: upperBallSensorThresholdValue = lowerBallSensorThresholdValue + 30;
   915  0109  0865               	movf	main@lowerBallSensorThresholdValue,w
   916  010A  3E1E               	addlw	30
   917  010B  00DD               	movwf	main@upperBallSensorThresholdValue
   918  010C  3000               	movlw	0
   919  010D  3D66               	addwfc	main@lowerBallSensorThresholdValue+1,w
   920  010E  00DE               	movwf	main@upperBallSensorThresholdValue+1
   921                           
   922                           ;main.c: 216: LATAbits.LATA5 = 1;
   923  010F  0022               	movlb	2	; select bank2
   924  0110  168C               	bsf	12,5	;volatile
   925  0111                     l1269:	
   926                           
   927                           ;main.c: 217: }
   928                           ;main.c: 219: if ( value < lowerBallSensorThresholdValue )
   929  0111  0020               	movlb	0	; select bank0
   930  0112  0862               	movf	main@value+1,w
   931  0113  3A80               	xorlw	128
   932  0114  00B7               	movwf	??_main
   933  0115  0866               	movf	main@lowerBallSensorThresholdValue+1,w
   934  0116  3A80               	xorlw	128
   935  0117  0237               	subwf	??_main,w
   936  0118  1D03               	skipz
   937  0119  291C               	goto	u1035
   938  011A  0865               	movf	main@lowerBallSensorThresholdValue,w
   939  011B  0261               	subwf	main@value,w
   940  011C                     u1035:	
   941  011C  1803               	skipnc
   942  011D  293B               	goto	l91
   943                           
   944                           ;main.c: 220: {
   945                           ;main.c: 221: LATAbits.LATA5 = 0;
   946  011E  0022               	movlb	2	; select bank2
   947  011F  128C               	bcf	12,5	;volatile
   948                           
   949                           ;main.c: 222: LATAbits.LATA0 = 0;
   950  0120  100C               	bcf	12,0	;volatile
   951                           
   952                           ;main.c: 223: _delay_ms(10);
   953  0121  300A               	movlw	10
   954  0122  00F3               	movwf	__delay_ms@ms
   955  0123  3000               	movlw	0
   956  0124  00F4               	movwf	__delay_ms@ms+1
   957  0125  2316               	fcall	__delay_ms
   958                           
   959                           ;main.c: 224: state = onState;
   960  0126  0020               	movlb	0	; select bank0
   961  0127  01DF               	clrf	main@state
   962  0128  0ADF               	incf	main@state,f
   963                           
   964                           ;main.c: 225: }
   965                           ;main.c: 226: break;
   966  0129  293B               	goto	l91
   967  012A                     l1277:	
   968                           ;main.c: 227: case onState:
   969                           
   970                           
   971                           ;main.c: 228: if ( value > upperBallSensorThresholdValue)
   972  012A  085E               	movf	main@upperBallSensorThresholdValue+1,w
   973  012B  3A80               	xorlw	128
   974  012C  00B7               	movwf	??_main
   975  012D  0862               	movf	main@value+1,w
   976  012E  3A80               	xorlw	128
   977  012F  0237               	subwf	??_main,w
   978  0130  1D03               	skipz
   979  0131  2934               	goto	u1045
   980  0132  0861               	movf	main@value,w
   981  0133  025D               	subwf	main@upperBallSensorThresholdValue,w
   982  0134                     u1045:	
   983  0134  1803               	skipnc
   984  0135  293B               	goto	l91
   985                           
   986                           ;main.c: 229: {
   987                           ;main.c: 230: LATAbits.LATA5 = 1;
   988  0136  0022               	movlb	2	; select bank2
   989  0137  168C               	bsf	12,5	;volatile
   990                           
   991                           ;main.c: 231: LATAbits.LATA0 = 1;
   992  0138  140C               	bsf	12,0	;volatile
   993                           
   994                           ;main.c: 232: state = offState;
   995  0139  0020               	movlb	0	; select bank0
   996  013A  01DF               	clrf	main@state
   997  013B                     l91:	
   998                           ;main.c: 191: while (1)
   999                           
  1000                           ;main.c: 235: }
  1001                           
  1002                           ;main.c: 233: }
  1003                           ;main.c: 234: break;
  1004                           
  1005  013B  0064               	clrwdt	;# 
  1006                           
  1007                           ;main.c: 194: value = getValue();
  1008  013C  22D4               	fcall	_getValue
  1009  013D  0874               	movf	?_getValue+1,w
  1010  013E  0020               	movlb	0	; select bank0
  1011  013F  01E2               	clrf	main@value+1
  1012  0140  07E2               	addwf	main@value+1,f
  1013  0141  0873               	movf	?_getValue,w
  1014  0142  01E1               	clrf	main@value
  1015  0143  07E1               	addwf	main@value,f
  1016  0144  085F               	movf	main@state,w
  1017                           
  1018                           ; Switch size 1, requested type "space"
  1019                           ; Number of cases is 2, Range of values is 0 to 1
  1020                           ; switch strategies available:
  1021                           ; Name         Instructions Cycles
  1022                           ; simple_byte            7     4 (average)
  1023                           ; direct_byte           10     6 (fixed)
  1024                           ; jumptable            260     6 (fixed)
  1025                           ;	Chosen strategy is simple_byte
  1026  0145  3A00               	xorlw	0	; case 0
  1027  0146  1903               	skipnz
  1028  0147  288A               	goto	l1237
  1029  0148  3A01               	xorlw	1	; case 1
  1030  0149  1903               	skipnz
  1031  014A  292A               	goto	l1277
  1032  014B  293B               	goto	l91
  1033  014C  293B               	goto	l91
  1034  014D                     __end_of_main:	
  1035                           
  1036                           	psect	text1
  1037  033D                     __ptext1:	
  1038 ;; *************** function _initInterrupt *****************
  1039 ;; Defined at:
  1040 ;;		line 7 in file "interrupt.c"
  1041 ;; Parameters:    Size  Location     Type
  1042 ;;		None
  1043 ;; Auto vars:     Size  Location     Type
  1044 ;;		None
  1045 ;; Return value:  Size  Location     Type
  1046 ;;		None               void
  1047 ;; Registers used:
  1048 ;;		wreg, status,2, status,0
  1049 ;; Tracked objects:
  1050 ;;		On entry : 0/0
  1051 ;;		On exit  : 0/0
  1052 ;;		Unchanged: 0/0
  1053 ;; Data sizes:     COMMON   BANK0   BANK1
  1054 ;;      Params:         0       0       0
  1055 ;;      Locals:         0       0       0
  1056 ;;      Temps:          0       0       0
  1057 ;;      Totals:         0       0       0
  1058 ;;Total ram usage:        0 bytes
  1059 ;; Hardware stack levels used:    1
  1060 ;; Hardware stack levels required when called:    1
  1061 ;; This function calls:
  1062 ;;		Nothing
  1063 ;; This function is called by:
  1064 ;;		_main
  1065 ;; This function uses a non-reentrant model
  1066 ;;
  1067                           
  1068                           
  1069                           ;psect for function _initInterrupt
  1070  033D                     _initInterrupt:	
  1071                           
  1072                           ;interrupt.c: 9: IOCAPbits.IOCAP2 = 1;
  1073                           
  1074                           ;incstack = 0
  1075                           ; Regs used in _initInterrupt: [wreg+status,2+status,0]
  1076  033D  0027               	movlb	7	; select bank7
  1077  033E  1511               	bsf	17,2	;volatile
  1078                           
  1079                           ;interrupt.c: 10: IOCANbits.IOCAN2 = 0;
  1080  033F  1112               	bcf	18,2	;volatile
  1081                           
  1082                           ;interrupt.c: 11: IOCAFbits.IOCAF = 0;
  1083  0340  30C0               	movlw	-64
  1084  0341  0593               	andwf	19,f	;volatile
  1085                           
  1086                           ;interrupt.c: 12: INTCONbits.IOCIF = 0;
  1087  0342  100B               	bcf	11,0	;volatile
  1088                           
  1089                           ;interrupt.c: 13: INTCONbits.IOCIE = 1;
  1090  0343  158B               	bsf	11,3	;volatile
  1091                           
  1092                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  1093  0344  178B               	bsf	11,7	;volatile
  1094                           
  1095                           ;interrupt.c: 16: INTCONbits.PEIE = 1;
  1096  0345  170B               	bsf	11,6	;volatile
  1097  0346  0008               	return
  1098  0347                     __end_of_initInterrupt:	
  1099                           
  1100                           	psect	text2
  1101  02FB                     __ptext2:	
  1102 ;; *************** function _init *****************
  1103 ;; Defined at:
  1104 ;;		line 46 in file "main.c"
  1105 ;; Parameters:    Size  Location     Type
  1106 ;;		None
  1107 ;; Auto vars:     Size  Location     Type
  1108 ;;		None
  1109 ;; Return value:  Size  Location     Type
  1110 ;;		None               void
  1111 ;; Registers used:
  1112 ;;		wreg, status,2, status,0
  1113 ;; Tracked objects:
  1114 ;;		On entry : 0/0
  1115 ;;		On exit  : 0/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMMON   BANK0   BANK1
  1118 ;;      Params:         0       0       0
  1119 ;;      Locals:         0       0       0
  1120 ;;      Temps:          0       0       0
  1121 ;;      Totals:         0       0       0
  1122 ;;Total ram usage:        0 bytes
  1123 ;; Hardware stack levels used:    1
  1124 ;; Hardware stack levels required when called:    1
  1125 ;; This function calls:
  1126 ;;		Nothing
  1127 ;; This function is called by:
  1128 ;;		_main
  1129 ;; This function uses a non-reentrant model
  1130 ;;
  1131                           
  1132                           
  1133                           ;psect for function _init
  1134  02FB                     _init:	
  1135                           
  1136                           ;main.c: 48: WDTCONbits.WDTPS = 0b01001;
  1137                           
  1138                           ;incstack = 0
  1139                           ; Regs used in _init: [wreg+status,2+status,0]
  1140  02FB  0021               	movlb	1	; select bank1
  1141  02FC  0817               	movf	23,w	;volatile
  1142  02FD  39C1               	andlw	-63
  1143  02FE  3812               	iorlw	18
  1144  02FF  0097               	movwf	23	;volatile
  1145                           
  1146                           ;main.c: 49: OSCCON=0x70;
  1147  0300  3070               	movlw	112
  1148  0301  0099               	movwf	25	;volatile
  1149                           
  1150                           ;main.c: 50: TRISAbits.TRISA5 = 0;
  1151  0302  128C               	bcf	12,5	;volatile
  1152                           
  1153                           ;main.c: 51: LATAbits.LATA5 = 1;
  1154  0303  0022               	movlb	2	; select bank2
  1155  0304  168C               	bsf	12,5	;volatile
  1156                           
  1157                           ;main.c: 52: ANSELAbits.ANSA0 = 0;
  1158  0305  0023               	movlb	3	; select bank3
  1159  0306  100C               	bcf	12,0	;volatile
  1160                           
  1161                           ;main.c: 53: TRISAbits.TRISA0 = 0;
  1162  0307  0021               	movlb	1	; select bank1
  1163  0308  100C               	bcf	12,0	;volatile
  1164                           
  1165                           ;main.c: 54: LATAbits.LATA0 = 1;
  1166  0309  0022               	movlb	2	; select bank2
  1167  030A  140C               	bsf	12,0	;volatile
  1168                           
  1169                           ;main.c: 57: ANSELAbits.ANSA2 = 0;
  1170  030B  0023               	movlb	3	; select bank3
  1171  030C  110C               	bcf	12,2	;volatile
  1172                           
  1173                           ;main.c: 58: TRISAbits.TRISA2 = 1;
  1174  030D  0021               	movlb	1	; select bank1
  1175  030E  150C               	bsf	12,2	;volatile
  1176                           
  1177                           ;main.c: 60: ANSELAbits.ANSA1 = 0;
  1178  030F  0023               	movlb	3	; select bank3
  1179  0310  108C               	bcf	12,1	;volatile
  1180                           
  1181                           ;main.c: 61: TRISAbits.TRISA1 = 0;
  1182  0311  0021               	movlb	1	; select bank1
  1183  0312  108C               	bcf	12,1	;volatile
  1184                           
  1185                           ;main.c: 62: LATAbits.LATA1 = 0;
  1186  0313  0022               	movlb	2	; select bank2
  1187  0314  108C               	bcf	12,1	;volatile
  1188  0315  0008               	return
  1189  0316                     __end_of_init:	
  1190                           
  1191                           	psect	text3
  1192  014D                     __ptext3:	
  1193 ;; *************** function _calibrate *****************
  1194 ;; Defined at:
  1195 ;;		line 88 in file "main.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;		None
  1198 ;; Auto vars:     Size  Location     Type
  1199 ;;  averageVal      4   16[BANK0 ] long 
  1200 ;;  inputVal        2   21[BANK0 ] int 
  1201 ;;  lastVal         2   14[BANK0 ] int 
  1202 ;;  i               1   20[BANK0 ] unsigned char 
  1203 ;; Return value:  Size  Location     Type
  1204 ;;                  2    8[BANK0 ] int 
  1205 ;; Registers used:
  1206 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1207 ;; Tracked objects:
  1208 ;;		On entry : 0/0
  1209 ;;		On exit  : 0/0
  1210 ;;		Unchanged: 0/0
  1211 ;; Data sizes:     COMMON   BANK0   BANK1
  1212 ;;      Params:         0       2       0
  1213 ;;      Locals:         0       9       0
  1214 ;;      Temps:          0       4       0
  1215 ;;      Totals:         0      15       0
  1216 ;;Total ram usage:       15 bytes
  1217 ;; Hardware stack levels used:    1
  1218 ;; Hardware stack levels required when called:    2
  1219 ;; This function calls:
  1220 ;;		___aldiv
  1221 ;;		__delay_ms
  1222 ;;		_abs
  1223 ;;		_getValue
  1224 ;; This function is called by:
  1225 ;;		_main
  1226 ;; This function uses a non-reentrant model
  1227 ;;
  1228                           
  1229                           
  1230                           ;psect for function _calibrate
  1231  014D                     _calibrate:	
  1232                           
  1233                           ;main.c: 93: char i;
  1234                           ;main.c: 94: long averageVal;
  1235                           ;main.c: 95: int inputVal;
  1236                           ;main.c: 96: int lastVal = 0;
  1237                           
  1238                           ;incstack = 0
  1239                           ; Regs used in _calibrate: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1240  014D  0020               	movlb	0	; select bank0
  1241  014E  01AE               	clrf	calibrate@lastVal
  1242  014F  01AF               	clrf	calibrate@lastVal+1
  1243                           
  1244                           ;main.c: 117: break;
  1245  0150  2956               	goto	l74
  1246  0151                     l1165:	
  1247                           
  1248                           ;main.c: 118: }
  1249                           ;main.c: 119: }
  1250                           ;main.c: 120: }
  1251                           ;main.c: 121: _delay_ms(20);
  1252  0151  3014               	movlw	20
  1253  0152  00F3               	movwf	__delay_ms@ms
  1254  0153  3000               	movlw	0
  1255  0154  00F4               	movwf	__delay_ms@ms+1
  1256  0155  2316               	fcall	__delay_ms
  1257  0156                     l74:	
  1258                           ;main.c: 101: while (1)
  1259                           
  1260  0156  0064               	clrwdt	;# 
  1261                           
  1262                           ;main.c: 104: inputVal = getValue();
  1263  0157  22D4               	fcall	_getValue
  1264  0158  0874               	movf	?_getValue+1,w
  1265  0159  0020               	movlb	0	; select bank0
  1266  015A  01B6               	clrf	calibrate@inputVal+1
  1267  015B  07B6               	addwf	calibrate@inputVal+1,f
  1268  015C  0873               	movf	?_getValue,w
  1269  015D  01B5               	clrf	calibrate@inputVal
  1270  015E  07B5               	addwf	calibrate@inputVal,f
  1271                           
  1272                           ;main.c: 105: if ( (inputVal < 1200)
  1273                           ;main.c: 106: && (inputVal > 300) )
  1274  015F  0836               	movf	calibrate@inputVal+1,w
  1275  0160  3A80               	xorlw	128
  1276  0161  00FF               	movwf	127
  1277  0162  3084               	movlw	132
  1278  0163  027F               	subwf	127,w
  1279  0164  1D03               	skipz
  1280  0165  2968               	goto	u875
  1281  0166  30B0               	movlw	176
  1282  0167  0235               	subwf	calibrate@inputVal,w
  1283  0168                     u875:	
  1284  0168  1803               	skipnc
  1285  0169  2951               	goto	l1165
  1286  016A  0020               	movlb	0	; select bank0
  1287  016B  0836               	movf	calibrate@inputVal+1,w
  1288  016C  3A80               	xorlw	128
  1289  016D  00FF               	movwf	127
  1290  016E  3081               	movlw	129
  1291  016F  027F               	subwf	127,w
  1292  0170  1D03               	skipz
  1293  0171  2974               	goto	u885
  1294  0172  302D               	movlw	45
  1295  0173  0235               	subwf	calibrate@inputVal,w
  1296  0174                     u885:	
  1297  0174  1C03               	skipc
  1298  0175  2951               	goto	l1165
  1299                           
  1300                           ;main.c: 107: {
  1301                           ;main.c: 108: lastVal = inputVal;
  1302  0176  0020               	movlb	0	; select bank0
  1303  0177  0836               	movf	calibrate@inputVal+1,w
  1304  0178  01AF               	clrf	calibrate@lastVal+1
  1305  0179  07AF               	addwf	calibrate@lastVal+1,f
  1306  017A  0835               	movf	calibrate@inputVal,w
  1307  017B  01AE               	clrf	calibrate@lastVal
  1308  017C  07AE               	addwf	calibrate@lastVal,f
  1309                           
  1310                           ;main.c: 109: inputVal = getValue();
  1311  017D  22D4               	fcall	_getValue
  1312  017E  0874               	movf	?_getValue+1,w
  1313  017F  0020               	movlb	0	; select bank0
  1314  0180  01B6               	clrf	calibrate@inputVal+1
  1315  0181  07B6               	addwf	calibrate@inputVal+1,f
  1316  0182  0873               	movf	?_getValue,w
  1317  0183  01B5               	clrf	calibrate@inputVal
  1318  0184  07B5               	addwf	calibrate@inputVal,f
  1319                           
  1320                           ;main.c: 110: if ( (inputVal < 1200)
  1321                           ;main.c: 111: && (inputVal > 300) )
  1322  0185  0836               	movf	calibrate@inputVal+1,w
  1323  0186  3A80               	xorlw	128
  1324  0187  00FF               	movwf	127
  1325  0188  3084               	movlw	132
  1326  0189  027F               	subwf	127,w
  1327  018A  1D03               	skipz
  1328  018B  298E               	goto	u895
  1329  018C  30B0               	movlw	176
  1330  018D  0235               	subwf	calibrate@inputVal,w
  1331  018E                     u895:	
  1332  018E  1803               	skipnc
  1333  018F  2951               	goto	l1165
  1334  0190  0020               	movlb	0	; select bank0
  1335  0191  0836               	movf	calibrate@inputVal+1,w
  1336  0192  3A80               	xorlw	128
  1337  0193  00FF               	movwf	127
  1338  0194  3081               	movlw	129
  1339  0195  027F               	subwf	127,w
  1340  0196  1D03               	skipz
  1341  0197  299A               	goto	u905
  1342  0198  302D               	movlw	45
  1343  0199  0235               	subwf	calibrate@inputVal,w
  1344  019A                     u905:	
  1345  019A  1C03               	skipc
  1346  019B  2951               	goto	l1165
  1347                           
  1348                           ;main.c: 112: {
  1349                           ;main.c: 113: if ( abs( inputVal - lastVal ) < 10 )
  1350  019C  0020               	movlb	0	; select bank0
  1351  019D  092E               	comf	calibrate@lastVal,w
  1352  019E  00AA               	movwf	??_calibrate
  1353  019F  092F               	comf	calibrate@lastVal+1,w
  1354  01A0  00AB               	movwf	??_calibrate+1
  1355  01A1  0AAA               	incf	??_calibrate,f
  1356  01A2  1903               	skipnz
  1357  01A3  0AAB               	incf	??_calibrate+1,f
  1358  01A4  0835               	movf	calibrate@inputVal,w
  1359  01A5  072A               	addwf	??_calibrate,w
  1360  01A6  00F3               	movwf	abs@a
  1361  01A7  0836               	movf	calibrate@inputVal+1,w
  1362  01A8  3D2B               	addwfc	??_calibrate+1,w
  1363  01A9  00F4               	movwf	abs@a+1
  1364  01AA  232F               	fcall	_abs
  1365  01AB  0874               	movf	?_abs+1,w
  1366  01AC  3A80               	xorlw	128
  1367  01AD  00FF               	movwf	127
  1368  01AE  3080               	movlw	128
  1369  01AF  027F               	subwf	127,w
  1370  01B0  1D03               	skipz
  1371  01B1  29B4               	goto	u915
  1372  01B2  300A               	movlw	10
  1373  01B3  0273               	subwf	?_abs,w
  1374  01B4                     u915:	
  1375  01B4  1803               	skipnc
  1376  01B5  2951               	goto	l1165
  1377                           
  1378                           ;main.c: 114: {
  1379                           ;main.c: 115: cumulativeVal = inputVal;
  1380  01B6  0020               	movlb	0	; select bank0
  1381  01B7  0835               	movf	calibrate@inputVal,w
  1382  01B8  00E9               	movwf	_cumulativeVal
  1383  01B9  0836               	movf	calibrate@inputVal+1,w
  1384  01BA  00EA               	movwf	_cumulativeVal+1
  1385  01BB  0D89               	rlf	9,f
  1386  01BC  3B89               	subwfb	9,f
  1387  01BD  0989               	comf	9,f
  1388  01BE  00EB               	movwf	_cumulativeVal+2
  1389  01BF  00EC               	movwf	_cumulativeVal+3
  1390                           
  1391                           ;main.c: 116: averageVal = inputVal;
  1392  01C0  0835               	movf	calibrate@inputVal,w
  1393  01C1  00B0               	movwf	calibrate@averageVal
  1394  01C2  0836               	movf	calibrate@inputVal+1,w
  1395  01C3  00B1               	movwf	calibrate@averageVal+1
  1396  01C4  0D89               	rlf	9,f
  1397  01C5  3B89               	subwfb	9,f
  1398  01C6  0989               	comf	9,f
  1399  01C7  00B2               	movwf	calibrate@averageVal+2
  1400  01C8  00B3               	movwf	calibrate@averageVal+3
  1401                           
  1402                           ;main.c: 122: }
  1403                           ;main.c: 125: i = 1;
  1404  01C9  01B4               	clrf	calibrate@i
  1405  01CA  0AB4               	incf	calibrate@i,f
  1406  01CB                     l1179:	
  1407                           ;main.c: 126: while (i < 10)
  1408                           
  1409  01CB  300A               	movlw	10
  1410  01CC  0020               	movlb	0	; select bank0
  1411  01CD  0234               	subwf	calibrate@i,w
  1412  01CE  1803               	btfsc	3,0
  1413  01CF  2A2B               	goto	l1181
  1414                           
  1415                           ;main.c: 127: {
  1416                           ;main.c: 128: inputVal = getValue();
  1417  01D0  22D4               	fcall	_getValue
  1418  01D1  0874               	movf	?_getValue+1,w
  1419  01D2  0020               	movlb	0	; select bank0
  1420  01D3  01B6               	clrf	calibrate@inputVal+1
  1421  01D4  07B6               	addwf	calibrate@inputVal+1,f
  1422  01D5  0873               	movf	?_getValue,w
  1423  01D6  01B5               	clrf	calibrate@inputVal
  1424  01D7  07B5               	addwf	calibrate@inputVal,f
  1425                           
  1426                           ;main.c: 129: if ( abs( inputVal - averageVal ) < 10 )
  1427  01D8  0930               	comf	calibrate@averageVal,w
  1428  01D9  00AA               	movwf	??_calibrate
  1429  01DA  0931               	comf	calibrate@averageVal+1,w
  1430  01DB  00AB               	movwf	??_calibrate+1
  1431  01DC  0AAA               	incf	??_calibrate,f
  1432  01DD  1903               	skipnz
  1433  01DE  0AAB               	incf	??_calibrate+1,f
  1434  01DF  0835               	movf	calibrate@inputVal,w
  1435  01E0  072A               	addwf	??_calibrate,w
  1436  01E1  00F3               	movwf	abs@a
  1437  01E2  0836               	movf	calibrate@inputVal+1,w
  1438  01E3  3D2B               	addwfc	??_calibrate+1,w
  1439  01E4  00F4               	movwf	abs@a+1
  1440  01E5  232F               	fcall	_abs
  1441  01E6  0874               	movf	?_abs+1,w
  1442  01E7  3A80               	xorlw	128
  1443  01E8  00FF               	movwf	127
  1444  01E9  3080               	movlw	128
  1445  01EA  027F               	subwf	127,w
  1446  01EB  1D03               	skipz
  1447  01EC  29EF               	goto	u925
  1448  01ED  300A               	movlw	10
  1449  01EE  0273               	subwf	?_abs,w
  1450  01EF                     u925:	
  1451  01EF  1803               	skipnc
  1452  01F0  2A25               	goto	l1177
  1453                           
  1454                           ;main.c: 130: {
  1455                           ;main.c: 131: cumulativeVal += inputVal;
  1456  01F1  0020               	movlb	0	; select bank0
  1457  01F2  0835               	movf	calibrate@inputVal,w
  1458  01F3  00AA               	movwf	??_calibrate
  1459  01F4  0836               	movf	calibrate@inputVal+1,w
  1460  01F5  00AB               	movwf	??_calibrate+1
  1461  01F6  3000               	movlw	0
  1462  01F7  1BAB               	btfsc	??_calibrate+1,7
  1463  01F8  30FF               	movlw	255
  1464  01F9  00AC               	movwf	??_calibrate+2
  1465  01FA  00AD               	movwf	??_calibrate+3
  1466  01FB  082A               	movf	??_calibrate,w
  1467  01FC  07E9               	addwf	_cumulativeVal,f
  1468  01FD  082B               	movf	??_calibrate+1,w
  1469  01FE  3DEA               	addwfc	_cumulativeVal+1,f
  1470  01FF  082C               	movf	??_calibrate+2,w
  1471  0200  3DEB               	addwfc	_cumulativeVal+2,f
  1472  0201  082D               	movf	??_calibrate+3,w
  1473  0202  3DEC               	addwfc	_cumulativeVal+3,f
  1474                           
  1475                           ;main.c: 132: averageVal = cumulativeVal / (i + 1);
  1476  0203  0834               	movf	calibrate@i,w
  1477  0204  3E01               	addlw	1
  1478  0205  00A0               	movwf	___aldiv@divisor
  1479  0206  3000               	movlw	0
  1480  0207  1803               	skipnc
  1481  0208  3001               	movlw	1
  1482  0209  00A1               	movwf	___aldiv@divisor+1
  1483  020A  01A2               	clrf	___aldiv@divisor+2
  1484  020B  1BA1               	btfsc	___aldiv@divisor+1,7
  1485  020C  03A2               	decf	___aldiv@divisor+2,f
  1486  020D  0822               	movf	___aldiv@divisor+2,w
  1487  020E  00A3               	movwf	___aldiv@divisor+3
  1488  020F  086C               	movf	_cumulativeVal+3,w
  1489  0210  00A7               	movwf	___aldiv@dividend+3
  1490  0211  086B               	movf	_cumulativeVal+2,w
  1491  0212  00A6               	movwf	___aldiv@dividend+2
  1492  0213  086A               	movf	_cumulativeVal+1,w
  1493  0214  00A5               	movwf	___aldiv@dividend+1
  1494  0215  0869               	movf	_cumulativeVal,w
  1495  0216  00A4               	movwf	___aldiv@dividend
  1496  0217  2252               	fcall	___aldiv
  1497  0218  0020               	movlb	0	; select bank0
  1498  0219  0823               	movf	?___aldiv+3,w
  1499  021A  00B3               	movwf	calibrate@averageVal+3
  1500  021B  0822               	movf	?___aldiv+2,w
  1501  021C  00B2               	movwf	calibrate@averageVal+2
  1502  021D  0821               	movf	?___aldiv+1,w
  1503  021E  00B1               	movwf	calibrate@averageVal+1
  1504  021F  0820               	movf	?___aldiv,w
  1505  0220  00B0               	movwf	calibrate@averageVal
  1506                           
  1507                           ;main.c: 133: i ++;
  1508  0221  3001               	movlw	1
  1509  0222  00AA               	movwf	??_calibrate
  1510  0223  082A               	movf	??_calibrate,w
  1511  0224  07B4               	addwf	calibrate@i,f
  1512  0225                     l1177:	
  1513                           
  1514                           ;main.c: 134: }
  1515                           ;main.c: 135: _delay_ms(20);
  1516  0225  3014               	movlw	20
  1517  0226  00F3               	movwf	__delay_ms@ms
  1518  0227  3000               	movlw	0
  1519  0228  00F4               	movwf	__delay_ms@ms+1
  1520  0229  2316               	fcall	__delay_ms
  1521  022A  29CB               	goto	l1179
  1522  022B                     l1181:	
  1523                           
  1524                           ;main.c: 136: }
  1525                           ;main.c: 141: for (i = 0; i < 2; i ++)
  1526  022B  01B4               	clrf	calibrate@i
  1527  022C  3002               	movlw	2
  1528  022D  0234               	subwf	calibrate@i,w
  1529  022E  1803               	btfsc	3,0
  1530  022F  2A4B               	goto	l1197
  1531  0230                     l84:	
  1532  0230  0064               	clrwdt	;# 
  1533                           
  1534                           ;main.c: 144: LATAbits.LATA5 = 0;
  1535  0231  0022               	movlb	2	; select bank2
  1536  0232  128C               	bcf	12,5	;volatile
  1537                           
  1538                           ;main.c: 145: LATAbits.LATA0 = 0;
  1539  0233  100C               	bcf	12,0	;volatile
  1540                           
  1541                           ;main.c: 146: _delay_ms(200);
  1542  0234  30C8               	movlw	200
  1543  0235  00F3               	movwf	__delay_ms@ms
  1544  0236  3000               	movlw	0
  1545  0237  00F4               	movwf	__delay_ms@ms+1
  1546  0238  2316               	fcall	__delay_ms
  1547  0239  0064               	clrwdt	;# 
  1548                           
  1549                           ;main.c: 149: LATAbits.LATA5= 1;
  1550  023A  0022               	movlb	2	; select bank2
  1551  023B  168C               	bsf	12,5	;volatile
  1552                           
  1553                           ;main.c: 150: LATAbits.LATA0 = 1;
  1554  023C  140C               	bsf	12,0	;volatile
  1555                           
  1556                           ;main.c: 151: _delay_ms(200);
  1557  023D  30C8               	movlw	200
  1558  023E  00F3               	movwf	__delay_ms@ms
  1559  023F  3000               	movlw	0
  1560  0240  00F4               	movwf	__delay_ms@ms+1
  1561  0241  2316               	fcall	__delay_ms
  1562  0242  3001               	movlw	1
  1563  0243  0020               	movlb	0	; select bank0
  1564  0244  00AA               	movwf	??_calibrate
  1565  0245  082A               	movf	??_calibrate,w
  1566  0246  07B4               	addwf	calibrate@i,f
  1567  0247  3002               	movlw	2
  1568  0248  0234               	subwf	calibrate@i,w
  1569  0249  1C03               	skipc
  1570  024A  2A30               	goto	l84
  1571  024B                     l1197:	
  1572                           
  1573                           ;main.c: 152: }
  1574                           ;main.c: 154: return averageVal;
  1575  024B  0831               	movf	calibrate@averageVal+1,w
  1576  024C  01A9               	clrf	?_calibrate+1
  1577  024D  07A9               	addwf	?_calibrate+1,f
  1578  024E  0830               	movf	calibrate@averageVal,w
  1579  024F  01A8               	clrf	?_calibrate
  1580  0250  07A8               	addwf	?_calibrate,f
  1581  0251  0008               	return
  1582  0252                     __end_of_calibrate:	
  1583                           
  1584                           	psect	text4
  1585  02D4                     __ptext4:	
  1586 ;; *************** function _getValue *****************
  1587 ;; Defined at:
  1588 ;;		line 66 in file "main.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;		None
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;		None
  1593 ;; Return value:  Size  Location     Type
  1594 ;;                  2    3[COMMON] int 
  1595 ;; Registers used:
  1596 ;;		wreg, status,2, status,0
  1597 ;; Tracked objects:
  1598 ;;		On entry : 0/0
  1599 ;;		On exit  : 0/0
  1600 ;;		Unchanged: 0/0
  1601 ;; Data sizes:     COMMON   BANK0   BANK1
  1602 ;;      Params:         2       0       0
  1603 ;;      Locals:         0       0       0
  1604 ;;      Temps:          2       0       0
  1605 ;;      Totals:         4       0       0
  1606 ;;Total ram usage:        4 bytes
  1607 ;; Hardware stack levels used:    1
  1608 ;; Hardware stack levels required when called:    1
  1609 ;; This function calls:
  1610 ;;		Nothing
  1611 ;; This function is called by:
  1612 ;;		_calibrate
  1613 ;;		_main
  1614 ;; This function uses a non-reentrant model
  1615 ;;
  1616                           
  1617                           
  1618                           ;psect for function _getValue
  1619  02D4                     _getValue:	
  1620                           
  1621                           ;main.c: 70: FVRCONbits.ADFVR = 0b10;
  1622                           
  1623                           ;incstack = 0
  1624                           ; Regs used in _getValue: [wreg+status,2+status,0]
  1625  02D4  0022               	movlb	2	; select bank2
  1626  02D5  0817               	movf	23,w	;volatile
  1627  02D6  39FC               	andlw	-4
  1628  02D7  3802               	iorlw	2
  1629  02D8  0097               	movwf	23	;volatile
  1630                           
  1631                           ;main.c: 71: FVRCONbits.FVREN = 1;
  1632  02D9  1797               	bsf	23,7	;volatile
  1633                           
  1634                           ;main.c: 72: ADCON1bits.ADPREF = 0b11;
  1635  02DA  3003               	movlw	3
  1636  02DB  0021               	movlb	1	; select bank1
  1637  02DC  049E               	iorwf	30,f	;volatile
  1638                           
  1639                           ;main.c: 73: ADCON1bits.ADCS = 0b001;
  1640  02DD  081E               	movf	30,w	;volatile
  1641  02DE  398F               	andlw	-113
  1642  02DF  3810               	iorlw	16
  1643  02E0  009E               	movwf	30	;volatile
  1644                           
  1645                           ;main.c: 74: ANSELAbits.ANSA4 = 1;
  1646  02E1  0023               	movlb	3	; select bank3
  1647  02E2  160C               	bsf	12,4	;volatile
  1648                           
  1649                           ;main.c: 75: TRISAbits.TRISA4 = 1;
  1650  02E3  0021               	movlb	1	; select bank1
  1651  02E4  160C               	bsf	12,4	;volatile
  1652                           
  1653                           ;main.c: 76: ADCON0bits.CHS = 3;
  1654  02E5  081D               	movf	29,w	;volatile
  1655  02E6  3983               	andlw	-125
  1656  02E7  380C               	iorlw	12
  1657  02E8  009D               	movwf	29	;volatile
  1658                           
  1659                           ;main.c: 77: ADCON0bits.ADON = 1;
  1660  02E9  141D               	bsf	29,0	;volatile
  1661                           
  1662                           ;main.c: 78: ADCON0bits.GO_nDONE = 1;
  1663  02EA  149D               	bsf	29,1	;volatile
  1664  02EB                     l68:	
  1665                           ;main.c: 79: while (ADCON0bits.GO_nDONE);
  1666                           
  1667  02EB  189D               	btfsc	29,1	;volatile
  1668  02EC  2AEB               	goto	l68
  1669                           
  1670                           ;main.c: 83: return ADRES >> 6;
  1671  02ED  081C               	movf	28,w	;volatile
  1672  02EE  00F6               	movwf	??_getValue+1
  1673  02EF  081B               	movf	27,w	;volatile
  1674  02F0  00F5               	movwf	??_getValue
  1675  02F1  3006               	movlw	6
  1676  02F2                     u475:	
  1677  02F2  36F6               	lsrf	??_getValue+1,f
  1678  02F3  0CF5               	rrf	??_getValue,f
  1679  02F4  0B89               	decfsz	9,f
  1680  02F5  2AF2               	goto	u475
  1681  02F6  0875               	movf	??_getValue,w
  1682  02F7  00F3               	movwf	?_getValue
  1683  02F8  0876               	movf	??_getValue+1,w
  1684  02F9  00F4               	movwf	?_getValue+1
  1685  02FA  0008               	return
  1686  02FB                     __end_of_getValue:	
  1687                           
  1688                           	psect	text5
  1689  032F                     __ptext5:	
  1690 ;; *************** function _abs *****************
  1691 ;; Defined at:
  1692 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.31\sources\common\abs.c"
  1693 ;; Parameters:    Size  Location     Type
  1694 ;;  a               2    3[COMMON] int 
  1695 ;; Auto vars:     Size  Location     Type
  1696 ;;		None
  1697 ;; Return value:  Size  Location     Type
  1698 ;;                  2    3[COMMON] int 
  1699 ;; Registers used:
  1700 ;;		wreg, status,2, status,0
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMMON   BANK0   BANK1
  1706 ;;      Params:         2       0       0
  1707 ;;      Locals:         0       0       0
  1708 ;;      Temps:          2       0       0
  1709 ;;      Totals:         4       0       0
  1710 ;;Total ram usage:        4 bytes
  1711 ;; Hardware stack levels used:    1
  1712 ;; Hardware stack levels required when called:    1
  1713 ;; This function calls:
  1714 ;;		Nothing
  1715 ;; This function is called by:
  1716 ;;		_calibrate
  1717 ;; This function uses a non-reentrant model
  1718 ;;
  1719                           
  1720                           
  1721                           ;psect for function _abs
  1722  032F                     _abs:	
  1723                           
  1724                           ;incstack = 0
  1725                           ; Regs used in _abs: [wreg+status,2+status,0]
  1726  032F  1FF4               	btfss	abs@a+1,7
  1727  0330  0008               	return
  1728  0331  0973               	comf	abs@a,w
  1729  0332  00F5               	movwf	??_abs
  1730  0333  0974               	comf	abs@a+1,w
  1731  0334  00F6               	movwf	??_abs+1
  1732  0335  0AF5               	incf	??_abs,f
  1733  0336  1903               	skipnz
  1734  0337  0AF6               	incf	??_abs+1,f
  1735  0338  0875               	movf	??_abs,w
  1736  0339  00F3               	movwf	?_abs
  1737  033A  0876               	movf	??_abs+1,w
  1738  033B  00F4               	movwf	?_abs+1
  1739  033C  0008               	return
  1740  033D                     __end_of_abs:	
  1741                           
  1742                           	psect	text6
  1743  0316                     __ptext6:	
  1744 ;; *************** function __delay_ms *****************
  1745 ;; Defined at:
  1746 ;;		line 34 in file "main.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;  ms              2    3[COMMON] unsigned int 
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;  us              1    7[COMMON] unsigned char 
  1751 ;;  i               1    6[COMMON] unsigned char 
  1752 ;; Return value:  Size  Location     Type
  1753 ;;		None               void
  1754 ;; Registers used:
  1755 ;;		wreg, status,2, status,0
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMMON   BANK0   BANK1
  1761 ;;      Params:         2       0       0
  1762 ;;      Locals:         2       0       0
  1763 ;;      Temps:          1       0       0
  1764 ;;      Totals:         5       0       0
  1765 ;;Total ram usage:        5 bytes
  1766 ;; Hardware stack levels used:    1
  1767 ;; Hardware stack levels required when called:    1
  1768 ;; This function calls:
  1769 ;;		Nothing
  1770 ;; This function is called by:
  1771 ;;		_calibrate
  1772 ;;		_main
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776                           
  1777                           ;psect for function __delay_ms
  1778  0316                     __delay_ms:	
  1779                           
  1780                           ;main.c: 36: unsigned char i;
  1781                           ;main.c: 37: if (ms == 0) return;
  1782                           
  1783                           ;incstack = 0
  1784                           ; Regs used in __delay_ms: [wreg+status,2+status,0]
  1785  0316  0874               	movf	__delay_ms@ms+1,w
  1786  0317  0473               	iorwf	__delay_ms@ms,w
  1787  0318  1903               	btfsc	3,2
  1788  0319  0008               	return
  1789                           
  1790                           ;main.c: 39: i = 4;
  1791                           
  1792                           ;main.c: 38: do {
  1793  031A  3004               	movlw	4
  1794  031B  00F5               	movwf	??__delay_ms
  1795  031C  0875               	movf	??__delay_ms,w
  1796  031D  00F6               	movwf	__delay_ms@i
  1797  031E                     l57:	
  1798                           ;main.c: 40: do {
  1799                           
  1800                           
  1801                           ;main.c: 41: { unsigned char us; us = (164)/(12000000/8000000L)|1; while(--us != 0) cont
      +                          inue; };
  1802  031E  30A5               	movlw	165
  1803  031F  00F5               	movwf	??__delay_ms
  1804  0320  0875               	movf	??__delay_ms,w
  1805  0321  00F7               	movwf	__delay_ms@us
  1806  0322                     l857:	
  1807  0322  3001               	movlw	1
  1808  0323  02F7               	subwf	__delay_ms@us,f
  1809  0324  1D03               	btfss	3,2
  1810  0325  2B22               	goto	l857
  1811                           
  1812                           ;main.c: 42: } while(--i);
  1813  0326  3001               	movlw	1
  1814  0327  02F6               	subwf	__delay_ms@i,f
  1815  0328  1D03               	btfss	3,2
  1816  0329  2B1E               	goto	l57
  1817                           
  1818                           ;main.c: 43: } while(--ms);
  1819  032A  3001               	movlw	1
  1820  032B  02F3               	subwf	__delay_ms@ms,f
  1821  032C  3000               	movlw	0
  1822  032D  3BF4               	subwfb	__delay_ms@ms+1,f
  1823  032E  2B16               	goto	__delay_ms
  1824  032F                     __end_of__delay_ms:	
  1825                           
  1826                           	psect	text7
  1827  0252                     __ptext7:	
  1828 ;; *************** function ___aldiv *****************
  1829 ;; Defined at:
  1830 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.31\sources\common\aldiv.c"
  1831 ;; Parameters:    Size  Location     Type
  1832 ;;  divisor         4    0[BANK0 ] long 
  1833 ;;  dividend        4    4[BANK0 ] long 
  1834 ;; Auto vars:     Size  Location     Type
  1835 ;;  quotient        4    6[COMMON] long 
  1836 ;;  sign            1    5[COMMON] unsigned char 
  1837 ;;  counter         1    4[COMMON] unsigned char 
  1838 ;; Return value:  Size  Location     Type
  1839 ;;                  4    0[BANK0 ] long 
  1840 ;; Registers used:
  1841 ;;		wreg, status,2, status,0
  1842 ;; Tracked objects:
  1843 ;;		On entry : 0/0
  1844 ;;		On exit  : 0/0
  1845 ;;		Unchanged: 0/0
  1846 ;; Data sizes:     COMMON   BANK0   BANK1
  1847 ;;      Params:         0       8       0
  1848 ;;      Locals:         6       0       0
  1849 ;;      Temps:          1       0       0
  1850 ;;      Totals:         7       8       0
  1851 ;;Total ram usage:       15 bytes
  1852 ;; Hardware stack levels used:    1
  1853 ;; Hardware stack levels required when called:    1
  1854 ;; This function calls:
  1855 ;;		Nothing
  1856 ;; This function is called by:
  1857 ;;		_calibrate
  1858 ;; This function uses a non-reentrant model
  1859 ;;
  1860                           
  1861                           
  1862                           ;psect for function ___aldiv
  1863  0252                     ___aldiv:	
  1864                           
  1865                           ;incstack = 0
  1866                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1867  0252  01F5               	clrf	___aldiv@sign
  1868  0253  0020               	movlb	0	; select bank0
  1869  0254  1FA3               	btfss	___aldiv@divisor+3,7
  1870  0255  2A63               	goto	l223
  1871  0256  09A0               	comf	___aldiv@divisor,f
  1872  0257  09A1               	comf	___aldiv@divisor+1,f
  1873  0258  09A2               	comf	___aldiv@divisor+2,f
  1874  0259  09A3               	comf	___aldiv@divisor+3,f
  1875  025A  0AA0               	incf	___aldiv@divisor,f
  1876  025B  1903               	skipnz
  1877  025C  0AA1               	incf	___aldiv@divisor+1,f
  1878  025D  1903               	skipnz
  1879  025E  0AA2               	incf	___aldiv@divisor+2,f
  1880  025F  1903               	skipnz
  1881  0260  0AA3               	incf	___aldiv@divisor+3,f
  1882  0261  01F5               	clrf	___aldiv@sign
  1883  0262  0AF5               	incf	___aldiv@sign,f
  1884  0263                     l223:	
  1885  0263  1FA7               	btfss	___aldiv@dividend+3,7
  1886  0264  2A74               	goto	l1115
  1887  0265  09A4               	comf	___aldiv@dividend,f
  1888  0266  09A5               	comf	___aldiv@dividend+1,f
  1889  0267  09A6               	comf	___aldiv@dividend+2,f
  1890  0268  09A7               	comf	___aldiv@dividend+3,f
  1891  0269  0AA4               	incf	___aldiv@dividend,f
  1892  026A  1903               	skipnz
  1893  026B  0AA5               	incf	___aldiv@dividend+1,f
  1894  026C  1903               	skipnz
  1895  026D  0AA6               	incf	___aldiv@dividend+2,f
  1896  026E  1903               	skipnz
  1897  026F  0AA7               	incf	___aldiv@dividend+3,f
  1898  0270  3001               	movlw	1
  1899  0271  00F3               	movwf	??___aldiv
  1900  0272  0873               	movf	??___aldiv,w
  1901  0273  06F5               	xorwf	___aldiv@sign,f
  1902  0274                     l1115:	
  1903  0274  3000               	movlw	0
  1904  0275  00F9               	movwf	___aldiv@quotient+3
  1905  0276  3000               	movlw	0
  1906  0277  00F8               	movwf	___aldiv@quotient+2
  1907  0278  3000               	movlw	0
  1908  0279  00F7               	movwf	___aldiv@quotient+1
  1909  027A  3000               	movlw	0
  1910  027B  00F6               	movwf	___aldiv@quotient
  1911  027C  0823               	movf	___aldiv@divisor+3,w
  1912  027D  0422               	iorwf	___aldiv@divisor+2,w
  1913  027E  0421               	iorwf	___aldiv@divisor+1,w
  1914  027F  0420               	iorwf	___aldiv@divisor,w
  1915  0280  1903               	skipnz
  1916  0281  2ABD               	goto	l1137
  1917  0282  01F4               	clrf	___aldiv@counter
  1918  0283  0AF4               	incf	___aldiv@counter,f
  1919  0284                     l1123:	
  1920  0284  1BA3               	btfsc	___aldiv@divisor+3,7
  1921  0285  2A92               	goto	l1125
  1922  0286  3001               	movlw	1
  1923  0287                     u805:	
  1924  0287  35A0               	lslf	___aldiv@divisor,f
  1925  0288  0DA1               	rlf	___aldiv@divisor+1,f
  1926  0289  0DA2               	rlf	___aldiv@divisor+2,f
  1927  028A  0DA3               	rlf	___aldiv@divisor+3,f
  1928  028B  0B89               	decfsz	9,f
  1929  028C  2A87               	goto	u805
  1930  028D  3001               	movlw	1
  1931  028E  00F3               	movwf	??___aldiv
  1932  028F  0873               	movf	??___aldiv,w
  1933  0290  07F4               	addwf	___aldiv@counter,f
  1934  0291  2A84               	goto	l1123
  1935  0292                     l1125:	
  1936  0292  3001               	movlw	1
  1937  0293                     u825:	
  1938  0293  35F6               	lslf	___aldiv@quotient,f
  1939  0294  0DF7               	rlf	___aldiv@quotient+1,f
  1940  0295  0DF8               	rlf	___aldiv@quotient+2,f
  1941  0296  0DF9               	rlf	___aldiv@quotient+3,f
  1942  0297  0B89               	decfsz	9,f
  1943  0298  2A93               	goto	u825
  1944  0299  0823               	movf	___aldiv@divisor+3,w
  1945  029A  0227               	subwf	___aldiv@dividend+3,w
  1946  029B  1D03               	skipz
  1947  029C  2AA7               	goto	u835
  1948  029D  0822               	movf	___aldiv@divisor+2,w
  1949  029E  0226               	subwf	___aldiv@dividend+2,w
  1950  029F  1D03               	skipz
  1951  02A0  2AA7               	goto	u835
  1952  02A1  0821               	movf	___aldiv@divisor+1,w
  1953  02A2  0225               	subwf	___aldiv@dividend+1,w
  1954  02A3  1D03               	skipz
  1955  02A4  2AA7               	goto	u835
  1956  02A5  0820               	movf	___aldiv@divisor,w
  1957  02A6  0224               	subwf	___aldiv@dividend,w
  1958  02A7                     u835:	
  1959  02A7  1C03               	skipc
  1960  02A8  2AB2               	goto	l1133
  1961  02A9  0820               	movf	___aldiv@divisor,w
  1962  02AA  02A4               	subwf	___aldiv@dividend,f
  1963  02AB  0821               	movf	___aldiv@divisor+1,w
  1964  02AC  3BA5               	subwfb	___aldiv@dividend+1,f
  1965  02AD  0822               	movf	___aldiv@divisor+2,w
  1966  02AE  3BA6               	subwfb	___aldiv@dividend+2,f
  1967  02AF  0823               	movf	___aldiv@divisor+3,w
  1968  02B0  3BA7               	subwfb	___aldiv@dividend+3,f
  1969  02B1  1476               	bsf	___aldiv@quotient,0
  1970  02B2                     l1133:	
  1971  02B2  3001               	movlw	1
  1972  02B3                     u845:	
  1973  02B3  36A3               	lsrf	___aldiv@divisor+3,f
  1974  02B4  0CA2               	rrf	___aldiv@divisor+2,f
  1975  02B5  0CA1               	rrf	___aldiv@divisor+1,f
  1976  02B6  0CA0               	rrf	___aldiv@divisor,f
  1977  02B7  0B89               	decfsz	9,f
  1978  02B8  2AB3               	goto	u845
  1979  02B9  3001               	movlw	1
  1980  02BA  02F4               	subwf	___aldiv@counter,f
  1981  02BB  1D03               	btfss	3,2
  1982  02BC  2A92               	goto	l1125
  1983  02BD                     l1137:	
  1984  02BD  0875               	movf	___aldiv@sign,w
  1985  02BE  1903               	btfsc	3,2
  1986  02BF  2ACB               	goto	l1141
  1987  02C0  09F6               	comf	___aldiv@quotient,f
  1988  02C1  09F7               	comf	___aldiv@quotient+1,f
  1989  02C2  09F8               	comf	___aldiv@quotient+2,f
  1990  02C3  09F9               	comf	___aldiv@quotient+3,f
  1991  02C4  0AF6               	incf	___aldiv@quotient,f
  1992  02C5  1903               	skipnz
  1993  02C6  0AF7               	incf	___aldiv@quotient+1,f
  1994  02C7  1903               	skipnz
  1995  02C8  0AF8               	incf	___aldiv@quotient+2,f
  1996  02C9  1903               	skipnz
  1997  02CA  0AF9               	incf	___aldiv@quotient+3,f
  1998  02CB                     l1141:	
  1999  02CB  0879               	movf	___aldiv@quotient+3,w
  2000  02CC  00A3               	movwf	?___aldiv+3
  2001  02CD  0878               	movf	___aldiv@quotient+2,w
  2002  02CE  00A2               	movwf	?___aldiv+2
  2003  02CF  0877               	movf	___aldiv@quotient+1,w
  2004  02D0  00A1               	movwf	?___aldiv+1
  2005  02D1  0876               	movf	___aldiv@quotient,w
  2006  02D2  00A0               	movwf	?___aldiv
  2007  02D3  0008               	return
  2008  02D4                     __end_of___aldiv:	


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      11
    BANK0            80     73      77
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _calibrate->___aldiv

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_calibrate
    _calibrate->___aldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                50    50      0    3014
                                             23 BANK0     50    50      0
                          __delay_ms
                          _calibrate
                           _getValue
                               _init
                      _initInterrupt
 ---------------------------------------------------------------------------------
 (1) _initInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibrate                                           15    13      2    1768
                                              8 BANK0     15    13      2
                            ___aldiv
                          __delay_ms
                                _abs
                           _getValue
 ---------------------------------------------------------------------------------
 (1) _getValue                                             4     2      2       0
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     172
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) __delay_ms                                            5     3      2     461
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     575
                                              3 COMMON     7     7      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   __delay_ms
   _calibrate
     ___aldiv
     __delay_ms
     _abs
     _getValue
   _getValue
   _init
   _initInterrupt

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      58       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     49      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      58       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Fri Jul 17 17:04:01 2015

                                _d 03D0                        __CFG_CP$OFF 0000  
                               l57 031E                                 l74 0156  
                               l91 013B                                 l68 02EB  
                               l84 0230                        __CFG_CPD$ON 0000  
                              l223 0263                                l857 0322  
main@upperBallSensorThresholdValue 005D                                u475 02F2  
                              u805 0287                                u825 0293  
                              u905 019A                                u835 02A7  
                              u915 01B4                                u845 02B3  
                              u925 01EF                                u875 0168  
                              u885 0174                                u965 0061  
                              u895 018E                                u975 0079  
                              u985 0097                                _abs 032F  
                              _isr 0004                       __CFG_BORV$HI 0000  
                              wreg 0009                       __CFG_LVP$OFF 0000  
                             l1123 0284                               l1115 0274  
                             ?_abs 0073                               l1141 02CB  
                             l1133 02B2                               l1125 0292  
                             l1231 007B                               l1137 02BD  
                             l1225 0063                               l1181 022B  
                             l1165 0151                               l1237 008A  
                             l1177 0225                               l1265 00EC  
                             l1179 01CB                               l1259 00C3  
                             l1197 024B                               l1277 012A  
                             l1269 0111                               ?_isr 0070  
                     __CFG_WDTE$ON 0000                               u1005 00C1  
                             u1015 00EA                               u1025 00F7  
                             u1035 011C                               u1045 0134  
                             i1l20 0027                               i1l21 001A  
                             i1l23 0024                       __CFG_WRT$OFF 0000  
                             abs@a 0073                               _main 0035  
                             _init 02FB                               fsr1h 0007  
                             fsr1l 0006                               btemp 007E  
                    __CFG_BOREN$ON 0000                               ltemp 007E  
                             start 002D                               ttemp 007E  
                             wtemp 007E                      __CFG_IESO$OFF 0000  
                    __CFG_MCLRE$ON 0000                              ??_abs 0075  
                            ??_isr 0070                      __CFG_PLLEN$ON 0000  
                  __end_of___aldiv 02D4                              ?_main 0070  
                            ?_init 0070                              _ADRES 009B  
                            i1l761 0020                       __delay_ms@ms 0073  
                     __delay_ms@us 0077  main@lowerBallSensorThresholdValue 0065  
                    __CFG_PWRTE$ON 0000                     __CFG_FCMEN$OFF 0000  
                            main@i 0067                     __pbitbssCOMMON 03D0  
                            isr@us 0072                              ltemp0 007E  
                            ltemp1 0082                              ltemp2 0086  
                            ltemp3 0080                              ttemp0 007E  
                            ttemp1 0081                              ttemp2 0084  
                            ttemp3 0087                              ttemp4 007F  
                            status 0003                              wtemp0 007E  
                            wtemp1 0080                              wtemp2 0082  
                            wtemp3 0084                              wtemp4 0086  
                            wtemp5 0088                              wtemp6 007F  
                  __initialization 002E             __size_of_initInterrupt 000A  
                     __end_of_main 014D                       __end_of_init 0316  
                           ??_main 0037                             ??_init 0073  
                 calibrate@lastVal 002E                             _OSCCON 0099  
                 __end_of_getValue 02FB                          ??___aldiv 0073  
                    _initInterrupt 033D            __end_of__initialization 0033  
               __size_of__delay_ms 0019                      _cumulativeVal 0069  
                   __pcstackCOMMON 0070                 __size_of_calibrate 0105  
                   ?_initInterrupt 0070                         __pbssBANK0 0069  
                 main@averageTable 003D                         __pmaintext 0035  
                   main@averagePtr 0060                         __pintentry 0004  
              calibrate@averageVal 0030                  calibrate@inputVal 0035  
                __end_of__delay_ms 032F                          ?_getValue 0073  
                __end_of_calibrate 0252                         calibrate@i 0034  
                          ___aldiv 0252                    __CFG_STVREN$OFF 0000  
                          __ptext1 033D                            __ptext2 02FB  
                          __ptext3 014D                            __ptext4 02D4  
                          __ptext5 032F                            __ptext6 0316  
                          __ptext7 0252                    ??_initInterrupt 0073  
                     __size_of_abs 000E                       __size_of_isr 0029  
                 ___aldiv@dividend 0024                          _IOCAFbits 0393  
                        _IOCANbits 0392                          _IOCAPbits 0391  
                       ??_getValue 0075               end_of_initialization 0033  
                 ___aldiv@quotient 0076                          _PORTAbits 000C  
                 __CFG_FOSC$INTOSC 0000                          _TRISAbits 008C  
                      __delay_ms@i 0076                start_initialization 002E  
                      __end_of_abs 033D                        __end_of_isr 002D  
                        ___latbits 0000                      __pcstackBANK0 0020  
                        __delay_ms 0316                  __size_of_getValue 0027  
                        _calibrate 014D                           ?___aldiv 0020  
                       ?__delay_ms 0073                    ___aldiv@divisor 0020  
                  ___aldiv@counter 0074                         ?_calibrate 0028  
                         _LATAbits 010C                         _ADCON0bits 009D  
                       _ADCON1bits 009E                          main@value 0061  
                        main@state 005F              __end_of_initInterrupt 0347  
             main@steadyStateValue 0063                   __size_of___aldiv 0082  
                       _ANSELAbits 018C                        ??__delay_ms 0075  
                         _getValue 02D4                        ??_calibrate 002A  
                    __size_of_main 0118                      __size_of_init 001B  
                       _INTCONbits 000B                         _FVRCONbits 0117  
                         intlevel1 0000                  __CFG_CLKOUTEN$OFF 0000  
                     ___aldiv@sign 0075                         _WDTCONbits 0097  
