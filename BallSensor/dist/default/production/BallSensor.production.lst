

Microchip Technology PIC LITE Macro Assembler V1.31 build 56723 
                                                                                               Mon Jun 22 17:58:25 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 56723
     1                           	processor	12F1822
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	intentry,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     	;# 
    20  0001                     	;# 
    21  0002                     	;# 
    22  0003                     	;# 
    23  0004                     	;# 
    24  0005                     	;# 
    25  0006                     	;# 
    26  0007                     	;# 
    27  0008                     	;# 
    28  0009                     	;# 
    29  000A                     	;# 
    30  000B                     	;# 
    31  000C                     	;# 
    32  0011                     	;# 
    33  0012                     	;# 
    34  0015                     	;# 
    35  0016                     	;# 
    36  0016                     	;# 
    37  0017                     	;# 
    38  0018                     	;# 
    39  0019                     	;# 
    40  001A                     	;# 
    41  001B                     	;# 
    42  001C                     	;# 
    43  001E                     	;# 
    44  001F                     	;# 
    45  008C                     	;# 
    46  0091                     	;# 
    47  0092                     	;# 
    48  0095                     	;# 
    49  0096                     	;# 
    50  0097                     	;# 
    51  0098                     	;# 
    52  0099                     	;# 
    53  009A                     	;# 
    54  009B                     	;# 
    55  009B                     	;# 
    56  009C                     	;# 
    57  009D                     	;# 
    58  009E                     	;# 
    59  010C                     	;# 
    60  0111                     	;# 
    61  0112                     	;# 
    62  0115                     	;# 
    63  0116                     	;# 
    64  0117                     	;# 
    65  0118                     	;# 
    66  0119                     	;# 
    67  011A                     	;# 
    68  011B                     	;# 
    69  011D                     	;# 
    70  011D                     	;# 
    71  018C                     	;# 
    72  0191                     	;# 
    73  0191                     	;# 
    74  0192                     	;# 
    75  0193                     	;# 
    76  0193                     	;# 
    77  0193                     	;# 
    78  0194                     	;# 
    79  0195                     	;# 
    80  0196                     	;# 
    81  0199                     	;# 
    82  019A                     	;# 
    83  019B                     	;# 
    84  019B                     	;# 
    85  019B                     	;# 
    86  019B                     	;# 
    87  019C                     	;# 
    88  019C                     	;# 
    89  019D                     	;# 
    90  019E                     	;# 
    91  019F                     	;# 
    92  020C                     	;# 
    93  0211                     	;# 
    94  0211                     	;# 
    95  0212                     	;# 
    96  0212                     	;# 
    97  0213                     	;# 
    98  0213                     	;# 
    99  0214                     	;# 
   100  0214                     	;# 
   101  0215                     	;# 
   102  0215                     	;# 
   103  0215                     	;# 
   104  0216                     	;# 
   105  0216                     	;# 
   106  0217                     	;# 
   107  0217                     	;# 
   108  0291                     	;# 
   109  0291                     	;# 
   110  0292                     	;# 
   111  0293                     	;# 
   112  0294                     	;# 
   113  0295                     	;# 
   114  0295                     	;# 
   115  0296                     	;# 
   116  0391                     	;# 
   117  0392                     	;# 
   118  0393                     	;# 
   119  039A                     	;# 
   120  039C                     	;# 
   121  039D                     	;# 
   122  039E                     	;# 
   123  039F                     	;# 
   124  0FE4                     	;# 
   125  0FE5                     	;# 
   126  0FE6                     	;# 
   127  0FE7                     	;# 
   128  0FE8                     	;# 
   129  0FE9                     	;# 
   130  0FEA                     	;# 
   131  0FEB                     	;# 
   132  0FED                     	;# 
   133  0FEE                     	;# 
   134  0FEF                     	;# 
   135  0000                     	;# 
   136  0001                     	;# 
   137  0002                     	;# 
   138  0003                     	;# 
   139  0004                     	;# 
   140  0005                     	;# 
   141  0006                     	;# 
   142  0007                     	;# 
   143  0008                     	;# 
   144  0009                     	;# 
   145  000A                     	;# 
   146  000B                     	;# 
   147  000C                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001C                     	;# 
   159  001E                     	;# 
   160  001F                     	;# 
   161  008C                     	;# 
   162  0091                     	;# 
   163  0092                     	;# 
   164  0095                     	;# 
   165  0096                     	;# 
   166  0097                     	;# 
   167  0098                     	;# 
   168  0099                     	;# 
   169  009A                     	;# 
   170  009B                     	;# 
   171  009B                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  010C                     	;# 
   176  0111                     	;# 
   177  0112                     	;# 
   178  0115                     	;# 
   179  0116                     	;# 
   180  0117                     	;# 
   181  0118                     	;# 
   182  0119                     	;# 
   183  011A                     	;# 
   184  011B                     	;# 
   185  011D                     	;# 
   186  011D                     	;# 
   187  018C                     	;# 
   188  0191                     	;# 
   189  0191                     	;# 
   190  0192                     	;# 
   191  0193                     	;# 
   192  0193                     	;# 
   193  0193                     	;# 
   194  0194                     	;# 
   195  0195                     	;# 
   196  0196                     	;# 
   197  0199                     	;# 
   198  019A                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019C                     	;# 
   204  019C                     	;# 
   205  019D                     	;# 
   206  019E                     	;# 
   207  019F                     	;# 
   208  020C                     	;# 
   209  0211                     	;# 
   210  0211                     	;# 
   211  0212                     	;# 
   212  0212                     	;# 
   213  0213                     	;# 
   214  0213                     	;# 
   215  0214                     	;# 
   216  0214                     	;# 
   217  0215                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0216                     	;# 
   221  0216                     	;# 
   222  0217                     	;# 
   223  0217                     	;# 
   224  0291                     	;# 
   225  0291                     	;# 
   226  0292                     	;# 
   227  0293                     	;# 
   228  0294                     	;# 
   229  0295                     	;# 
   230  0295                     	;# 
   231  0296                     	;# 
   232  0391                     	;# 
   233  0392                     	;# 
   234  0393                     	;# 
   235  039A                     	;# 
   236  039C                     	;# 
   237  039D                     	;# 
   238  039E                     	;# 
   239  039F                     	;# 
   240  0FE4                     	;# 
   241  0FE5                     	;# 
   242  0FE6                     	;# 
   243  0FE7                     	;# 
   244  0FE8                     	;# 
   245  0FE9                     	;# 
   246  0FEA                     	;# 
   247  0FEB                     	;# 
   248  0FED                     	;# 
   249  0FEE                     	;# 
   250  0FEF                     	;# 
   251  000B                     _INTCONbits	set	11
   252  000C                     _PORTAbits	set	12
   253  009B                     _ADRES	set	155
   254  009D                     _ADCON0bits	set	157
   255  009E                     _ADCON1bits	set	158
   256  0099                     _OSCCON	set	153
   257  008C                     _TRISAbits	set	140
   258  0097                     _WDTCONbits	set	151
   259  0117                     _FVRCONbits	set	279
   260  010C                     _LATAbits	set	268
   261  018C                     _ANSELAbits	set	396
   262  0393                     _IOCAFbits	set	915
   263  0392                     _IOCANbits	set	914
   264  0391                     _IOCAPbits	set	913
   265                           
   266                           	psect	intentry
   267  0004                     __pintentry:	
   268                           
   269                           ; #config settings
   270  0000                     
   271 ;; *************** function _isr *****************
   272 ;; Defined at:
   273 ;;		line 22 in file "interrupt.c"
   274 ;; Parameters:    Size  Location     Type
   275 ;;		None
   276 ;; Auto vars:     Size  Location     Type
   277 ;;  us              1    2[COMMON] unsigned char 
   278 ;; Return value:  Size  Location     Type
   279 ;;		None               void
   280 ;; Registers used:
   281 ;;		wreg, status,2, status,0
   282 ;; Tracked objects:
   283 ;;		On entry : 0/0
   284 ;;		On exit  : 0/0
   285 ;;		Unchanged: 0/0
   286 ;; Data sizes:     COMMON   BANK0   BANK1
   287 ;;      Params:         0       0       0
   288 ;;      Locals:         1       0       0
   289 ;;      Temps:          2       0       0
   290 ;;      Totals:         3       0       0
   291 ;;Total ram usage:        3 bytes
   292 ;; Hardware stack levels used:    1
   293 ;; This function calls:
   294 ;;		Nothing
   295 ;; This function is called by:
   296 ;;		Interrupt level 1
   297 ;; This function uses a non-reentrant model
   298 ;;
   299  0004                     _isr:	
   300                           
   301                           ;incstack = 0
   302                           ; Regs used in _isr: [wreg+status,2+status,0]
   303  0004  3180               	pagesel	$
   304  0005  0020               	movlb	0	; select bank0
   305  0006  087F               	movf	127,w
   306  0007  00F1               	movwf	??_isr+1
   307                           
   308                           ;interrupt.c: 24: if (INTCONbits.IOCIF)
   309  0008  1C0B               	btfss	11,0	;volatile
   310  0009  2827               	goto	i1l20
   311                           
   312                           ;interrupt.c: 25: {
   313                           ;interrupt.c: 26: if (IOCAFbits.IOCAF2)
   314  000A  0027               	movlb	7	; select bank7
   315  000B  1D13               	btfss	19,2	;volatile
   316  000C  281A               	goto	i1l21
   317                           
   318                           ;interrupt.c: 27: {
   319                           ;interrupt.c: 28: d = PORTAbits.RA2;
   320  000D  0020               	movlb	0	; select bank0
   321  000E  0C0C               	rrf	12,w	;volatile
   322  000F  0C89               	rrf	9,f
   323  0010  3901               	andlw	1
   324  0011  00F0               	movwf	??_isr
   325  0012  0C70               	rrf	??_isr,w
   326  0013  1079               	bcf	_d/(0+8),_d& (0+7)
   327  0014  1803               	btfsc	3,0
   328  0015  1479               	bsf	_d/(0+8),_d& (0+7)
   329                           
   330                           ;interrupt.c: 29: LATAbits.LATA1 = 1;
   331  0016  0022               	movlb	2	; select bank2
   332  0017  148C               	bsf	12,1	;volatile
   333                           
   334                           ;interrupt.c: 30: if (!d)
   335  0018  1C79               	btfss	_d/(0+8),_d& (0+7)
   336                           
   337                           ;interrupt.c: 31: LATAbits.LATA1 = 0;
   338  0019  108C               	bcf	12,1	;volatile
   339  001A                     i1l21:	
   340                           
   341                           ;interrupt.c: 32: }
   342                           ;interrupt.c: 33: if (d == 1)
   343  001A  1C79               	btfss	_d/(0+8),_d& (0+7)
   344  001B  2824               	goto	i1l23
   345                           
   346                           ;interrupt.c: 34: { unsigned char us; us = (2)/(12000000/8000000L)|1; while(--us != 0) c
      +                          ontinue; };
   347  001C  3003               	movlw	3
   348  001D  00F0               	movwf	??_isr
   349  001E  0870               	movf	??_isr,w
   350  001F  00F2               	movwf	isr@us
   351  0020                     i1l845:	
   352  0020  3001               	movlw	1
   353  0021  02F2               	subwf	isr@us,f
   354  0022  1D03               	btfss	3,2
   355  0023  2820               	goto	i1l845
   356  0024                     i1l23:	
   357                           
   358                           ;interrupt.c: 35: IOCAFbits.IOCAF2 = 0;
   359  0024  0027               	movlb	7	; select bank7
   360  0025  1113               	bcf	19,2	;volatile
   361                           
   362                           ;interrupt.c: 36: INTCONbits.IOCIF = 0;
   363  0026  100B               	bcf	11,0	;volatile
   364  0027                     i1l20:	
   365                           
   366                           ;interrupt.c: 37: }
   367                           ;interrupt.c: 38: LATAbits.LATA1 = 0;
   368  0027  0022               	movlb	2	; select bank2
   369  0028  108C               	bcf	12,1	;volatile
   370  0029  0871               	movf	??_isr+1,w
   371  002A  0020               	movlb	0	; select bank0
   372  002B  00FF               	movwf	127
   373  002C  0009               	retfie
   374  002D                     __end_of_isr:	
   375  007E                     btemp	set	126	;btemp
   376  007E                     wtemp	set	126
   377  007E                     wtemp0	set	126
   378  0080                     wtemp1	set	128
   379  0082                     wtemp2	set	130
   380  0084                     wtemp3	set	132
   381  0086                     wtemp4	set	134
   382  0088                     wtemp5	set	136
   383  007F                     wtemp6	set	127
   384  007E                     ttemp	set	126
   385  007E                     ttemp0	set	126
   386  0081                     ttemp1	set	129
   387  0084                     ttemp2	set	132
   388  0087                     ttemp3	set	135
   389  007F                     ttemp4	set	127
   390  007E                     ltemp	set	126
   391  007E                     ltemp0	set	126
   392  0082                     ltemp1	set	130
   393  0086                     ltemp2	set	134
   394  0080                     ltemp3	set	128
   395                           
   396                           	psect	cinit
   397  002E                     start_initialization:	
   398  002E                     __initialization:	
   399                           
   400                           ; Clear objects allocated to BITCOMMON
   401  002E  01F9               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   402  002F                     end_of_initialization:	
   403                           ;End of C runtime variable initialization code
   404                           
   405  002F                     __end_of__initialization:	
   406  002F  0020               	movlb	0
   407  0030  2959               	ljmp	_main	;jump to C main() function
   408                           
   409                           	psect	bitbssCOMMON
   410  03C8                     __pbitbssCOMMON:	
   411  03C8                     _d:	
   412  03C8                     	ds	1
   413                           
   414                           	psect	cstackCOMMON
   415  0070                     __pcstackCOMMON:	
   416  0070                     ?_initInterrupt:	
   417  0070                     ?_isr:	
   418                           ; 0 bytes @ 0x0
   419                           
   420  0070                     ??_isr:	
   421                           ; 0 bytes @ 0x0
   422                           
   423  0070                     ?_init:	
   424                           ; 0 bytes @ 0x0
   425                           
   426                           
   427                           ; 0 bytes @ 0x0
   428  0070                     	ds	2
   429  0072                     isr@us:	
   430                           
   431                           ; 1 bytes @ 0x2
   432  0072                     	ds	1
   433  0073                     ??_initInterrupt:	
   434  0073                     ?__delay_ms:	
   435                           ; 0 bytes @ 0x3
   436                           
   437  0073                     ??_init:	
   438                           ; 0 bytes @ 0x3
   439                           
   440  0073                     ??___lmul:	
   441                           ; 0 bytes @ 0x3
   442                           
   443  0073                     ?_abs:	
   444                           ; 0 bytes @ 0x3
   445                           
   446  0073                     ?_getValue:	
   447                           ; 2 bytes @ 0x3
   448                           
   449  0073                     __delay_ms@ms:	
   450                           ; 2 bytes @ 0x3
   451                           
   452  0073                     abs@a:	
   453                           ; 2 bytes @ 0x3
   454                           
   455  0073                     ___lmul@product:	
   456                           ; 2 bytes @ 0x3
   457                           
   458                           
   459                           ; 4 bytes @ 0x3
   460  0073                     	ds	2
   461  0075                     ??_abs:	
   462  0075                     ??__delay_ms:	
   463                           ; 0 bytes @ 0x5
   464                           
   465  0075                     ??_getValue:	
   466                           ; 0 bytes @ 0x5
   467                           
   468                           
   469                           ; 0 bytes @ 0x5
   470  0075                     	ds	1
   471  0076                     __delay_ms@i:	
   472                           
   473                           ; 1 bytes @ 0x6
   474  0076                     	ds	1
   475  0077                     ??___aldiv:	
   476  0077                     __delay_ms@us:	
   477                           ; 0 bytes @ 0x7
   478                           
   479  0077                     getValue@val:	
   480                           ; 1 bytes @ 0x7
   481                           
   482                           
   483                           ; 2 bytes @ 0x7
   484  0077                     	ds	2
   485                           
   486                           	psect	cstackBANK0
   487  0020                     __pcstackBANK0:	
   488  0020                     ?___lmul:	
   489  0020                     ___lmul@multiplier:	
   490                           ; 4 bytes @ 0x0
   491                           
   492                           
   493                           ; 4 bytes @ 0x0
   494  0020                     	ds	4
   495  0024                     ___lmul@multiplicand:	
   496                           
   497                           ; 4 bytes @ 0x4
   498  0024                     	ds	4
   499  0028                     ?___aldiv:	
   500  0028                     ___aldiv@divisor:	
   501                           ; 4 bytes @ 0x8
   502                           
   503                           
   504                           ; 4 bytes @ 0x8
   505  0028                     	ds	4
   506  002C                     ___aldiv@dividend:	
   507                           
   508                           ; 4 bytes @ 0xC
   509  002C                     	ds	4
   510  0030                     ___aldiv@counter:	
   511                           
   512                           ; 1 bytes @ 0x10
   513  0030                     	ds	1
   514  0031                     ___aldiv@sign:	
   515                           
   516                           ; 1 bytes @ 0x11
   517  0031                     	ds	1
   518  0032                     ___aldiv@quotient:	
   519                           
   520                           ; 4 bytes @ 0x12
   521  0032                     	ds	4
   522  0036                     ?_calibrate:	
   523                           
   524                           ; 2 bytes @ 0x16
   525  0036                     	ds	2
   526  0038                     ??_calibrate:	
   527                           
   528                           ; 0 bytes @ 0x18
   529  0038                     	ds	4
   530  003C                     calibrate@lastVal:	
   531                           
   532                           ; 2 bytes @ 0x1C
   533  003C                     	ds	2
   534  003E                     calibrate@cumulativeVal:	
   535                           
   536                           ; 4 bytes @ 0x1E
   537  003E                     	ds	4
   538  0042                     calibrate@averageVal:	
   539                           
   540                           ; 4 bytes @ 0x22
   541  0042                     	ds	4
   542  0046                     calibrate@i:	
   543                           
   544                           ; 2 bytes @ 0x26
   545  0046                     	ds	2
   546  0048                     calibrate@inputVal:	
   547                           
   548                           ; 2 bytes @ 0x28
   549  0048                     	ds	2
   550  004A                     ?_main:	
   551  004A                     main@argc:	
   552                           ; 2 bytes @ 0x2A
   553                           
   554                           
   555                           ; 2 bytes @ 0x2A
   556  004A                     	ds	2
   557  004C                     main@argv:	
   558                           
   559                           ; 2 bytes @ 0x2C
   560  004C                     	ds	2
   561  004E                     ??_main:	
   562                           
   563                           ; 0 bytes @ 0x2E
   564  004E                     	ds	2
   565  0050                     main@upperBallSensorThresholdValue:	
   566                           
   567                           ; 2 bytes @ 0x30
   568  0050                     	ds	2
   569  0052                     main@changeValue:	
   570                           
   571                           ; 2 bytes @ 0x32
   572  0052                     	ds	2
   573  0054                     main@hysterysis:	
   574                           
   575                           ; 2 bytes @ 0x34
   576  0054                     	ds	2
   577  0056                     main@state:	
   578                           
   579                           ; 1 bytes @ 0x36
   580  0056                     	ds	1
   581  0057                     main@lowerBallSensorThresholdValue:	
   582                           
   583                           ; 2 bytes @ 0x37
   584  0057                     	ds	2
   585  0059                     main@value:	
   586                           
   587                           ; 2 bytes @ 0x39
   588  0059                     	ds	2
   589  005B                     main@steadyStateValue:	
   590                           
   591                           ; 2 bytes @ 0x3B
   592  005B                     	ds	2
   593                           
   594                           	psect	maintext
   595  0159                     __pmaintext:	
   596 ;;
   597 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   598 ;;
   599 ;; *************** function _main *****************
   600 ;; Defined at:
   601 ;;		line 156 in file "main.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;  argc            2   42[BANK0 ] int 
   604 ;;  argv            2   44[BANK0 ] PTR PTR unsigned char 
   605 ;; Auto vars:     Size  Location     Type
   606 ;;  steadyStateV    2   59[BANK0 ] int 
   607 ;;  value           2   57[BANK0 ] int 
   608 ;;  lowerBallSen    2   55[BANK0 ] int 
   609 ;;  hysterysis      2   52[BANK0 ] int 
   610 ;;  changeValue     2   50[BANK0 ] int 
   611 ;;  upperBallSen    2   48[BANK0 ] int 
   612 ;;  i               2    0        int 
   613 ;;  state           1   54[BANK0 ] enum E2412
   614 ;; Return value:  Size  Location     Type
   615 ;;                  2   42[BANK0 ] int 
   616 ;; Registers used:
   617 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   618 ;; Tracked objects:
   619 ;;		On entry : 17F/0
   620 ;;		On exit  : 0/0
   621 ;;		Unchanged: 0/0
   622 ;; Data sizes:     COMMON   BANK0   BANK1
   623 ;;      Params:         0       4       0
   624 ;;      Locals:         0      13       0
   625 ;;      Temps:          0       2       0
   626 ;;      Totals:         0      19       0
   627 ;;Total ram usage:       19 bytes
   628 ;; Hardware stack levels required when called:    3
   629 ;; This function calls:
   630 ;;		___aldiv
   631 ;;		___lmul
   632 ;;		__delay_ms
   633 ;;		_calibrate
   634 ;;		_getValue
   635 ;;		_init
   636 ;;		_initInterrupt
   637 ;; This function is called by:
   638 ;;		Startup code after reset
   639 ;; This function uses a non-reentrant model
   640 ;;
   641                           
   642                           
   643                           ;psect for function _main
   644  0159                     _main:	
   645                           
   646                           ;main.c: 158: int steadyStateValue, lowerBallSensorThresholdValue, upperBallSensorThresh
      +                          oldValue;
   647                           ;main.c: 159: enum {offState, onState} state = offState;
   648                           
   649                           ;incstack = 0
   650                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   651  0159  0020               	movlb	0	; select bank0
   652  015A  01D6               	clrf	main@state
   653                           
   654                           ;main.c: 160: int value;
   655                           ;main.c: 161: int i;
   656                           ;main.c: 163: init();
   657  015B  22FD               	fcall	_init
   658  015C  0064               	clrwdt	;# 
   659                           
   660                           ;main.c: 169: LATAbits.LATA5 = 0;
   661  015D  0022               	movlb	2	; select bank2
   662  015E  128C               	bcf	12,5	;volatile
   663                           
   664                           ;main.c: 170: LATAbits.LATA0 = 0;
   665  015F  100C               	bcf	12,0	;volatile
   666                           
   667                           ;main.c: 171: _delay_ms(200);
   668  0160  30C8               	movlw	200
   669  0161  00F3               	movwf	__delay_ms@ms
   670  0162  3000               	movlw	0
   671  0163  00F4               	movwf	__delay_ms@ms+1
   672  0164  2318               	fcall	__delay_ms
   673  0165  0064               	clrwdt	;# 
   674                           
   675                           ;main.c: 173: LATAbits.LATA5 = 1;
   676  0166  0022               	movlb	2	; select bank2
   677  0167  168C               	bsf	12,5	;volatile
   678                           
   679                           ;main.c: 174: LATAbits.LATA0 = 1;
   680  0168  140C               	bsf	12,0	;volatile
   681                           
   682                           ;main.c: 176: steadyStateValue = calibrate();
   683  0169  2031               	fcall	_calibrate
   684  016A  0020               	movlb	0	; select bank0
   685  016B  0837               	movf	?_calibrate+1,w
   686  016C  01DC               	clrf	main@steadyStateValue+1
   687  016D  07DC               	addwf	main@steadyStateValue+1,f
   688  016E  0836               	movf	?_calibrate,w
   689  016F  01DB               	clrf	main@steadyStateValue
   690  0170  07DB               	addwf	main@steadyStateValue,f
   691                           
   692                           ;main.c: 177: int changeValue = ((long)steadyStateValue * 25)/100;
   693  0171  3000               	movlw	0
   694  0172  00AB               	movwf	___aldiv@divisor+3
   695  0173  3000               	movlw	0
   696  0174  00AA               	movwf	___aldiv@divisor+2
   697  0175  3000               	movlw	0
   698  0176  00A9               	movwf	___aldiv@divisor+1
   699  0177  3064               	movlw	100
   700  0178  00A8               	movwf	___aldiv@divisor
   701  0179  085B               	movf	main@steadyStateValue,w
   702  017A  00A0               	movwf	___lmul@multiplier
   703  017B  085C               	movf	main@steadyStateValue+1,w
   704  017C  00A1               	movwf	___lmul@multiplier+1
   705  017D  0D89               	rlf	9,f
   706  017E  3B89               	subwfb	9,f
   707  017F  0989               	comf	9,f
   708  0180  00A2               	movwf	___lmul@multiplier+2
   709  0181  00A3               	movwf	___lmul@multiplier+3
   710  0182  3000               	movlw	0
   711  0183  00A7               	movwf	___lmul@multiplicand+3
   712  0184  3000               	movlw	0
   713  0185  00A6               	movwf	___lmul@multiplicand+2
   714  0186  3000               	movlw	0
   715  0187  00A5               	movwf	___lmul@multiplicand+1
   716  0188  3019               	movlw	25
   717  0189  00A4               	movwf	___lmul@multiplicand
   718  018A  22CD               	fcall	___lmul
   719  018B  0020               	movlb	0	; select bank0
   720  018C  0823               	movf	?___lmul+3,w
   721  018D  00AF               	movwf	___aldiv@dividend+3
   722  018E  0822               	movf	?___lmul+2,w
   723  018F  00AE               	movwf	___aldiv@dividend+2
   724  0190  0821               	movf	?___lmul+1,w
   725  0191  00AD               	movwf	___aldiv@dividend+1
   726  0192  0820               	movf	?___lmul,w
   727  0193  00AC               	movwf	___aldiv@dividend
   728  0194  2217               	fcall	___aldiv
   729  0195  0020               	movlb	0	; select bank0
   730  0196  0829               	movf	?___aldiv+1,w
   731  0197  01D3               	clrf	main@changeValue+1
   732  0198  07D3               	addwf	main@changeValue+1,f
   733  0199  0828               	movf	?___aldiv,w
   734  019A  01D2               	clrf	main@changeValue
   735  019B  07D2               	addwf	main@changeValue,f
   736                           
   737                           ;main.c: 178: lowerBallSensorThresholdValue = steadyStateValue - changeValue;
   738  019C  0952               	comf	main@changeValue,w
   739  019D  00CE               	movwf	??_main
   740  019E  0953               	comf	main@changeValue+1,w
   741  019F  00CF               	movwf	??_main+1
   742  01A0  0ACE               	incf	??_main,f
   743  01A1  1903               	skipnz
   744  01A2  0ACF               	incf	??_main+1,f
   745  01A3  085B               	movf	main@steadyStateValue,w
   746  01A4  074E               	addwf	??_main,w
   747  01A5  00D7               	movwf	main@lowerBallSensorThresholdValue
   748  01A6  085C               	movf	main@steadyStateValue+1,w
   749  01A7  3D4F               	addwfc	??_main+1,w
   750  01A8  00D8               	movwf	main@lowerBallSensorThresholdValue+1
   751                           
   752                           ;main.c: 179: int hysterysis = ((long)steadyStateValue * 19)/100;
   753  01A9  3000               	movlw	0
   754  01AA  00AB               	movwf	___aldiv@divisor+3
   755  01AB  3000               	movlw	0
   756  01AC  00AA               	movwf	___aldiv@divisor+2
   757  01AD  3000               	movlw	0
   758  01AE  00A9               	movwf	___aldiv@divisor+1
   759  01AF  3064               	movlw	100
   760  01B0  00A8               	movwf	___aldiv@divisor
   761  01B1  085B               	movf	main@steadyStateValue,w
   762  01B2  00A0               	movwf	___lmul@multiplier
   763  01B3  085C               	movf	main@steadyStateValue+1,w
   764  01B4  00A1               	movwf	___lmul@multiplier+1
   765  01B5  0D89               	rlf	9,f
   766  01B6  3B89               	subwfb	9,f
   767  01B7  0989               	comf	9,f
   768  01B8  00A2               	movwf	___lmul@multiplier+2
   769  01B9  00A3               	movwf	___lmul@multiplier+3
   770  01BA  3000               	movlw	0
   771  01BB  00A7               	movwf	___lmul@multiplicand+3
   772  01BC  3000               	movlw	0
   773  01BD  00A6               	movwf	___lmul@multiplicand+2
   774  01BE  3000               	movlw	0
   775  01BF  00A5               	movwf	___lmul@multiplicand+1
   776  01C0  3013               	movlw	19
   777  01C1  00A4               	movwf	___lmul@multiplicand
   778  01C2  22CD               	fcall	___lmul
   779  01C3  0020               	movlb	0	; select bank0
   780  01C4  0823               	movf	?___lmul+3,w
   781  01C5  00AF               	movwf	___aldiv@dividend+3
   782  01C6  0822               	movf	?___lmul+2,w
   783  01C7  00AE               	movwf	___aldiv@dividend+2
   784  01C8  0821               	movf	?___lmul+1,w
   785  01C9  00AD               	movwf	___aldiv@dividend+1
   786  01CA  0820               	movf	?___lmul,w
   787  01CB  00AC               	movwf	___aldiv@dividend
   788  01CC  2217               	fcall	___aldiv
   789  01CD  0020               	movlb	0	; select bank0
   790  01CE  0829               	movf	?___aldiv+1,w
   791  01CF  01D5               	clrf	main@hysterysis+1
   792  01D0  07D5               	addwf	main@hysterysis+1,f
   793  01D1  0828               	movf	?___aldiv,w
   794  01D2  01D4               	clrf	main@hysterysis
   795  01D3  07D4               	addwf	main@hysterysis,f
   796                           
   797                           ;main.c: 180: upperBallSensorThresholdValue = lowerBallSensorThresholdValue + hysterysis;
   798  01D4  0854               	movf	main@hysterysis,w
   799  01D5  0757               	addwf	main@lowerBallSensorThresholdValue,w
   800  01D6  00D0               	movwf	main@upperBallSensorThresholdValue
   801  01D7  0855               	movf	main@hysterysis+1,w
   802  01D8  3D58               	addwfc	main@lowerBallSensorThresholdValue+1,w
   803  01D9  00D1               	movwf	main@upperBallSensorThresholdValue+1
   804                           
   805                           ;main.c: 181: initInterrupt();
   806  01DA  233F               	fcall	_initInterrupt
   807                           
   808                           ;main.c: 187: switch (state)
   809  01DB  2A05               	goto	l87
   810  01DC                     l1293:	
   811                           ;main.c: 188: {
   812                           ;main.c: 189: case offState:
   813                           
   814                           
   815                           ;main.c: 190: if ( value < lowerBallSensorThresholdValue )
   816  01DC  085A               	movf	main@value+1,w
   817  01DD  3A80               	xorlw	128
   818  01DE  00CE               	movwf	??_main
   819  01DF  0858               	movf	main@lowerBallSensorThresholdValue+1,w
   820  01E0  3A80               	xorlw	128
   821  01E1  024E               	subwf	??_main,w
   822  01E2  1D03               	skipz
   823  01E3  29E6               	goto	u945
   824  01E4  0857               	movf	main@lowerBallSensorThresholdValue,w
   825  01E5  0259               	subwf	main@value,w
   826  01E6                     u945:	
   827  01E6  1803               	skipnc
   828  01E7  2A05               	goto	l87
   829                           
   830                           ;main.c: 191: {
   831                           ;main.c: 192: LATAbits.LATA5 = 0;
   832  01E8  0022               	movlb	2	; select bank2
   833  01E9  128C               	bcf	12,5	;volatile
   834                           
   835                           ;main.c: 193: LATAbits.LATA0 = 0;
   836  01EA  100C               	bcf	12,0	;volatile
   837                           
   838                           ;main.c: 194: _delay_ms(10);
   839  01EB  300A               	movlw	10
   840  01EC  00F3               	movwf	__delay_ms@ms
   841  01ED  3000               	movlw	0
   842  01EE  00F4               	movwf	__delay_ms@ms+1
   843  01EF  2318               	fcall	__delay_ms
   844                           
   845                           ;main.c: 195: state = onState;
   846  01F0  0020               	movlb	0	; select bank0
   847  01F1  01D6               	clrf	main@state
   848  01F2  0AD6               	incf	main@state,f
   849                           
   850                           ;main.c: 196: }
   851                           ;main.c: 197: break;
   852  01F3  2A05               	goto	l87
   853  01F4                     l1301:	
   854                           ;main.c: 198: case onState:
   855                           
   856                           
   857                           ;main.c: 199: if ( value > upperBallSensorThresholdValue)
   858  01F4  0851               	movf	main@upperBallSensorThresholdValue+1,w
   859  01F5  3A80               	xorlw	128
   860  01F6  00CE               	movwf	??_main
   861  01F7  085A               	movf	main@value+1,w
   862  01F8  3A80               	xorlw	128
   863  01F9  024E               	subwf	??_main,w
   864  01FA  1D03               	skipz
   865  01FB  29FE               	goto	u955
   866  01FC  0859               	movf	main@value,w
   867  01FD  0250               	subwf	main@upperBallSensorThresholdValue,w
   868  01FE                     u955:	
   869  01FE  1803               	skipnc
   870  01FF  2A05               	goto	l87
   871                           
   872                           ;main.c: 200: {
   873                           ;main.c: 201: LATAbits.LATA5 = 1;
   874  0200  0022               	movlb	2	; select bank2
   875  0201  168C               	bsf	12,5	;volatile
   876                           
   877                           ;main.c: 202: LATAbits.LATA0 = 1;
   878  0202  140C               	bsf	12,0	;volatile
   879                           
   880                           ;main.c: 203: state = offState;
   881  0203  0020               	movlb	0	; select bank0
   882  0204  01D6               	clrf	main@state
   883  0205                     l87:	
   884                           ;main.c: 183: while (1)
   885                           
   886                           ;main.c: 206: }
   887                           
   888                           ;main.c: 204: }
   889                           ;main.c: 205: break;
   890                           
   891  0205  0064               	clrwdt	;# 
   892                           
   893                           ;main.c: 186: value = getValue();
   894  0206  2299               	fcall	_getValue
   895  0207  0874               	movf	?_getValue+1,w
   896  0208  0020               	movlb	0	; select bank0
   897  0209  01DA               	clrf	main@value+1
   898  020A  07DA               	addwf	main@value+1,f
   899  020B  0873               	movf	?_getValue,w
   900  020C  01D9               	clrf	main@value
   901  020D  07D9               	addwf	main@value,f
   902  020E  0856               	movf	main@state,w
   903                           
   904                           ; Switch size 1, requested type "space"
   905                           ; Number of cases is 2, Range of values is 0 to 1
   906                           ; switch strategies available:
   907                           ; Name         Instructions Cycles
   908                           ; simple_byte            7     4 (average)
   909                           ; direct_byte           10     6 (fixed)
   910                           ; jumptable            260     6 (fixed)
   911                           ;	Chosen strategy is simple_byte
   912  020F  3A00               	xorlw	0	; case 0
   913  0210  1903               	skipnz
   914  0211  29DC               	goto	l1293
   915  0212  3A01               	xorlw	1	; case 1
   916  0213  1903               	skipnz
   917  0214  29F4               	goto	l1301
   918  0215  2A05               	goto	l87
   919  0216  2A05               	goto	l87
   920  0217                     __end_of_main:	
   921                           
   922                           	psect	text1
   923  033F                     __ptext1:	
   924 ;; *************** function _initInterrupt *****************
   925 ;; Defined at:
   926 ;;		line 7 in file "interrupt.c"
   927 ;; Parameters:    Size  Location     Type
   928 ;;		None
   929 ;; Auto vars:     Size  Location     Type
   930 ;;		None
   931 ;; Return value:  Size  Location     Type
   932 ;;		None               void
   933 ;; Registers used:
   934 ;;		wreg, status,2, status,0
   935 ;; Tracked objects:
   936 ;;		On entry : 0/0
   937 ;;		On exit  : 0/0
   938 ;;		Unchanged: 0/0
   939 ;; Data sizes:     COMMON   BANK0   BANK1
   940 ;;      Params:         0       0       0
   941 ;;      Locals:         0       0       0
   942 ;;      Temps:          0       0       0
   943 ;;      Totals:         0       0       0
   944 ;;Total ram usage:        0 bytes
   945 ;; Hardware stack levels used:    1
   946 ;; Hardware stack levels required when called:    1
   947 ;; This function calls:
   948 ;;		Nothing
   949 ;; This function is called by:
   950 ;;		_main
   951 ;; This function uses a non-reentrant model
   952 ;;
   953                           
   954                           
   955                           ;psect for function _initInterrupt
   956  033F                     _initInterrupt:	
   957                           
   958                           ;interrupt.c: 9: IOCAPbits.IOCAP2 = 1;
   959                           
   960                           ;incstack = 0
   961                           ; Regs used in _initInterrupt: [wreg+status,2+status,0]
   962  033F  0027               	movlb	7	; select bank7
   963  0340  1511               	bsf	17,2	;volatile
   964                           
   965                           ;interrupt.c: 10: IOCANbits.IOCAN2 = 0;
   966  0341  1112               	bcf	18,2	;volatile
   967                           
   968                           ;interrupt.c: 11: IOCAFbits.IOCAF = 0;
   969  0342  30C0               	movlw	-64
   970  0343  0593               	andwf	19,f	;volatile
   971                           
   972                           ;interrupt.c: 12: INTCONbits.IOCIF = 0;
   973  0344  100B               	bcf	11,0	;volatile
   974                           
   975                           ;interrupt.c: 13: INTCONbits.IOCIE = 1;
   976  0345  158B               	bsf	11,3	;volatile
   977                           
   978                           ;interrupt.c: 14: INTCONbits.GIE = 1;
   979  0346  178B               	bsf	11,7	;volatile
   980                           
   981                           ;interrupt.c: 16: INTCONbits.PEIE = 1;
   982  0347  170B               	bsf	11,6	;volatile
   983  0348  0008               	return
   984  0349                     __end_of_initInterrupt:	
   985                           
   986                           	psect	text2
   987  02FD                     __ptext2:	
   988 ;; *************** function _init *****************
   989 ;; Defined at:
   990 ;;		line 44 in file "main.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;		None
   993 ;; Auto vars:     Size  Location     Type
   994 ;;		None
   995 ;; Return value:  Size  Location     Type
   996 ;;		None               void
   997 ;; Registers used:
   998 ;;		wreg, status,2, status,0
   999 ;; Tracked objects:
  1000 ;;		On entry : 0/0
  1001 ;;		On exit  : 0/0
  1002 ;;		Unchanged: 0/0
  1003 ;; Data sizes:     COMMON   BANK0   BANK1
  1004 ;;      Params:         0       0       0
  1005 ;;      Locals:         0       0       0
  1006 ;;      Temps:          0       0       0
  1007 ;;      Totals:         0       0       0
  1008 ;;Total ram usage:        0 bytes
  1009 ;; Hardware stack levels used:    1
  1010 ;; Hardware stack levels required when called:    1
  1011 ;; This function calls:
  1012 ;;		Nothing
  1013 ;; This function is called by:
  1014 ;;		_main
  1015 ;; This function uses a non-reentrant model
  1016 ;;
  1017                           
  1018                           
  1019                           ;psect for function _init
  1020  02FD                     _init:	
  1021                           
  1022                           ;main.c: 46: WDTCONbits.WDTPS = 0b01001;
  1023                           
  1024                           ;incstack = 0
  1025                           ; Regs used in _init: [wreg+status,2+status,0]
  1026  02FD  0021               	movlb	1	; select bank1
  1027  02FE  0817               	movf	23,w	;volatile
  1028  02FF  39C1               	andlw	-63
  1029  0300  3812               	iorlw	18
  1030  0301  0097               	movwf	23	;volatile
  1031                           
  1032                           ;main.c: 47: OSCCON=0x70;
  1033  0302  3070               	movlw	112
  1034  0303  0099               	movwf	25	;volatile
  1035                           
  1036                           ;main.c: 48: TRISAbits.TRISA5 = 0;
  1037  0304  128C               	bcf	12,5	;volatile
  1038                           
  1039                           ;main.c: 49: LATAbits.LATA5 = 1;
  1040  0305  0022               	movlb	2	; select bank2
  1041  0306  168C               	bsf	12,5	;volatile
  1042                           
  1043                           ;main.c: 50: ANSELAbits.ANSA0 = 0;
  1044  0307  0023               	movlb	3	; select bank3
  1045  0308  100C               	bcf	12,0	;volatile
  1046                           
  1047                           ;main.c: 51: TRISAbits.TRISA0 = 0;
  1048  0309  0021               	movlb	1	; select bank1
  1049  030A  100C               	bcf	12,0	;volatile
  1050                           
  1051                           ;main.c: 52: LATAbits.LATA0 = 1;
  1052  030B  0022               	movlb	2	; select bank2
  1053  030C  140C               	bsf	12,0	;volatile
  1054                           
  1055                           ;main.c: 55: ANSELAbits.ANSA2 = 0;
  1056  030D  0023               	movlb	3	; select bank3
  1057  030E  110C               	bcf	12,2	;volatile
  1058                           
  1059                           ;main.c: 56: TRISAbits.TRISA2 = 1;
  1060  030F  0021               	movlb	1	; select bank1
  1061  0310  150C               	bsf	12,2	;volatile
  1062                           
  1063                           ;main.c: 58: ANSELAbits.ANSA1 = 0;
  1064  0311  0023               	movlb	3	; select bank3
  1065  0312  108C               	bcf	12,1	;volatile
  1066                           
  1067                           ;main.c: 59: TRISAbits.TRISA1 = 0;
  1068  0313  0021               	movlb	1	; select bank1
  1069  0314  108C               	bcf	12,1	;volatile
  1070                           
  1071                           ;main.c: 60: LATAbits.LATA1 = 0;
  1072  0315  0022               	movlb	2	; select bank2
  1073  0316  108C               	bcf	12,1	;volatile
  1074  0317  0008               	return
  1075  0318                     __end_of_init:	
  1076                           
  1077                           	psect	text3
  1078  0031                     __ptext3:	
  1079 ;; *************** function _calibrate *****************
  1080 ;; Defined at:
  1081 ;;		line 86 in file "main.c"
  1082 ;; Parameters:    Size  Location     Type
  1083 ;;		None
  1084 ;; Auto vars:     Size  Location     Type
  1085 ;;  averageVal      4   34[BANK0 ] long 
  1086 ;;  cumulativeVa    4   30[BANK0 ] long 
  1087 ;;  inputVal        2   40[BANK0 ] int 
  1088 ;;  i               2   38[BANK0 ] int 
  1089 ;;  lastVal         2   28[BANK0 ] int 
  1090 ;; Return value:  Size  Location     Type
  1091 ;;                  2   22[BANK0 ] int 
  1092 ;; Registers used:
  1093 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1094 ;; Tracked objects:
  1095 ;;		On entry : 0/0
  1096 ;;		On exit  : 0/0
  1097 ;;		Unchanged: 0/0
  1098 ;; Data sizes:     COMMON   BANK0   BANK1
  1099 ;;      Params:         0       2       0
  1100 ;;      Locals:         0      14       0
  1101 ;;      Temps:          0       4       0
  1102 ;;      Totals:         0      20       0
  1103 ;;Total ram usage:       20 bytes
  1104 ;; Hardware stack levels used:    1
  1105 ;; Hardware stack levels required when called:    2
  1106 ;; This function calls:
  1107 ;;		___aldiv
  1108 ;;		__delay_ms
  1109 ;;		_abs
  1110 ;;		_getValue
  1111 ;; This function is called by:
  1112 ;;		_main
  1113 ;; This function uses a non-reentrant model
  1114 ;;
  1115                           
  1116                           
  1117                           ;psect for function _calibrate
  1118  0031                     _calibrate:	
  1119                           
  1120                           ;main.c: 91: int i;
  1121                           ;main.c: 92: long cumulativeVal = 0;
  1122                           
  1123                           ;incstack = 0
  1124                           ; Regs used in _calibrate: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1125  0031  3000               	movlw	0
  1126  0032  0020               	movlb	0	; select bank0
  1127  0033  00C1               	movwf	calibrate@cumulativeVal+3
  1128  0034  3000               	movlw	0
  1129  0035  00C0               	movwf	calibrate@cumulativeVal+2
  1130  0036  3000               	movlw	0
  1131  0037  00BF               	movwf	calibrate@cumulativeVal+1
  1132  0038  3000               	movlw	0
  1133  0039  00BE               	movwf	calibrate@cumulativeVal
  1134                           
  1135                           ;main.c: 93: long averageVal;
  1136                           ;main.c: 94: int inputVal;
  1137                           ;main.c: 95: int lastVal = 0;
  1138  003A  01BC               	clrf	calibrate@lastVal
  1139  003B  01BD               	clrf	calibrate@lastVal+1
  1140                           
  1141                           ;main.c: 116: break;
  1142  003C  2842               	goto	l72
  1143  003D                     l1215:	
  1144                           
  1145                           ;main.c: 117: }
  1146                           ;main.c: 118: }
  1147                           ;main.c: 119: }
  1148                           ;main.c: 120: _delay_ms(20);
  1149  003D  3014               	movlw	20
  1150  003E  00F3               	movwf	__delay_ms@ms
  1151  003F  3000               	movlw	0
  1152  0040  00F4               	movwf	__delay_ms@ms+1
  1153  0041  2318               	fcall	__delay_ms
  1154  0042                     l72:	
  1155                           ;main.c: 100: while (1)
  1156                           
  1157  0042  0064               	clrwdt	;# 
  1158                           
  1159                           ;main.c: 103: inputVal = getValue();
  1160  0043  2299               	fcall	_getValue
  1161  0044  0874               	movf	?_getValue+1,w
  1162  0045  0020               	movlb	0	; select bank0
  1163  0046  01C9               	clrf	calibrate@inputVal+1
  1164  0047  07C9               	addwf	calibrate@inputVal+1,f
  1165  0048  0873               	movf	?_getValue,w
  1166  0049  01C8               	clrf	calibrate@inputVal
  1167  004A  07C8               	addwf	calibrate@inputVal,f
  1168                           
  1169                           ;main.c: 104: if ( (inputVal < 1200)
  1170                           ;main.c: 105: && (inputVal > 300) )
  1171  004B  0849               	movf	calibrate@inputVal+1,w
  1172  004C  3A80               	xorlw	128
  1173  004D  00FF               	movwf	127
  1174  004E  3084               	movlw	132
  1175  004F  027F               	subwf	127,w
  1176  0050  1D03               	skipz
  1177  0051  2854               	goto	u815
  1178  0052  30B0               	movlw	176
  1179  0053  0248               	subwf	calibrate@inputVal,w
  1180  0054                     u815:	
  1181  0054  1803               	skipnc
  1182  0055  283D               	goto	l1215
  1183  0056  0020               	movlb	0	; select bank0
  1184  0057  0849               	movf	calibrate@inputVal+1,w
  1185  0058  3A80               	xorlw	128
  1186  0059  00FF               	movwf	127
  1187  005A  3081               	movlw	129
  1188  005B  027F               	subwf	127,w
  1189  005C  1D03               	skipz
  1190  005D  2860               	goto	u825
  1191  005E  302D               	movlw	45
  1192  005F  0248               	subwf	calibrate@inputVal,w
  1193  0060                     u825:	
  1194  0060  1C03               	skipc
  1195  0061  283D               	goto	l1215
  1196                           
  1197                           ;main.c: 106: {
  1198                           ;main.c: 107: lastVal = inputVal;
  1199  0062  0020               	movlb	0	; select bank0
  1200  0063  0849               	movf	calibrate@inputVal+1,w
  1201  0064  01BD               	clrf	calibrate@lastVal+1
  1202  0065  07BD               	addwf	calibrate@lastVal+1,f
  1203  0066  0848               	movf	calibrate@inputVal,w
  1204  0067  01BC               	clrf	calibrate@lastVal
  1205  0068  07BC               	addwf	calibrate@lastVal,f
  1206                           
  1207                           ;main.c: 108: inputVal = getValue();
  1208  0069  2299               	fcall	_getValue
  1209  006A  0874               	movf	?_getValue+1,w
  1210  006B  0020               	movlb	0	; select bank0
  1211  006C  01C9               	clrf	calibrate@inputVal+1
  1212  006D  07C9               	addwf	calibrate@inputVal+1,f
  1213  006E  0873               	movf	?_getValue,w
  1214  006F  01C8               	clrf	calibrate@inputVal
  1215  0070  07C8               	addwf	calibrate@inputVal,f
  1216                           
  1217                           ;main.c: 109: if ( (inputVal < 1200)
  1218                           ;main.c: 110: && (inputVal > 300) )
  1219  0071  0849               	movf	calibrate@inputVal+1,w
  1220  0072  3A80               	xorlw	128
  1221  0073  00FF               	movwf	127
  1222  0074  3084               	movlw	132
  1223  0075  027F               	subwf	127,w
  1224  0076  1D03               	skipz
  1225  0077  287A               	goto	u835
  1226  0078  30B0               	movlw	176
  1227  0079  0248               	subwf	calibrate@inputVal,w
  1228  007A                     u835:	
  1229  007A  1803               	skipnc
  1230  007B  283D               	goto	l1215
  1231  007C  0020               	movlb	0	; select bank0
  1232  007D  0849               	movf	calibrate@inputVal+1,w
  1233  007E  3A80               	xorlw	128
  1234  007F  00FF               	movwf	127
  1235  0080  3081               	movlw	129
  1236  0081  027F               	subwf	127,w
  1237  0082  1D03               	skipz
  1238  0083  2886               	goto	u845
  1239  0084  302D               	movlw	45
  1240  0085  0248               	subwf	calibrate@inputVal,w
  1241  0086                     u845:	
  1242  0086  1C03               	skipc
  1243  0087  283D               	goto	l1215
  1244                           
  1245                           ;main.c: 111: {
  1246                           ;main.c: 112: if ( abs( inputVal - lastVal ) < 10 )
  1247  0088  0020               	movlb	0	; select bank0
  1248  0089  093C               	comf	calibrate@lastVal,w
  1249  008A  00B8               	movwf	??_calibrate
  1250  008B  093D               	comf	calibrate@lastVal+1,w
  1251  008C  00B9               	movwf	??_calibrate+1
  1252  008D  0AB8               	incf	??_calibrate,f
  1253  008E  1903               	skipnz
  1254  008F  0AB9               	incf	??_calibrate+1,f
  1255  0090  0848               	movf	calibrate@inputVal,w
  1256  0091  0738               	addwf	??_calibrate,w
  1257  0092  00F3               	movwf	abs@a
  1258  0093  0849               	movf	calibrate@inputVal+1,w
  1259  0094  3D39               	addwfc	??_calibrate+1,w
  1260  0095  00F4               	movwf	abs@a+1
  1261  0096  2331               	fcall	_abs
  1262  0097  0874               	movf	?_abs+1,w
  1263  0098  3A80               	xorlw	128
  1264  0099  00FF               	movwf	127
  1265  009A  3080               	movlw	128
  1266  009B  027F               	subwf	127,w
  1267  009C  1D03               	skipz
  1268  009D  28A0               	goto	u855
  1269  009E  300A               	movlw	10
  1270  009F  0273               	subwf	?_abs,w
  1271  00A0                     u855:	
  1272  00A0  1803               	skipnc
  1273  00A1  283D               	goto	l1215
  1274                           
  1275                           ;main.c: 113: {
  1276                           ;main.c: 114: cumulativeVal = inputVal;
  1277  00A2  0020               	movlb	0	; select bank0
  1278  00A3  0848               	movf	calibrate@inputVal,w
  1279  00A4  00BE               	movwf	calibrate@cumulativeVal
  1280  00A5  0849               	movf	calibrate@inputVal+1,w
  1281  00A6  00BF               	movwf	calibrate@cumulativeVal+1
  1282  00A7  0D89               	rlf	9,f
  1283  00A8  3B89               	subwfb	9,f
  1284  00A9  0989               	comf	9,f
  1285  00AA  00C0               	movwf	calibrate@cumulativeVal+2
  1286  00AB  00C1               	movwf	calibrate@cumulativeVal+3
  1287                           
  1288                           ;main.c: 115: averageVal = inputVal;
  1289  00AC  0848               	movf	calibrate@inputVal,w
  1290  00AD  00C2               	movwf	calibrate@averageVal
  1291  00AE  0849               	movf	calibrate@inputVal+1,w
  1292  00AF  00C3               	movwf	calibrate@averageVal+1
  1293  00B0  0D89               	rlf	9,f
  1294  00B1  3B89               	subwfb	9,f
  1295  00B2  0989               	comf	9,f
  1296  00B3  00C4               	movwf	calibrate@averageVal+2
  1297  00B4  00C5               	movwf	calibrate@averageVal+3
  1298                           
  1299                           ;main.c: 121: }
  1300                           ;main.c: 123: i = 1;
  1301  00B5  3001               	movlw	1
  1302  00B6  0020               	movlb	0	; select bank0
  1303  00B7  00C6               	movwf	calibrate@i
  1304  00B8  3000               	movlw	0
  1305  00B9  00C7               	movwf	calibrate@i+1
  1306  00BA                     l1229:	
  1307                           ;main.c: 124: while (i < 10)
  1308                           
  1309  00BA  0020               	movlb	0	; select bank0
  1310  00BB  0847               	movf	calibrate@i+1,w
  1311  00BC  3A80               	xorlw	128
  1312  00BD  00FF               	movwf	127
  1313  00BE  3080               	movlw	128
  1314  00BF  027F               	subwf	127,w
  1315  00C0  1D03               	skipz
  1316  00C1  28C4               	goto	u875
  1317  00C2  300A               	movlw	10
  1318  00C3  0246               	subwf	calibrate@i,w
  1319  00C4                     u875:	
  1320  00C4  1803               	btfsc	3,0
  1321  00C5  2921               	goto	l1231
  1322  00C6  0064               	clrwdt	;# 
  1323                           
  1324                           ;main.c: 127: inputVal = getValue();
  1325  00C7  2299               	fcall	_getValue
  1326  00C8  0874               	movf	?_getValue+1,w
  1327  00C9  0020               	movlb	0	; select bank0
  1328  00CA  01C9               	clrf	calibrate@inputVal+1
  1329  00CB  07C9               	addwf	calibrate@inputVal+1,f
  1330  00CC  0873               	movf	?_getValue,w
  1331  00CD  01C8               	clrf	calibrate@inputVal
  1332  00CE  07C8               	addwf	calibrate@inputVal,f
  1333                           
  1334                           ;main.c: 128: if ( abs( inputVal - averageVal ) < 10 )
  1335  00CF  0942               	comf	calibrate@averageVal,w
  1336  00D0  00B8               	movwf	??_calibrate
  1337  00D1  0943               	comf	calibrate@averageVal+1,w
  1338  00D2  00B9               	movwf	??_calibrate+1
  1339  00D3  0AB8               	incf	??_calibrate,f
  1340  00D4  1903               	skipnz
  1341  00D5  0AB9               	incf	??_calibrate+1,f
  1342  00D6  0848               	movf	calibrate@inputVal,w
  1343  00D7  0738               	addwf	??_calibrate,w
  1344  00D8  00F3               	movwf	abs@a
  1345  00D9  0849               	movf	calibrate@inputVal+1,w
  1346  00DA  3D39               	addwfc	??_calibrate+1,w
  1347  00DB  00F4               	movwf	abs@a+1
  1348  00DC  2331               	fcall	_abs
  1349  00DD  0874               	movf	?_abs+1,w
  1350  00DE  3A80               	xorlw	128
  1351  00DF  00FF               	movwf	127
  1352  00E0  3080               	movlw	128
  1353  00E1  027F               	subwf	127,w
  1354  00E2  1D03               	skipz
  1355  00E3  28E6               	goto	u865
  1356  00E4  300A               	movlw	10
  1357  00E5  0273               	subwf	?_abs,w
  1358  00E6                     u865:	
  1359  00E6  1803               	skipnc
  1360  00E7  291B               	goto	l80
  1361                           
  1362                           ;main.c: 129: {
  1363                           ;main.c: 130: cumulativeVal += inputVal;
  1364  00E8  0020               	movlb	0	; select bank0
  1365  00E9  0848               	movf	calibrate@inputVal,w
  1366  00EA  00B8               	movwf	??_calibrate
  1367  00EB  0849               	movf	calibrate@inputVal+1,w
  1368  00EC  00B9               	movwf	??_calibrate+1
  1369  00ED  3000               	movlw	0
  1370  00EE  1BB9               	btfsc	??_calibrate+1,7
  1371  00EF  30FF               	movlw	255
  1372  00F0  00BA               	movwf	??_calibrate+2
  1373  00F1  00BB               	movwf	??_calibrate+3
  1374  00F2  0838               	movf	??_calibrate,w
  1375  00F3  07BE               	addwf	calibrate@cumulativeVal,f
  1376  00F4  0839               	movf	??_calibrate+1,w
  1377  00F5  3DBF               	addwfc	calibrate@cumulativeVal+1,f
  1378  00F6  083A               	movf	??_calibrate+2,w
  1379  00F7  3DC0               	addwfc	calibrate@cumulativeVal+2,f
  1380  00F8  083B               	movf	??_calibrate+3,w
  1381  00F9  3DC1               	addwfc	calibrate@cumulativeVal+3,f
  1382                           
  1383                           ;main.c: 131: averageVal = cumulativeVal / (i + 1);
  1384  00FA  0846               	movf	calibrate@i,w
  1385  00FB  3E01               	addlw	1
  1386  00FC  00A8               	movwf	___aldiv@divisor
  1387  00FD  3000               	movlw	0
  1388  00FE  3D47               	addwfc	calibrate@i+1,w
  1389  00FF  00A9               	movwf	___aldiv@divisor+1
  1390  0100  01AA               	clrf	___aldiv@divisor+2
  1391  0101  1BA9               	btfsc	___aldiv@divisor+1,7
  1392  0102  03AA               	decf	___aldiv@divisor+2,f
  1393  0103  082A               	movf	___aldiv@divisor+2,w
  1394  0104  00AB               	movwf	___aldiv@divisor+3
  1395  0105  0841               	movf	calibrate@cumulativeVal+3,w
  1396  0106  00AF               	movwf	___aldiv@dividend+3
  1397  0107  0840               	movf	calibrate@cumulativeVal+2,w
  1398  0108  00AE               	movwf	___aldiv@dividend+2
  1399  0109  083F               	movf	calibrate@cumulativeVal+1,w
  1400  010A  00AD               	movwf	___aldiv@dividend+1
  1401  010B  083E               	movf	calibrate@cumulativeVal,w
  1402  010C  00AC               	movwf	___aldiv@dividend
  1403  010D  2217               	fcall	___aldiv
  1404  010E  0020               	movlb	0	; select bank0
  1405  010F  082B               	movf	?___aldiv+3,w
  1406  0110  00C5               	movwf	calibrate@averageVal+3
  1407  0111  082A               	movf	?___aldiv+2,w
  1408  0112  00C4               	movwf	calibrate@averageVal+2
  1409  0113  0829               	movf	?___aldiv+1,w
  1410  0114  00C3               	movwf	calibrate@averageVal+1
  1411  0115  0828               	movf	?___aldiv,w
  1412  0116  00C2               	movwf	calibrate@averageVal
  1413                           
  1414                           ;main.c: 132: i ++;
  1415  0117  3001               	movlw	1
  1416  0118  07C6               	addwf	calibrate@i,f
  1417  0119  3000               	movlw	0
  1418  011A  3DC7               	addwfc	calibrate@i+1,f
  1419  011B                     l80:	
  1420                           
  1421                           ;main.c: 133: }
  1422                           ;main.c: 134: _delay_ms(20);
  1423  011B  3014               	movlw	20
  1424  011C  00F3               	movwf	__delay_ms@ms
  1425  011D  3000               	movlw	0
  1426  011E  00F4               	movwf	__delay_ms@ms+1
  1427  011F  2318               	fcall	__delay_ms
  1428  0120  28BA               	goto	l1229
  1429  0121                     l1231:	
  1430                           
  1431                           ;main.c: 135: }
  1432                           ;main.c: 140: for (i = 0; i < 2; i ++)
  1433  0121  0020               	movlb	0	; select bank0
  1434  0122  01C6               	clrf	calibrate@i
  1435  0123  01C7               	clrf	calibrate@i+1
  1436  0124  0847               	movf	calibrate@i+1,w
  1437  0125  3A80               	xorlw	128
  1438  0126  00FF               	movwf	127
  1439  0127  3080               	movlw	128
  1440  0128  027F               	subwf	127,w
  1441  0129  1D03               	skipz
  1442  012A  292D               	goto	u885
  1443  012B  3002               	movlw	2
  1444  012C  0246               	subwf	calibrate@i,w
  1445  012D                     u885:	
  1446  012D  1803               	btfsc	3,0
  1447  012E  2951               	goto	l1247
  1448  012F                     l82:	
  1449  012F  0064               	clrwdt	;# 
  1450                           
  1451                           ;main.c: 143: LATAbits.LATA5 = 0;
  1452  0130  0022               	movlb	2	; select bank2
  1453  0131  128C               	bcf	12,5	;volatile
  1454                           
  1455                           ;main.c: 144: LATAbits.LATA0 = 0;
  1456  0132  100C               	bcf	12,0	;volatile
  1457                           
  1458                           ;main.c: 145: _delay_ms(200);
  1459  0133  30C8               	movlw	200
  1460  0134  00F3               	movwf	__delay_ms@ms
  1461  0135  3000               	movlw	0
  1462  0136  00F4               	movwf	__delay_ms@ms+1
  1463  0137  2318               	fcall	__delay_ms
  1464  0138  0064               	clrwdt	;# 
  1465                           
  1466                           ;main.c: 148: LATAbits.LATA5= 1;
  1467  0139  0022               	movlb	2	; select bank2
  1468  013A  168C               	bsf	12,5	;volatile
  1469                           
  1470                           ;main.c: 149: LATAbits.LATA0 = 1;
  1471  013B  140C               	bsf	12,0	;volatile
  1472                           
  1473                           ;main.c: 150: _delay_ms(200);
  1474  013C  30C8               	movlw	200
  1475  013D  00F3               	movwf	__delay_ms@ms
  1476  013E  3000               	movlw	0
  1477  013F  00F4               	movwf	__delay_ms@ms+1
  1478  0140  2318               	fcall	__delay_ms
  1479  0141  3001               	movlw	1
  1480  0142  0020               	movlb	0	; select bank0
  1481  0143  07C6               	addwf	calibrate@i,f
  1482  0144  3000               	movlw	0
  1483  0145  3DC7               	addwfc	calibrate@i+1,f
  1484  0146  0847               	movf	calibrate@i+1,w
  1485  0147  3A80               	xorlw	128
  1486  0148  00FF               	movwf	127
  1487  0149  3080               	movlw	128
  1488  014A  027F               	subwf	127,w
  1489  014B  1D03               	skipz
  1490  014C  294F               	goto	u895
  1491  014D  3002               	movlw	2
  1492  014E  0246               	subwf	calibrate@i,w
  1493  014F                     u895:	
  1494  014F  1C03               	skipc
  1495  0150  292F               	goto	l82
  1496  0151                     l1247:	
  1497                           
  1498                           ;main.c: 151: }
  1499                           ;main.c: 153: return averageVal;
  1500  0151  0020               	movlb	0	; select bank0
  1501  0152  0843               	movf	calibrate@averageVal+1,w
  1502  0153  01B7               	clrf	?_calibrate+1
  1503  0154  07B7               	addwf	?_calibrate+1,f
  1504  0155  0842               	movf	calibrate@averageVal,w
  1505  0156  01B6               	clrf	?_calibrate
  1506  0157  07B6               	addwf	?_calibrate,f
  1507  0158  0008               	return
  1508  0159                     __end_of_calibrate:	
  1509                           
  1510                           	psect	text4
  1511  0299                     __ptext4:	
  1512 ;; *************** function _getValue *****************
  1513 ;; Defined at:
  1514 ;;		line 64 in file "main.c"
  1515 ;; Parameters:    Size  Location     Type
  1516 ;;		None
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;  val             2    7[COMMON] int 
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  2    3[COMMON] int 
  1521 ;; Registers used:
  1522 ;;		wreg, status,2, status,0
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMMON   BANK0   BANK1
  1528 ;;      Params:         2       0       0
  1529 ;;      Locals:         2       0       0
  1530 ;;      Temps:          2       0       0
  1531 ;;      Totals:         6       0       0
  1532 ;;Total ram usage:        6 bytes
  1533 ;; Hardware stack levels used:    1
  1534 ;; Hardware stack levels required when called:    1
  1535 ;; This function calls:
  1536 ;;		Nothing
  1537 ;; This function is called by:
  1538 ;;		_calibrate
  1539 ;;		_main
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           
  1544                           ;psect for function _getValue
  1545  0299                     _getValue:	
  1546                           
  1547                           ;main.c: 66: int val = 0;
  1548                           
  1549                           ;incstack = 0
  1550                           ; Regs used in _getValue: [wreg+status,2+status,0]
  1551  0299  01F7               	clrf	getValue@val
  1552  029A  01F8               	clrf	getValue@val+1
  1553                           
  1554                           ;main.c: 68: FVRCONbits.ADFVR = 0b10;
  1555  029B  0022               	movlb	2	; select bank2
  1556  029C  0817               	movf	23,w	;volatile
  1557  029D  39FC               	andlw	-4
  1558  029E  3802               	iorlw	2
  1559  029F  0097               	movwf	23	;volatile
  1560                           
  1561                           ;main.c: 69: FVRCONbits.FVREN = 1;
  1562  02A0  1797               	bsf	23,7	;volatile
  1563                           
  1564                           ;main.c: 70: ADCON1bits.ADPREF = 0b11;
  1565  02A1  3003               	movlw	3
  1566  02A2  0021               	movlb	1	; select bank1
  1567  02A3  049E               	iorwf	30,f	;volatile
  1568                           
  1569                           ;main.c: 71: ADCON1bits.ADCS = 0b001;
  1570  02A4  081E               	movf	30,w	;volatile
  1571  02A5  398F               	andlw	-113
  1572  02A6  3810               	iorlw	16
  1573  02A7  009E               	movwf	30	;volatile
  1574                           
  1575                           ;main.c: 72: ANSELAbits.ANSA4 = 1;
  1576  02A8  0023               	movlb	3	; select bank3
  1577  02A9  160C               	bsf	12,4	;volatile
  1578                           
  1579                           ;main.c: 73: TRISAbits.TRISA4 = 1;
  1580  02AA  0021               	movlb	1	; select bank1
  1581  02AB  160C               	bsf	12,4	;volatile
  1582                           
  1583                           ;main.c: 74: ADCON0bits.CHS = 3;
  1584  02AC  081D               	movf	29,w	;volatile
  1585  02AD  3983               	andlw	-125
  1586  02AE  380C               	iorlw	12
  1587  02AF  009D               	movwf	29	;volatile
  1588                           
  1589                           ;main.c: 75: ADCON0bits.ADON = 1;
  1590  02B0  141D               	bsf	29,0	;volatile
  1591                           
  1592                           ;main.c: 76: ADCON0bits.GO_nDONE = 1;
  1593  02B1  149D               	bsf	29,1	;volatile
  1594  02B2                     l937:	
  1595                           ;main.c: 77: while (ADCON0bits.GO_nDONE)
  1596                           
  1597  02B2  1C9D               	btfss	29,1	;volatile
  1598  02B3  2AB9               	goto	l939
  1599                           
  1600                           ;main.c: 78: {
  1601                           ;main.c: 79: val ++;
  1602  02B4  3001               	movlw	1
  1603  02B5  07F7               	addwf	getValue@val,f
  1604  02B6  3000               	movlw	0
  1605  02B7  3DF8               	addwfc	getValue@val+1,f
  1606  02B8  2AB2               	goto	l937
  1607  02B9                     l939:	
  1608                           
  1609                           ;main.c: 80: }
  1610                           ;main.c: 81: val = ADRES >> 6;
  1611  02B9  081C               	movf	28,w	;volatile
  1612  02BA  00F6               	movwf	??_getValue+1
  1613  02BB  081B               	movf	27,w	;volatile
  1614  02BC  00F5               	movwf	??_getValue
  1615  02BD  3006               	movlw	6
  1616  02BE                     u445:	
  1617  02BE  36F6               	lsrf	??_getValue+1,f
  1618  02BF  0CF5               	rrf	??_getValue,f
  1619  02C0  0B89               	decfsz	9,f
  1620  02C1  2ABE               	goto	u445
  1621  02C2  0875               	movf	??_getValue,w
  1622  02C3  00F7               	movwf	getValue@val
  1623  02C4  0876               	movf	??_getValue+1,w
  1624  02C5  00F8               	movwf	getValue@val+1
  1625                           
  1626                           ;main.c: 83: return val;
  1627  02C6  0878               	movf	getValue@val+1,w
  1628  02C7  01F4               	clrf	?_getValue+1
  1629  02C8  07F4               	addwf	?_getValue+1,f
  1630  02C9  0877               	movf	getValue@val,w
  1631  02CA  01F3               	clrf	?_getValue
  1632  02CB  07F3               	addwf	?_getValue,f
  1633  02CC  0008               	return
  1634  02CD                     __end_of_getValue:	
  1635                           
  1636                           	psect	text5
  1637  0331                     __ptext5:	
  1638 ;; *************** function _abs *****************
  1639 ;; Defined at:
  1640 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.31\sources\common\abs.c"
  1641 ;; Parameters:    Size  Location     Type
  1642 ;;  a               2    3[COMMON] int 
  1643 ;; Auto vars:     Size  Location     Type
  1644 ;;		None
  1645 ;; Return value:  Size  Location     Type
  1646 ;;                  2    3[COMMON] int 
  1647 ;; Registers used:
  1648 ;;		wreg, status,2, status,0
  1649 ;; Tracked objects:
  1650 ;;		On entry : 0/0
  1651 ;;		On exit  : 0/0
  1652 ;;		Unchanged: 0/0
  1653 ;; Data sizes:     COMMON   BANK0   BANK1
  1654 ;;      Params:         2       0       0
  1655 ;;      Locals:         0       0       0
  1656 ;;      Temps:          2       0       0
  1657 ;;      Totals:         4       0       0
  1658 ;;Total ram usage:        4 bytes
  1659 ;; Hardware stack levels used:    1
  1660 ;; Hardware stack levels required when called:    1
  1661 ;; This function calls:
  1662 ;;		Nothing
  1663 ;; This function is called by:
  1664 ;;		_calibrate
  1665 ;; This function uses a non-reentrant model
  1666 ;;
  1667                           
  1668                           
  1669                           ;psect for function _abs
  1670  0331                     _abs:	
  1671                           
  1672                           ;incstack = 0
  1673                           ; Regs used in _abs: [wreg+status,2+status,0]
  1674  0331  1FF4               	btfss	abs@a+1,7
  1675  0332  0008               	return
  1676  0333  0973               	comf	abs@a,w
  1677  0334  00F5               	movwf	??_abs
  1678  0335  0974               	comf	abs@a+1,w
  1679  0336  00F6               	movwf	??_abs+1
  1680  0337  0AF5               	incf	??_abs,f
  1681  0338  1903               	skipnz
  1682  0339  0AF6               	incf	??_abs+1,f
  1683  033A  0875               	movf	??_abs,w
  1684  033B  00F3               	movwf	?_abs
  1685  033C  0876               	movf	??_abs+1,w
  1686  033D  00F4               	movwf	?_abs+1
  1687  033E  0008               	return
  1688  033F                     __end_of_abs:	
  1689                           
  1690                           	psect	text6
  1691  0318                     __ptext6:	
  1692 ;; *************** function __delay_ms *****************
  1693 ;; Defined at:
  1694 ;;		line 32 in file "main.c"
  1695 ;; Parameters:    Size  Location     Type
  1696 ;;  ms              2    3[COMMON] unsigned int 
  1697 ;; Auto vars:     Size  Location     Type
  1698 ;;  us              1    7[COMMON] unsigned char 
  1699 ;;  i               1    6[COMMON] unsigned char 
  1700 ;; Return value:  Size  Location     Type
  1701 ;;		None               void
  1702 ;; Registers used:
  1703 ;;		wreg, status,2, status,0
  1704 ;; Tracked objects:
  1705 ;;		On entry : 0/0
  1706 ;;		On exit  : 0/0
  1707 ;;		Unchanged: 0/0
  1708 ;; Data sizes:     COMMON   BANK0   BANK1
  1709 ;;      Params:         2       0       0
  1710 ;;      Locals:         2       0       0
  1711 ;;      Temps:          1       0       0
  1712 ;;      Totals:         5       0       0
  1713 ;;Total ram usage:        5 bytes
  1714 ;; Hardware stack levels used:    1
  1715 ;; Hardware stack levels required when called:    1
  1716 ;; This function calls:
  1717 ;;		Nothing
  1718 ;; This function is called by:
  1719 ;;		_calibrate
  1720 ;;		_main
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724                           
  1725                           ;psect for function __delay_ms
  1726  0318                     __delay_ms:	
  1727                           
  1728                           ;main.c: 34: unsigned char i;
  1729                           ;main.c: 35: if (ms == 0) return;
  1730                           
  1731                           ;incstack = 0
  1732                           ; Regs used in __delay_ms: [wreg+status,2+status,0]
  1733  0318  0874               	movf	__delay_ms@ms+1,w
  1734  0319  0473               	iorwf	__delay_ms@ms,w
  1735  031A  1903               	btfsc	3,2
  1736  031B  0008               	return
  1737                           
  1738                           ;main.c: 37: i = 4;
  1739                           
  1740                           ;main.c: 36: do {
  1741  031C  3004               	movlw	4
  1742  031D  00F5               	movwf	??__delay_ms
  1743  031E  0875               	movf	??__delay_ms,w
  1744  031F  00F6               	movwf	__delay_ms@i
  1745  0320                     l55:	
  1746                           ;main.c: 38: do {
  1747                           
  1748                           
  1749                           ;main.c: 39: { unsigned char us; us = (164)/(12000000/8000000L)|1; while(--us != 0) cont
      +                          inue; };
  1750  0320  30A5               	movlw	165
  1751  0321  00F5               	movwf	??__delay_ms
  1752  0322  0875               	movf	??__delay_ms,w
  1753  0323  00F7               	movwf	__delay_ms@us
  1754  0324                     l909:	
  1755  0324  3001               	movlw	1
  1756  0325  02F7               	subwf	__delay_ms@us,f
  1757  0326  1D03               	btfss	3,2
  1758  0327  2B24               	goto	l909
  1759                           
  1760                           ;main.c: 40: } while(--i);
  1761  0328  3001               	movlw	1
  1762  0329  02F6               	subwf	__delay_ms@i,f
  1763  032A  1D03               	btfss	3,2
  1764  032B  2B20               	goto	l55
  1765                           
  1766                           ;main.c: 41: } while(--ms);
  1767  032C  3001               	movlw	1
  1768  032D  02F3               	subwf	__delay_ms@ms,f
  1769  032E  3000               	movlw	0
  1770  032F  3BF4               	subwfb	__delay_ms@ms+1,f
  1771  0330  2B18               	goto	__delay_ms
  1772  0331                     __end_of__delay_ms:	
  1773                           
  1774                           	psect	text7
  1775  0217                     __ptext7:	
  1776 ;; *************** function ___aldiv *****************
  1777 ;; Defined at:
  1778 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.31\sources\common\aldiv.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;  divisor         4    8[BANK0 ] long 
  1781 ;;  dividend        4   12[BANK0 ] long 
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;  quotient        4   18[BANK0 ] long 
  1784 ;;  sign            1   17[BANK0 ] unsigned char 
  1785 ;;  counter         1   16[BANK0 ] unsigned char 
  1786 ;; Return value:  Size  Location     Type
  1787 ;;                  4    8[BANK0 ] long 
  1788 ;; Registers used:
  1789 ;;		wreg, status,2, status,0
  1790 ;; Tracked objects:
  1791 ;;		On entry : 0/0
  1792 ;;		On exit  : 0/0
  1793 ;;		Unchanged: 0/0
  1794 ;; Data sizes:     COMMON   BANK0   BANK1
  1795 ;;      Params:         0       8       0
  1796 ;;      Locals:         0       6       0
  1797 ;;      Temps:          1       0       0
  1798 ;;      Totals:         1      14       0
  1799 ;;Total ram usage:       15 bytes
  1800 ;; Hardware stack levels used:    1
  1801 ;; Hardware stack levels required when called:    1
  1802 ;; This function calls:
  1803 ;;		Nothing
  1804 ;; This function is called by:
  1805 ;;		_calibrate
  1806 ;;		_main
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810                           
  1811                           ;psect for function ___aldiv
  1812  0217                     ___aldiv:	
  1813                           
  1814                           ;incstack = 0
  1815                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1816  0217  0020               	movlb	0	; select bank0
  1817  0218  01B1               	clrf	___aldiv@sign
  1818  0219  1FAB               	btfss	___aldiv@divisor+3,7
  1819  021A  2A28               	goto	l215
  1820  021B  09A8               	comf	___aldiv@divisor,f
  1821  021C  09A9               	comf	___aldiv@divisor+1,f
  1822  021D  09AA               	comf	___aldiv@divisor+2,f
  1823  021E  09AB               	comf	___aldiv@divisor+3,f
  1824  021F  0AA8               	incf	___aldiv@divisor,f
  1825  0220  1903               	skipnz
  1826  0221  0AA9               	incf	___aldiv@divisor+1,f
  1827  0222  1903               	skipnz
  1828  0223  0AAA               	incf	___aldiv@divisor+2,f
  1829  0224  1903               	skipnz
  1830  0225  0AAB               	incf	___aldiv@divisor+3,f
  1831  0226  01B1               	clrf	___aldiv@sign
  1832  0227  0AB1               	incf	___aldiv@sign,f
  1833  0228                     l215:	
  1834  0228  1FAF               	btfss	___aldiv@dividend+3,7
  1835  0229  2A39               	goto	l1163
  1836  022A  09AC               	comf	___aldiv@dividend,f
  1837  022B  09AD               	comf	___aldiv@dividend+1,f
  1838  022C  09AE               	comf	___aldiv@dividend+2,f
  1839  022D  09AF               	comf	___aldiv@dividend+3,f
  1840  022E  0AAC               	incf	___aldiv@dividend,f
  1841  022F  1903               	skipnz
  1842  0230  0AAD               	incf	___aldiv@dividend+1,f
  1843  0231  1903               	skipnz
  1844  0232  0AAE               	incf	___aldiv@dividend+2,f
  1845  0233  1903               	skipnz
  1846  0234  0AAF               	incf	___aldiv@dividend+3,f
  1847  0235  3001               	movlw	1
  1848  0236  00F7               	movwf	??___aldiv
  1849  0237  0877               	movf	??___aldiv,w
  1850  0238  06B1               	xorwf	___aldiv@sign,f
  1851  0239                     l1163:	
  1852  0239  3000               	movlw	0
  1853  023A  00B5               	movwf	___aldiv@quotient+3
  1854  023B  3000               	movlw	0
  1855  023C  00B4               	movwf	___aldiv@quotient+2
  1856  023D  3000               	movlw	0
  1857  023E  00B3               	movwf	___aldiv@quotient+1
  1858  023F  3000               	movlw	0
  1859  0240  00B2               	movwf	___aldiv@quotient
  1860  0241  082B               	movf	___aldiv@divisor+3,w
  1861  0242  042A               	iorwf	___aldiv@divisor+2,w
  1862  0243  0429               	iorwf	___aldiv@divisor+1,w
  1863  0244  0428               	iorwf	___aldiv@divisor,w
  1864  0245  1903               	skipnz
  1865  0246  2A82               	goto	l1185
  1866  0247  01B0               	clrf	___aldiv@counter
  1867  0248  0AB0               	incf	___aldiv@counter,f
  1868  0249                     l1171:	
  1869  0249  1BAB               	btfsc	___aldiv@divisor+3,7
  1870  024A  2A57               	goto	l1173
  1871  024B  3001               	movlw	1
  1872  024C                     u745:	
  1873  024C  35A8               	lslf	___aldiv@divisor,f
  1874  024D  0DA9               	rlf	___aldiv@divisor+1,f
  1875  024E  0DAA               	rlf	___aldiv@divisor+2,f
  1876  024F  0DAB               	rlf	___aldiv@divisor+3,f
  1877  0250  0B89               	decfsz	9,f
  1878  0251  2A4C               	goto	u745
  1879  0252  3001               	movlw	1
  1880  0253  00F7               	movwf	??___aldiv
  1881  0254  0877               	movf	??___aldiv,w
  1882  0255  07B0               	addwf	___aldiv@counter,f
  1883  0256  2A49               	goto	l1171
  1884  0257                     l1173:	
  1885  0257  3001               	movlw	1
  1886  0258                     u765:	
  1887  0258  35B2               	lslf	___aldiv@quotient,f
  1888  0259  0DB3               	rlf	___aldiv@quotient+1,f
  1889  025A  0DB4               	rlf	___aldiv@quotient+2,f
  1890  025B  0DB5               	rlf	___aldiv@quotient+3,f
  1891  025C  0B89               	decfsz	9,f
  1892  025D  2A58               	goto	u765
  1893  025E  082B               	movf	___aldiv@divisor+3,w
  1894  025F  022F               	subwf	___aldiv@dividend+3,w
  1895  0260  1D03               	skipz
  1896  0261  2A6C               	goto	u775
  1897  0262  082A               	movf	___aldiv@divisor+2,w
  1898  0263  022E               	subwf	___aldiv@dividend+2,w
  1899  0264  1D03               	skipz
  1900  0265  2A6C               	goto	u775
  1901  0266  0829               	movf	___aldiv@divisor+1,w
  1902  0267  022D               	subwf	___aldiv@dividend+1,w
  1903  0268  1D03               	skipz
  1904  0269  2A6C               	goto	u775
  1905  026A  0828               	movf	___aldiv@divisor,w
  1906  026B  022C               	subwf	___aldiv@dividend,w
  1907  026C                     u775:	
  1908  026C  1C03               	skipc
  1909  026D  2A77               	goto	l1181
  1910  026E  0828               	movf	___aldiv@divisor,w
  1911  026F  02AC               	subwf	___aldiv@dividend,f
  1912  0270  0829               	movf	___aldiv@divisor+1,w
  1913  0271  3BAD               	subwfb	___aldiv@dividend+1,f
  1914  0272  082A               	movf	___aldiv@divisor+2,w
  1915  0273  3BAE               	subwfb	___aldiv@dividend+2,f
  1916  0274  082B               	movf	___aldiv@divisor+3,w
  1917  0275  3BAF               	subwfb	___aldiv@dividend+3,f
  1918  0276  1432               	bsf	___aldiv@quotient,0
  1919  0277                     l1181:	
  1920  0277  3001               	movlw	1
  1921  0278                     u785:	
  1922  0278  36AB               	lsrf	___aldiv@divisor+3,f
  1923  0279  0CAA               	rrf	___aldiv@divisor+2,f
  1924  027A  0CA9               	rrf	___aldiv@divisor+1,f
  1925  027B  0CA8               	rrf	___aldiv@divisor,f
  1926  027C  0B89               	decfsz	9,f
  1927  027D  2A78               	goto	u785
  1928  027E  3001               	movlw	1
  1929  027F  02B0               	subwf	___aldiv@counter,f
  1930  0280  1D03               	btfss	3,2
  1931  0281  2A57               	goto	l1173
  1932  0282                     l1185:	
  1933  0282  0831               	movf	___aldiv@sign,w
  1934  0283  1903               	btfsc	3,2
  1935  0284  2A90               	goto	l1189
  1936  0285  09B2               	comf	___aldiv@quotient,f
  1937  0286  09B3               	comf	___aldiv@quotient+1,f
  1938  0287  09B4               	comf	___aldiv@quotient+2,f
  1939  0288  09B5               	comf	___aldiv@quotient+3,f
  1940  0289  0AB2               	incf	___aldiv@quotient,f
  1941  028A  1903               	skipnz
  1942  028B  0AB3               	incf	___aldiv@quotient+1,f
  1943  028C  1903               	skipnz
  1944  028D  0AB4               	incf	___aldiv@quotient+2,f
  1945  028E  1903               	skipnz
  1946  028F  0AB5               	incf	___aldiv@quotient+3,f
  1947  0290                     l1189:	
  1948  0290  0835               	movf	___aldiv@quotient+3,w
  1949  0291  00AB               	movwf	?___aldiv+3
  1950  0292  0834               	movf	___aldiv@quotient+2,w
  1951  0293  00AA               	movwf	?___aldiv+2
  1952  0294  0833               	movf	___aldiv@quotient+1,w
  1953  0295  00A9               	movwf	?___aldiv+1
  1954  0296  0832               	movf	___aldiv@quotient,w
  1955  0297  00A8               	movwf	?___aldiv
  1956  0298  0008               	return
  1957  0299                     __end_of___aldiv:	
  1958                           
  1959                           	psect	text8
  1960  02CD                     __ptext8:	
  1961 ;; *************** function ___lmul *****************
  1962 ;; Defined at:
  1963 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.31\sources\common\lmul.c"
  1964 ;; Parameters:    Size  Location     Type
  1965 ;;  multiplier      4    0[BANK0 ] unsigned long 
  1966 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  1967 ;; Auto vars:     Size  Location     Type
  1968 ;;  product         4    3[COMMON] unsigned long 
  1969 ;; Return value:  Size  Location     Type
  1970 ;;                  4    0[BANK0 ] unsigned long 
  1971 ;; Registers used:
  1972 ;;		wreg, status,2, status,0
  1973 ;; Tracked objects:
  1974 ;;		On entry : 0/0
  1975 ;;		On exit  : 0/0
  1976 ;;		Unchanged: 0/0
  1977 ;; Data sizes:     COMMON   BANK0   BANK1
  1978 ;;      Params:         0       8       0
  1979 ;;      Locals:         4       0       0
  1980 ;;      Temps:          0       0       0
  1981 ;;      Totals:         4       8       0
  1982 ;;Total ram usage:       12 bytes
  1983 ;; Hardware stack levels used:    1
  1984 ;; Hardware stack levels required when called:    1
  1985 ;; This function calls:
  1986 ;;		Nothing
  1987 ;; This function is called by:
  1988 ;;		_main
  1989 ;; This function uses a non-reentrant model
  1990 ;;
  1991                           
  1992                           
  1993                           ;psect for function ___lmul
  1994  02CD                     ___lmul:	
  1995                           
  1996                           ;incstack = 0
  1997                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1998  02CD  3000               	movlw	0
  1999  02CE  00F6               	movwf	___lmul@product+3
  2000  02CF  3000               	movlw	0
  2001  02D0  00F5               	movwf	___lmul@product+2
  2002  02D1  3000               	movlw	0
  2003  02D2  00F4               	movwf	___lmul@product+1
  2004  02D3  3000               	movlw	0
  2005  02D4  00F3               	movwf	___lmul@product
  2006  02D5                     l1253:	
  2007  02D5  0020               	movlb	0	; select bank0
  2008  02D6  1C20               	btfss	___lmul@multiplier,0
  2009  02D7  2AE0               	goto	l1257
  2010  02D8  0824               	movf	___lmul@multiplicand,w
  2011  02D9  07F3               	addwf	___lmul@product,f
  2012  02DA  0825               	movf	___lmul@multiplicand+1,w
  2013  02DB  3DF4               	addwfc	___lmul@product+1,f
  2014  02DC  0826               	movf	___lmul@multiplicand+2,w
  2015  02DD  3DF5               	addwfc	___lmul@product+2,f
  2016  02DE  0827               	movf	___lmul@multiplicand+3,w
  2017  02DF  3DF6               	addwfc	___lmul@product+3,f
  2018  02E0                     l1257:	
  2019  02E0  3001               	movlw	1
  2020  02E1                     u915:	
  2021  02E1  35A4               	lslf	___lmul@multiplicand,f
  2022  02E2  0DA5               	rlf	___lmul@multiplicand+1,f
  2023  02E3  0DA6               	rlf	___lmul@multiplicand+2,f
  2024  02E4  0DA7               	rlf	___lmul@multiplicand+3,f
  2025  02E5  0B89               	decfsz	9,f
  2026  02E6  2AE1               	goto	u915
  2027  02E7  3001               	movlw	1
  2028  02E8                     u925:	
  2029  02E8  36A3               	lsrf	___lmul@multiplier+3,f
  2030  02E9  0CA2               	rrf	___lmul@multiplier+2,f
  2031  02EA  0CA1               	rrf	___lmul@multiplier+1,f
  2032  02EB  0CA0               	rrf	___lmul@multiplier,f
  2033  02EC  0B89               	decfsz	9,f
  2034  02ED  2AE8               	goto	u925
  2035  02EE  0823               	movf	___lmul@multiplier+3,w
  2036  02EF  0422               	iorwf	___lmul@multiplier+2,w
  2037  02F0  0421               	iorwf	___lmul@multiplier+1,w
  2038  02F1  0420               	iorwf	___lmul@multiplier,w
  2039  02F2  1D03               	skipz
  2040  02F3  2AD5               	goto	l1253
  2041  02F4  0876               	movf	___lmul@product+3,w
  2042  02F5  00A3               	movwf	?___lmul+3
  2043  02F6  0875               	movf	___lmul@product+2,w
  2044  02F7  00A2               	movwf	?___lmul+2
  2045  02F8  0874               	movf	___lmul@product+1,w
  2046  02F9  00A1               	movwf	?___lmul+1
  2047  02FA  0873               	movf	___lmul@product,w
  2048  02FB  00A0               	movwf	?___lmul
  2049  02FC  0008               	return
  2050  02FD                     __end_of___lmul:	


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      10
    BANK0            80     61      61
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_getValue
    _calibrate->_getValue
    ___aldiv->___lmul

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_calibrate
    _calibrate->___aldiv
    ___aldiv->___lmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    17      4    4072
                                             42 BANK0     19    15      4
                            ___aldiv
                             ___lmul
                          __delay_ms
                          _calibrate
                           _getValue
                               _init
                      _initInterrupt
 ---------------------------------------------------------------------------------
 (1) _initInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibrate                                           20    18      2    2040
                                             22 BANK0     20    18      2
                            ___aldiv
                          __delay_ms
                                _abs
                           _getValue
 ---------------------------------------------------------------------------------
 (1) _getValue                                             6     4      2      25
                                              3 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     172
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) __delay_ms                                            5     3      2     408
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     835
                                              7 COMMON     1     1      0
                                              8 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     396
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
     ___lmul (ARG)
   ___lmul
   __delay_ms
   _calibrate
     ___aldiv
       ___lmul (ARG)
     __delay_ms
     _abs
     _getValue
   _getValue
   _init
   _initInterrupt

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      47       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3D      3D       6       76.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      47       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Mon Jun 22 17:58:25 2015

                       __CFG_CP$ON 0000                                  _d 03C8  
                               l55 0320                                 l80 011B  
                               l72 0042                                 l82 012F  
                               l87 0205                        __CFG_CPD$ON 0000  
                              l215 0228                                l909 0324  
                              l937 02B2                                l939 02B9  
main@upperBallSensorThresholdValue 0050                                u445 02BE  
                              u815 0054                                u745 024C  
                              u825 0060                                u915 02E1  
                              u835 007A                                u925 02E8  
                              u765 0258                                u845 0086  
                              u775 026C                                u855 00A0  
                              u785 0278                                u865 00E6  
                              u945 01E6                                u875 00C4  
                              u955 01FE                                u885 012D  
                              u895 014F                                _abs 0331  
                              _isr 0004                       __CFG_BORV$HI 0000  
                              wreg 0009                       __CFG_LVP$OFF 0000  
                             ?_abs 0073                               l1301 01F4  
                             l1231 0121                               l1215 003D  
                             l1171 0249                               l1163 0239  
                             l1253 02D5                               l1181 0277  
                             l1173 0257                               l1229 00BA  
                             l1247 0151                               l1257 02E0  
                             l1185 0282                               l1189 0290  
                             l1293 01DC                               ?_isr 0070  
                     __CFG_WDTE$ON 0000                               i1l20 0027  
                             i1l21 001A                               i1l23 0024  
                     __CFG_WRT$OFF 0000                               abs@a 0073  
                             _main 0159                               _init 02FD  
                             btemp 007E                      __CFG_BOREN$ON 0000  
                             ltemp 007E                               start 002D  
                             ttemp 007E                               wtemp 007E  
                    __CFG_IESO$OFF 0000             calibrate@cumulativeVal 003E  
                            ??_abs 0075                              ??_isr 0070  
                    __CFG_PLLEN$ON 0000                    __end_of___aldiv 0299  
                            ?_main 004A                              ?_init 0070  
                            _ADRES 009B                              i1l845 0020  
                     __delay_ms@ms 0073                       __delay_ms@us 0077  
main@lowerBallSensorThresholdValue 0057                ___lmul@multiplicand 0024  
                    __CFG_PWRTE$ON 0000                     __CFG_FCMEN$OFF 0000  
                   __pbitbssCOMMON 03C8                              isr@us 0072  
                            ltemp0 007E                              ltemp1 0082  
                            ltemp2 0086                              ltemp3 0080  
                            ttemp0 007E                              ttemp1 0081  
                            ttemp2 0084                              ttemp3 0087  
                            ttemp4 007F                              status 0003  
                            wtemp0 007E                              wtemp1 0080  
                            wtemp2 0082                              wtemp3 0084  
                            wtemp4 0086                              wtemp5 0088  
                            wtemp6 007F                     __CFG_MCLRE$OFF 0000  
                  __initialization 002E             __size_of_initInterrupt 000A  
                     __end_of_main 0217                       __end_of_init 0318  
                           ??_main 004E                             ??_init 0073  
                 calibrate@lastVal 003C                             _OSCCON 0099  
                 __end_of_getValue 02CD                             ___lmul 02CD  
                        ??___aldiv 0077                      _initInterrupt 033F  
          __end_of__initialization 002F                 __size_of__delay_ms 0019  
                   __pcstackCOMMON 0070                 __size_of_calibrate 0128  
                   ?_initInterrupt 0070                         __pmaintext 0159  
                          ?___lmul 0020                         __pintentry 0004  
              calibrate@averageVal 0042                     ___lmul@product 0073  
                calibrate@inputVal 0048                  __end_of__delay_ms 0331  
                        ?_getValue 0073                  __end_of_calibrate 0159  
                       calibrate@i 0046                            ___aldiv 0217  
                  __size_of___lmul 0030                    __CFG_STVREN$OFF 0000  
                          __ptext1 033F                            __ptext2 02FD  
                          __ptext3 0031                            __ptext4 0299  
                          __ptext5 0331                            __ptext6 0318  
                          __ptext7 0217                            __ptext8 02CD  
                  ??_initInterrupt 0073                       __size_of_abs 000E  
                     __size_of_isr 0029                   ___aldiv@dividend 002C  
                        _IOCAFbits 0393                          _IOCANbits 0392  
                        _IOCAPbits 0391                         ??_getValue 0075  
             end_of_initialization 002F                     main@hysterysis 0054  
                 ___aldiv@quotient 0032                          _PORTAbits 000C  
                 __CFG_FOSC$INTOSC 0000                          _TRISAbits 008C  
                   __end_of___lmul 02FD                        __delay_ms@i 0076  
                  main@changeValue 0052                start_initialization 002E  
                      __end_of_abs 033F                        __end_of_isr 002D  
                         ??___lmul 0073                          ___latbits 0000  
                    __pcstackBANK0 0020                          __delay_ms 0318  
                __size_of_getValue 0034                          _calibrate 0031  
                         ?___aldiv 0028                         ?__delay_ms 0073  
                  ___aldiv@divisor 0028                    ___aldiv@counter 0030  
                       ?_calibrate 0036                           _LATAbits 010C  
                       _ADCON0bits 009D                         _ADCON1bits 009E  
                        main@value 0059                          main@state 0056  
            __end_of_initInterrupt 0349                  ___lmul@multiplier 0020  
             main@steadyStateValue 005B                   __size_of___aldiv 0082  
                       _ANSELAbits 018C                        ??__delay_ms 0075  
                         _getValue 0299                        ??_calibrate 0038  
                    __size_of_main 00BE                      __size_of_init 001B  
                         main@argc 004A                           main@argv 004C  
                       _INTCONbits 000B                         _FVRCONbits 0117  
                         intlevel1 0000                  __CFG_CLKOUTEN$OFF 0000  
                     ___aldiv@sign 0031                         _WDTCONbits 0097  
                      getValue@val 0077  
